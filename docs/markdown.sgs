
include "string";


function htmlencode( text )
{
	text = string_replace( text, "&", "&amp;" );
	text = string_replace( text, "<", "&lt;" );
	text = string_replace( text, ">", "&gt;" );
	text = string_replace( text, "'", "&#39;" );
	text = string_replace( text, "\"", "&quot;" );
	return text;
}

function uladjust( prev, cur )
{
	if( prev == cur )
		return "</li><li>";
	else if( prev < cur )
		return string_repeat( "<ul><li>", cur - prev );
	else // prev > cur
		return string_repeat( "</li></ul>", prev - cur ) $ ["","<li>"][ cur > 0 ];
}

function array_find( a, what )
{
	for( i = 0; i < a.size; ++i )
	{
		if( a[ i ] == what )
			return i;
	}
	return null;
}

function markdown2html( text )
{
	function mdinline( text )
	{
		function apply_tag( hstack, tag, attribs )
		{
			attribs = attribs || {};
			out = "";
			if( array_find( hstack, tag ) !== null )
			{
				tmp = [];
				while( ( x = hstack.pop() ) != tag )
				{
					out $= "</"$x$">";
					tmp.push( x );
				}
				out $= "</"$tag$">";
				while( tmp.size )
				{
					x = tmp.pop();
					out $= "<"$x$">";
					hstack.push( x );
				}
			}
			else
			{
				hstack.push( tag );
				out $= "<"$tag;
				foreach( k, v : attribs )
				{
					out $= " ";
					out $= k;
					out $= "=\"";
					out $= v;
					out $= "\"";
				}
				out $= ">";
			}
			return out;
		}
		
		out = "";
		hstack = [];
		for( i = 0; i < text.length; ++i )
		{
			chr = text[ i ];
			if( chr == "@" )
			{
				b = ++i;
				while( i < text.length && text[i] != "<" )
					i++;
				if( i >= text.length || text[i] != "<" )
				{
					out $= text[ b - 1 ];
					i = b - 1;
					continue;
				}
				href = string_part( text, b, i - b );
				out $= apply_tag( hstack, "a", {href=href} );
			}
			else if( chr == ">" && hstack.size && hstack.last == "a" )
			{
				out $= apply_tag( hstack, "a" );
			}
			else if( chr == "*" && i > 1 && text[i-1] == "*" && text[i-2] == "*" )
			{
				if( i + 1 < text.length && string_cut( text, i+1, i+1 ) == "*" ) // bold
				{
					out $= apply_tag( hstack, "b" );
					i++;
				}
				else
				{
					out $= apply_tag( hstack, "i" );
				}
			}
			else if( chr == "`" )
				out $= apply_tag( hstack, "code" );
			else
				out $= htmlencode( chr );
		}
		while( hstack.size )
		{
			x = hstack.pop();
			out $= "</" $ x $ ">";
		}
		return out;
	}
	
	text = string_replace( text, ['\r\n','\r'], '\n' );
	
	lines = string_explode( text, "\n" );
	for( i = 0; i < lines.size; ++i )
	{
		L = lines[ i ];
		
		if( string_part( L, 0, 3 ) == "---" )
		{
			lines[ i ] = "</p><hr /><p>";
		}
		else if( string_part( L, 0, 2 ) == "- " )
		{
			lines[ i ] = "</p><ul><li>" $ mdinline( string_trim( L, "- ", STRING_TRIM_LEFT ) );
			i++;
			ulevel = 1;
			while( i < lines.size )
			{
				L = lines[ i ];
				tr = string_trim( L, "-", STRING_TRIM_LEFT );
				tr2 = string_trim( tr, " ", STRING_TRIM_LEFT );
				dashcnt = L.length - tr.length;
				spacecnt = tr.length - tr2.length;
				if( !dashcnt || !spacecnt )
				{
					i--;
					break;
				}
				lines[ i ] = uladjust( ulevel, dashcnt ) $ mdinline( string_trim( L, "- ", STRING_TRIM_LEFT ) );
				ulevel = dashcnt;
				i++;
			}
			if( i >= lines.size ) i--;
			lines[ i ] $= uladjust( ulevel, 0 ) $ "<p>";
		}
		else if( string_part( L, 0, 2 ) == "! " )
		{
			lines[ i ] = "<em class='notice-bgr'>" $ mdinline( string_trim( L, "! ", STRING_TRIM_LEFT ) ) $ "</em>";
		}
		else if( string_part( L, 0, 4 ) == "    " )
		{
			lines[ i ] = "</p><pre>" $ htmlencode( string_part( L, 4 ) );
			i++;
			while( i < lines.size )
			{
				L = lines[ i ];
				if( string_part( L, 0, 4 ) != "    " )
				{
					i--;
					break;
				}
				lines[ i ] = htmlencode( string_part( L, 4 ) );
				i++;
			}
			if( i >= lines.size ) i--;
			lines[ i ] $= "</pre><p>";
		}
		else if( string_part( L, 0, 2 ) == "==" )
		{
			cnt = L.length - string_trim( L, "=", STRING_TRIM_LEFT ).length + 1;
			if( cnt > 6 ) cnt = 6;
			L = string_trim( L, "= \t\v\r\n" );
			lines[ i ] = "</p><h"$cnt$">" $ mdinline( L ) $ "</h"$cnt$"><p>";
		}
		else if( string_trim( L ) == "" )
		{
			lines[ i ] = "</p><p>";
		}
		else
			lines[ i ] = mdinline( L );
	}
	
	return "<p>" $ string_implode( lines, "\n" ) $ "</p>";
}

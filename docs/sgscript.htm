<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en-US" lang="en-US">
	<head>
		<title>SGScript Documentation</title>
		<meta charset="utf-8" />
		<style type="text/css">
body { font-family: Arial, Helvetica, sans-serif; margin: 0; padding: 16px; background: #EFEFEF; color: #333; }
h1 { margin: 6px 0; background: #555; color: #EEE; padding: 2px 8px; }
h2 { margin: 21px 0 5px 0; display: inline-block; background: #C21; color: #EEE; padding: 2px 8px; }
h3 { margin: 19px 0 4px 0; }
p, ul { margin: 8px 0; }
h1 a, h2 a, h3 a { color: inherit; }
a { text-decoration: none; color: #C21; }
a:hover { text-decoration: underline; }
.cont { margin-left: 16px; }
.txt { line-height: 150%; }
.toc { margin: 4px 16px; line-height: 130%; }
.break { height: 16px; }
.l1 { margin-left: 0px; }
.l2 { margin-left: 16px; }
table { box-shadow: 1px 1px 5px rgba( 0, 0, 0, 0.2 ); }
th, td { padding: 2px 5px; }
th { background: #FFF; }
pre,
code { background: #E5E5E5; display: inline-block; padding: 2px 4px; border-radius: 2px; line-height: 120%; border: 1px solid #F7F7F7; white-space: nowrap; position: relative; }
body pre { display: block; }
code i { display: none; padding: 4px 8px; left: 100%; top: 50%; border: 1px solid #A00; background: #C21; color: #EEE; }
code:hover i { display: inline-block; position: absolute; z-index: 2; border-radius: 5px; box-shadow: 2px 2px 5px rgba(0,0,0,0.5); }
.notice { background: #79C; color: #FFF; font-weight: bold; padding: 4px; margin: 4px; display: inline-block; font-size: 16px; border: 1px solid #68B;
	width: 20px; height: 20px; text-align: center; text-shadow: 0px 0px 5px #FFF, 0px 0px 9px #FFF, 0px 0px 13px #FFF; font-family: monospace; border-radius: 1px; }
		</style>
	</head>
	<body>
		<noscript>Notice: to generate extended links for simplified traversal, enable JavaScript for this page</noscript>
		<h1>SGScript documentation - v0.8.2</h1>
		
		<div class="cont">
		
			<a name="table-of-contents"></a>
			<h2><a href="#table-of-contents">Table of Contents</a></h2>
			<div class="toc">
				<div class="l1"><a href="#intro">1. Intro</a></div>
					<div class="l2"><a href="#intro-why">1.1. Why SGScript?</a></div>
					<div class="l2"><a href="#intro-features">1.2. Feature list</a></div>
				<div class="l1"><a href="#sgscript">2. SGScript</a></div>
					<div class="l2"><a href="#sgscript-basics">2.1. The basics</a></div>
				<div class="l1"><a href="#usage">3. Library API</a></div>
			</div>
			
			<a name="intro"></a>
			<h2><a href="#intro">Intro</a></h2>
			
			<a name="intro-why"></a>
			<h3><a href="#intro-why">Why SGScript?</a></h3>
			<div class="cont txt">
<p>
	SGScript is a scripting language that is made to be used in all kinds of environments.
	Where other languages / virtual machines may have requirements beyond your control, this one is light on memory usage and requires a level of explicitness that matches the weight of a feature.
	Very few things are hidden from the user, making it simple to detect performance and memory problems, if they occur.
</p>
<p>
	Most design decisions in the language are oriented towards control so you might find yourself out of luck a few times while trying to find a high-level feature to do the job for you.
	For example, <i>there is no such thing as "exceptions" in the language</i>. This is to avoid ambiguity in error handling, as well as the performance hit that occurs when all registered handlers are checked for each minor issue that occurs in simple use of the language.
</p>
			</div>
			
			<a name="intro-features"></a>
			<h3><a href="#intro-features">Feature list</a></h3>
			<div class="cont txt">
<p>The language supports:</p>
<ul>
	<li><code>if/else</code>, <code>while</code>, <code>for</code>, <code>do/while</code>, <code>foreach</code></li>
	<li>8 variable types: null, bool, int, real, string, function, C function, object</li>
	<li>Multi-level break/continue</li>
	<li>First-class functions</li>
</ul>
<p>The virtual machine supports:</p>
<ul>
	<li>Operator overloading</li>
	<li>On-demand garbage collection</li>
	<li>Full introspection of machine state</li>
</ul>
<p>The standard library includes:</p>
<ul>
	<li>array, dict, class, closure</li>
	<li>math, string and type functions</li>
	<li>eval, file import, DLL import</li>
</ul>
			</div>
			
			<a name="sgscript"></a>
			<h2><a href="#sgscript">SGScript</a></h2>
			
			<a name="sgscript-basics"></a>
			<h3><a href="#sgscript-basics">Basics</a></h3>
			<div class="cont txt">
<p>
	<span class="notice">i</span> If you consider yourself familiar with languages like JavaScript, PHP or C, you may want to skip this section.
</p>
<p>
	There are 8 <b>data types</b> in SGScript: <code>null</code>, <code>bool</code>, <code>int</code>, <code>real</code>, <code>string</code>, <code>function</code>, <code>C function</code> and <code>object</code>. Each of them offers a different set of features and possible values. The values may sometimes overlap, so the language offers automatic conversion between types where and to what extent it is possible.
</p>
<table><thead><tr><th>Type</th><th>Examples</th><th>Notes</th></tr></thead><tbody>
	<tr><td>null</td><td><code>null</code></td><td>
		Value is used to specify the lack of a more useful value.
	</td></tr>
	<tr><td>bool</td><td><code>true</code>, <code>false</code></td><td>
		Used for output of comparisons, as well as to specify state where only two are possible.
	</td></tr>
	<tr><td>int</td><td><code>8943</code>, <code>0x4f1</code>, <code>0o644</code>, <code>0b1101001</code></td><td>
		Integers. It's possible to use decimal, hexadecimal, octal and binary integer formats to declare them (formats shown in examples are in the same order).
	</td></tr>
	<tr><td>real</td><td><code>2.37</code>, <code>0.14159</code>, <code>2.23e+6</code></td><td>
		Real values. Exponent can be specified.
	</td></tr>
	<tr><td>string</td><td><code>"this is some text"</code>, <code>'this is...\nmultiline text'</code>, <code>"I \xC2A9 what you did there."</code></td><td>
		Possible to use " and ' to quote text, everything works the same except the other character can be used without escaping. Every special value from C is also supported, as well as the ability to write hexadecimal values (<code>\xXX</code> or <code>\xXXXX</code>) inside the string. Strings are encoding-independent, as long as the encoding is based on ASCII, otherwise they're not guaranteed to work. (In case you're wondering, <code>\xC2A9</code> is the UTF-8 version of "&#xa9;".)
	</td></tr>
	<tr><td>function</td><td><code>function( a, b ){ return a + b; }</code>, <code>function inherentlyglobal( x ){ return x * 5; }</code></td><td>
		Represents a compiled function.
	</td></tr>
	<tr><td>C function</td><td>Cannot be defined in code.</td><td>
		Represents the native function.
	</td></tr>
	<tr><td>object</td><td><code>[ 1, 2, 5, 4, "cheese" ]</code>, <code>{ one = 1.0, two = 2.0 }</code></td><td>
		Represents a native object with a SGScript-friendly interface. There are two object types that can be defined in code: array and dict. The rest are usually defined with native functions, such as <code>class( data, inherited )</code> and <code>closure( callable, data )</code> (more on these later).
	</td></tr>
</tbody></table>
<p>
	<b>Constructs</b> in SGScript are split into two major parts: statements and expressions. Statements tell what will happen, expressions explain things in detail.
</p>
<table><thead><tr><th>Name</th><th>Examples</th></tr></thead><tbody>
	<tr><td>Statements</td><td>
		<ul>
			<li><code>a = 5 ;</code> - the expression statement</li>
			<li><code>if( .. ) ...; else ...;</code> - the conditional statement</li>
			<li><code>break ;</code> - the loop control statement</li>
		<ul>
	</td></tr>
	<tr><td>Expressions</td><td>
		<ul>
			<li><code>a = 5</code> (without the ";") - the assignment expression, assigns 5 to "a"</li>
			<li><code>a &lt; 3</code> - comparison expression</li>
			<li><code>square( x )</code> - function call expression</li>
			<li><code>{ f = 6, q = "text" }</code> - dictionary variable declaration expression</li>
		</ul>
	</td></tr>
</tbody></table>
<p>
	<b>Expressions</b> come in many shapes and sizes: arithmetic, binary, boolean, comparison, declarative and a few special ones. Move the cursor over the operators to see their names.
</p>
<table><thead><tr><th>Name</th><th>Supported operators / constructs</th><th>Examples</th><th>Notes</th></tr></thead><tbody>
	
	<tr><td>Arithmetic</td>
	<td><code>+<i>add</i></code>, <code>-<i>subtract</i></code>, <code>*<i>multiply</i></code>, <code>/<i>divide</i></code>, <code>%<i>modulo</i></code>, <code>++<i>increment</i></code>, <code>--<i>decrement</i></code>, <code>+=<i>add-assign</i></code>, <code>-=<i>subtract-assign</i></code>, <code>*=<i>multiply-assign</i></code>, <code>/=<i>divide-assign</i></code>, <code>%=<i>modulo-assign</i></code></td><td>
		<ul>
			<li><code>b * 3 + 4</code></li>
			<li><code>a++</code></li>
			<li><code>-c</code></li>
		</ul>
	</td><td>
		<ul>
			<li>The <code>+</code> and <code>-</code> operators are available also as unary operators: <code>+</code> does nothing, <code>-</code> returns the negated value</li>
			<li>There are two kinds of increment (<code>++</code>) and decrement (<code>--</code>) operators: pre- and post-. The difference is in the return value: pre-increment returns the value after the addition of 1, post-increment returns the value before the addition.</li>
		</ul>
	</td></tr>
	
	<tr><td>Binary</td>
	<td><code>&amp;<i>binary AND</i></code>, <code>|<i>binary OR</i></code>, <code>^<i>binary XOR</i></code>, <code>&lt;&lt;<i>left shift</i></code>, <code>&gt;&gt;<i>right shift</i></code>, <code>&amp;=<i>binary AND-assign</i></code>, <code>|=<i>binary OR-assign</i></code>, <code>^=<i>binary XOR-assign</i></code>, <code>&lt;&lt;=<i>left shift-assign</i></code>, <code>&gt;&gt;=<i>right shift-assign</i></code>, <code>~<i>invert bits</i></code></td><td>
		<ul>
			<li><code>f |= 0x20</code></li>
			<li><code>x &amp; b</code></li>
			<li><code>2 &lt;&lt; 10</code></li>
		</ul>
	</td><td>
		<ul>
			<li>Only integers support binary operators</li>
		</ul>
	</td></tr>
	
	<tr><td>Boolean</td>
	<td><code>&amp;&amp;<i>boolean AND</i></code>, <code>||<i>boolean OR</i></code>, <code>&amp;&amp;=<i>boolean AND-assign</i></code>, <code>||=<i>boolean OR-assign</i></code>, <code>!<i>boolean invert</i></code></td><td>
		<ul>
			<li><code>exists &amp;&amp; valid</code></li>
			<li><code>if( a &gt; 5 || a &lt; 0 ) ...</code></li>
		</ul>
	</td><td>
		<ul>
			<li>A somewhat unique addition are the boolean assignment operators. They can be used to safely convert many function outputs into <code>bool</code> variables and combine them without doing it all on one line or with some fancy formatting:<pre>res = true;<br/>res &amp;&amp;= getcount1();<br/>res &amp;&amp;= getcount2() &gt; 1;<br/>res &amp;&amp;= getcount3();</pre></li>
		</ul>
	</td></tr>
	
	<tr><td>Comparison</td>
	<td><code>&lt;<i>less than</i></code>, <code>&lt;=<i>less than or equal</i></code>, <code>==<i>equal</i></code>, <code>&gt;<i>greater than</i></code>, <code>&gt;=<i>greater than or equal</i></code>, <code>!=<i>not equal</i></code>, <code>===<i>strict equality</i></code>, <code>!==<i>strict inequality</i></code></td><td>
		<ul>
			<li><code>a &lt;= b</code></li>
			<li><code>x != 5</code></li>
			<li><code>r === false</code></li>
		</ul>
	</td><td>
		<ul>
			<li><code>===</code> and <code>!==</code> are type-checking versions of <code>==</code> and <code>!=</code> operators, respectively. For example, <code>5 == 5.0</code> returns <code>true</code> and <code>5 === 5.0</code> returns <code>false</code> - this is because the value on the left side is an <code>int</code> but the value on the right side is of type <code>real</code> and both values are otherwise equal.
		</ul>
	</td></tr>
	
	<tr><td>Declarative</td>
	<td><code>var|global &lt;variable-name&gt;[ = &lt;initial-value-expr&gt;]</code></td><td>
		<ul>
			<li><code>var a = 5</code></li>
			<li><code>global x = "y"</code></li>
		</ul>
	</td><td>
		<ul>
			<li>The declaration of variable cannot change inside a scope (one scope is inside a function, another is outside all functions - more on that later). The variable may be redefined, though:<pre>var a; var a; // OK<br/>var b; global b; // ERROR<br/>global c; var c; // ERROR</pre></li>
		</ul>
	</td></tr>
	
	<tr><td>Special</td><td>
		<ul>
			<li>Operators: <code>=<i>assign</i></code>, <code>$<i>string-concatenate</i></code>, <code>$=<i>string-concatenate-assign</i></code>, <code>.<i>property</i></code>
		</ul>
	</td><td>
		<ul>
			<li><code>a $= "have " $ arr.size $ " items";</code></li>
		</ul>
	</td><td>
		<ul>
		</ul>
	</td></tr>
	
</tbody></table>
			</div>
		
		</div>
		
		<h1 style='font-size: 12px; margin-top: 21px; color: #CCC;'>&nbsp;</h1>
	</body>
</html>
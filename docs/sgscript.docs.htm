<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
	<html><head>
		<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
		<title>SGScript documentation - v0.9.5</title>
		<link rel="stylesheet" type="text/css" href="docs.css">
		<script type="text/javascript" src="docs.js"></script>
	</head><body>
	<h1>SGScript documentation - v0.9.5</h1><div><h2>Table of Contents</h2><ul><li><a href='#SGScript-description'>SGScript - description</a>
<ul><li><a href='#Code-samples-SGScript'>Code samples - SGScript</a>
</li><li><a href='#Code-samples-the-C-API'>Code samples - the C API</a>
</li></ul><li><a href='#Language-reference'>Language reference</a>
<ul><li><a href='#Variable-types'>Variable types</a>
<ul><li><a href='#Conversion-rules'>Conversion rules</a>
</li></ul><li><a href='#Code-structure'>Code structure</a>
<ul><li><a href='#Constants'>Constants</a>
</li><li><a href='#Identifiers'>Identifiers</a>
</li><li><a href='#Expressions'>Expressions</a>
</li><li><a href='#Statements'>Statements</a>
</li><li><a href='#Built-in-accessors'>Built-in accessors</a>
</li></ul><li><a href='#Common-constructs-in-SGScript'>Common constructs in SGScript</a>
<ul><li><a href='#Basic-classes'>Basic classes</a>
</li><li><a href='#Inheritance'>Inheritance</a>
</li><li><a href='#Game-entities'>Game entities</a>
</li></ul><li><a href='#Numeric-string-parsing-rules'>Numeric string parsing rules</a>
</li></ul><li><a href='#C-API-reference'>C API reference</a>
<ul><li><a href='#Constants-and-types'>Constants and types</a>
<ul><li><a href='#Main-types'>Main types</a>
</li><li><a href='#Error-codes'>Error codes</a>
</li><li><a href='#Variable-types'>Variable types</a>
</li><li><a href='#Constant-registration-types'>Constant registration types</a>
</li></ul><li><a href='#Concepts-systems'>Concepts &amp; systems</a>
<ul><li><a href='#Messaging-system'>Messaging system</a>
</li><li><a href='#Iterator-system'>Iterator system</a>
</li><li><a href='#Garbage-collection-system'>Garbage collection system</a>
</li><li><a href='#Classes'>Classes</a>
</li><li><a href='#Closures'>Closures</a>
</li></ul><li><a href='#Functions'>Functions</a>
<ul><li><a href='#Context-management'>Context management</a>
</li><li><a href='#Memory-management'>Memory management</a>
</li><li><a href='#Input-output'>Input / output</a>
</li><li><a href='#Code-handling'>Code handling</a>
</li><li><a href='#Introspection'>Introspection</a>
</li><li><a href='#Execution-control'>Execution control</a>
</li><li><a href='#Binding-helpers'>Binding helpers</a>
</li><li><a href='#Object-type-storage'>Object type storage</a>
</li><li><a href='#Variable-initialization'>Variable initialization</a>
</li><li><a href='#Stack-primary-interface'>Stack primary interface</a>
</li><li><a href='#Sub-item-usage'>Sub-item usage</a>
</li><li><a href='#Argument-handling'>Argument handling</a>
</li><li><a href='#Virtual-machine-operations'>Virtual machine operations</a>
</li><li><a href='#String-helpers'>String helpers</a>
</li><li><a href='#Closures'>Closures</a>
</li><li><a href='#Data-retrieval-conversion'>Data retrieval &amp; conversion</a>
</li><li><a href='#Iterators'>Iterators</a>
</li><li><a href='#Variable-ownership'>Variable ownership</a>
</li><li><a href='#String32-optimization-interface'>String32 optimization interface</a>
</li><li><a href='#Utility-functions'>Utility functions</a>
</li><li><a href='#ALL-functions-A-Z'>ALL functions (A-Z)</a>
</li></ul><li><a href='#Interface-implementation'>Interface implementation</a>
<ul><li><a href='#C-Functions'>C Functions</a>
</li><li><a href='#Object-interface'>Object interface</a>
</li><li><a href='#Interaction-with-the-environment'>Interaction with the environment</a>
</li></ul><li><a href='#Commonly-required-advanced-tasks'>Commonly required advanced tasks</a>
</li></ul><li><a href='#Standard-library-reference'>Standard library reference</a>
<ul><li><a href='#Core-library'>Core library</a>
</li><li><a href='#Formatting-library-fmt'>Formatting library (&quot;fmt&quot;)</a>
</li><li><a href='#I-O-library-io'>I/O library (&quot;io&quot;)</a>
</li><li><a href='#Math-library-math'>Math library (&quot;math&quot;)</a>
</li><li><a href='#OS-library-os'>OS library (&quot;os&quot;)</a>
</li><li><a href='#Regular-expression-library-re'>Regular expression library (&quot;re&quot;)</a>
</li><li><a href='#String-library-string'>String library (&quot;string&quot;)</a>
</li></ul><li><a href='#Additional-info'>Additional info</a>
<ul><li><a href='#Serialization-in-SGScript'>Serialization in SGScript</a>
</li></ul></li></ul></div><div>
<div class='item'><a name='SGScript-description'></a><hr><h2>SGScript - description</h2><p>
This is a programming language that is made to be fast, accessible and simple.
</p><pre>include &quot;math&quot;;

gradient = [ &quot;.&quot;, &quot;o&quot;, &quot;O&quot;, &quot;#&quot;, &quot;O&quot;, &quot;o&quot;, &quot;.&quot; ];

for( y = -7; y &lt;= 7; ++y )
{
    for( x = -7; x &lt;= 7; ++x )
    {
        dst = sqrt( x * x + y * y ) * 0.9;
        if( dst &gt; 6 )
            dst = 6;
        chr = gradient[ dst ];
        print chr $ &#39; &#39;;
    }
    println();
}</pre><p>
It is similar to many but the exact combination makes it unique in comparison to others. Thus, it might be best to describe it in comparison to others, especially the ones that heavily influenced the development of SGScript.
</p><p>
<table>
<tr><th>language</th><th>what it DOESN&#39;T have in comparison to SGScript</th></tr>
<tr><td>C</td><td>dynamic typing, built-in serialization</td></tr>
<tr><td>Lua</td><td>built-in serialization, C-like syntax, proper indexing, arrays, ...</td></tr>
<tr><td>PHP</td><td>consistency, lightweight design</td></tr>
<tr><td>JavaScript</td><td>environmental awareness, determinism, built-in serialization, ...</td></tr>
<tr><td>Python</td><td>C-like syntax, lightweight design</td></tr>
</table>
</p><p>
With this in mind, technologies get upgraded occasionally, thus be sure to take this comparison with a grain of salt and recheck it and perhaps even report the factual errors along with the version number that marked the introduction of changes.
</p><p>
However, SGScript has all of the things mentioned, and some more, possibly making it one of the most balanced languages ever created.
</p><p>
The language supports:
</p><ul><li><code>if/else</code>, <code>while</code>, <code>for</code>, <code>do/while</code>, <code>foreach</code>
</li><li>9 variable types: null, bool, int, real, string, function, C function, object, pointer
</li><li>Multi-level break/continue
</li><li>Multiple return values
</li><li>First-class functions and ability to attach variables to functions (creating closures)</li></ul><p>
The standard library includes:
</p><ul><li>array, dict, map, class
</li><li>math, string, I/O, O/S and formatting functions
</li><li><code>eval</code>, file import, DLL import</li></ul></div>
<div class='item'><a name='Code-samples-SGScript'></a><hr><h2>Code samples - SGScript</h2><h4>Statements</h4><pre>print &quot;Text&quot;;
println( &quot;!&quot; );
b = rand();</pre><h4>Comments</h4><pre>// this is a comment that ends with the line

/* this type of comment
   can be more than
   one line long
*/</pre><h4>Basic calculations</h4><pre>a = 1, b = 2, c = 5;
d = a + b * c - b / a;
a += 3.14;
c = &quot;eye&quot; $ &quot;sight&quot; // stitch (concatenate) strings together!
d = &quot;Ocean&#39;s &quot; $ 11;</pre><h4>Comparison</h4><pre>if( c &gt; 5 )
    print &quot;as expected&quot;;
y = x &lt;= 8.8; // result of comparison can be assigned!</pre><h4>Useful shortcuts</h4><pre>a += 1; // short for a = a + 1
a++;    // short for a += 1
a--;
a = if( b &gt; 5, 10, 20 ); // short for if( b &gt; 5 ){ a = 10; } else { a = 20; }</pre><h4>Flow control</h4><pre>if( a &gt; b )
{
    print &quot;something happens only if a is greater than b&quot;;
}
else
    print &quot;...and here the opposite is true&quot;;

while( a &gt; b )
{
    print &quot;something happens as long as a is greater than b&quot;;
    a--; // but not for too long, as we see
}
// or maybe ...
do
{   // first we do
    print a;
}
while( a++ &lt; 10 ); // then we check</pre><h4>More useful shortcuts</h4><pre>for( i = 0; i &lt; 10; i++ )
    print i;
// .. is the short form for ..
i = 0;
while( i &lt; 10 )
{
    print i;
    i++;
}
for(;;) // this is not going to stop...
    print &quot;x&quot;;</pre><h4>More flow control</h4><pre>x = 5;
for(;;)
{
    print x;
    x--;
    if( x &lt; 0 )
        break; // this says that we don&#39;t want to continue staying in the loop
}
// &lt;&lt; this is where &quot;break&quot; leads us, right after the loop

// this goes through a list
foreach( fruit : [ &quot;apple&quot;, &quot;orange&quot;, &quot;banana&quot; ] )
    println( fruit );

// .. of 2 items ..
list = { &quot;1&quot; = &quot;apple&quot;, &quot;2&quot; = &quot;orange&quot;, &quot;3&quot; = &quot;banana&quot; };
foreach( number, fruit : list )
    println( number $ &quot;. &quot; $ fruit );</pre><h4>Functions</h4><pre>// cornerstore of reusable code
function square( x )
{
    return x * x;
}
print square( 5 );

function print_quoted( text )
{
    print &#39;&quot;&#39; $ text $ &#39;&quot;&#39;;
}
print_quoted( &quot;It works!&quot; );</pre><h4>Objects</h4><pre>a = [ 1, 2, &quot;three&quot; ];
a[2] = 3;
a[1]++;

d = {
    name = &quot;test&quot;,
    text = &quot;hello&quot;,
};
d.name = &quot;test, edited&quot;;
d.text $= &quot;, world!&quot;;
println( d.text ); // hello, world!</pre><h4>Interesting stuff</h4><pre>printvar( x ); // tells you all you want to know about &quot;x&quot;

// emits an error with the given message if the first argument is false
assert( x &gt; 5, &quot;x must be greater than 5&quot; );

// returns the type name
typeof( x );

// universal external code loader
include &quot;math&quot;, &quot;string&quot;, &quot;something&quot;;</pre></div>
<div class='item'><a name='Code-samples-the-C-API'></a><hr><h2>Code samples - the C API</h2><h4>Primary operations</h4><pre>// create the context
sgs_Context* C = sgs_CreateEngine();

// load the built-in math library
sgs_LoadLib_Math( C );

// load a file
sgs_ExecFile( C, &quot;script.sgs&quot; );

// call a global function with 0 arguments, expecting 0 values returned
sgs_GlobalCall( C, &quot;myFunction&quot;, 0, 0 );

// destroy the context
sgs_DestroyEngine( C );</pre><h4>Data in, data out</h4><pre>sgs_Context* C = sgs_CreateEngine();
sgs_LoadLib_Math( C );

// push a variable on the stack
sgs_PushReal( C, 3.14 );

// call a global function with 1 argument, expecting 1 value returned
sgs_GlobalCall( C, &quot;sin&quot;, 1, 1 );

// check the returned value
printf( &quot;returned value: %f\n&quot;, sgs_GetReal( C, -1 ) );

// clean the stack
sgs_SetStackSize( C, 0 );</pre></div>
<div class='item'><a name='Language-reference'></a><hr><h2>Language reference</h2></div>
<div class='item'><a name='Variable-types'></a><hr><h2>Variable types</h2><p>
SGScript has 8 primary variable types:
</p><ul><li>`null`: the &#39;lack of a better value&#39; type
</li><li>`bool`: boolean, true/false
</li><li>`int`: signed integer
</li><li>`real`: floating point number
</li><li>`string`: byte buffer
</li><li>`(SGS) function`: function that was defined in and compiled from SGScript code
</li><li>`C function`: function defined in C code
</li><li>`object`: the extension type and container for complex built-in types</li></ul><p>
Extended variable types (built on `object`):
</p><ul><li>`array`: a dynamically allocated variable array
</li><li>`dict`: a map/table structure where variables are mapped to string keys
</li><li>`map`: a map/table structure where variables are mapped to variable keys
</li><li>`class`: object that uses two other objects to build its interface
</li><li>`closure`: a callable object consisting of another callable and several variables</li></ul></div>
<div class='item'><a name='Conversion-rules'></a><hr><h2>Conversion rules</h2><p>
<table>
<tr><th>from  \  to</th><th>bool</th><th>int</th><th>real</th><th>string</th><th>ptr</th></tr>
<tr><td>null</td><td>false</td><td>0</td><td>0.0</td><td>&quot;null&quot;</td><td>NULL</td></tr>
<tr><td>bool</td><td>-</td><td>0/1</td><td>0.0/1.0</td><td>&quot;false&quot;/&quot;true&quot;</td><td>NULL/0x1</td></tr>
<tr><td>int</td><td>0 =&gt; false, otherwise true</td><td>-</td><td>-</td><td>-</td><td>cast</td></tr>
<tr><td>real</td><td>0.0 =&gt; false, otherwise true</td><td>round to nearest</td><td>-</td><td>sprintf %g</td><td>cast</td></tr>
<tr><td>string</td><td>empty =&gt; false, otherwise true</td><td>*1</td><td>*1</td><td>-</td><td>char*</td></tr>
<tr><td>func</td><td>true</td><td>0</td><td>0.0</td><td>&quot;function&quot;</td><td>NULL</td></tr>
<tr><td>cfunc</td><td>true</td><td>0</td><td>0.0</td><td>&quot;C function&quot;</td><td>NULL</td></tr>
<tr><td>object *2</td><td>true</td><td>0</td><td>0.0</td><td>&quot;object&quot;</td><td>data ptr.</td></tr>
<tr><td>ptr</td><td>NULL =&gt; false, otherwise true</td><td>cast</td><td>cast</td><td>sprintf ptr(%p)</td><td>-</td></tr>
</table>
</p><ul><li>&quot;-&quot; means the conversion is not necessary, does not affect data or the effect of conversion should be immediately obvious
</li><li>*1) see <a href="#Numeric-string-parsing-rules">Numeric string parsing rules</a> for more info
</li><li>*2) these are the default values, overrides can be provided in CONVERT function and type name for string</li></ul></div>
<div class='item'><a name='Code-structure'></a><hr><h2>Code structure</h2><p>
Code can contain constants, identifiers, expressions and statements. Statements usually include expressions but expressions can also include statements, specifically - function expressions.
</p></div>
<div class='item'><a name='Constants'></a><hr><h2>Constants</h2><p>
Available constant formats:
</p><p>
<table>
<tr><th>type</th><th>subtype</th><th>examples</th></tr>
<tr><td>null</td><td>-</td><td>null</td></tr>
<tr><td>bool</td><td>-</td><td>true, false</td></tr>
<tr><td>int</td><td>decimal</td><td>1413, -583, 0</td></tr>
<tr><td>int</td><td>binary</td><td>0b0101, 0b11</td></tr>
<tr><td>int</td><td>octal</td><td>0o644, 0o1, 0o77</td></tr>
<tr><td>int</td><td>hexadecimal</td><td>0x1f, 0xCA5</td></tr>
<tr><td>real</td><td>basic</td><td>0.14, -25.48</td></tr>
<tr><td>real</td><td>scientific</td><td>1.5e-5, 1e+10</td></tr>
<tr><td>string</td><td>-</td><td>&quot;text&quot;, &#39;1\n2&#39;</td></tr>
</table>
</p></div>
<div class='item'><a name='Identifiers'></a><hr><h2>Identifiers</h2><p>
Identifiers can contain letters (a-z, A-Z), numbers (0-9) or underscores (&quot;_&quot;) but they cannot begin with a number.
</p><p>
Special keywords and hardcoded constants:
</p><p>
<table>
<tr><th>name</th><th>type</th><th>usage</th></tr>
<tr><td>this</td><td>special identifier, read-only</td><td>method context retrieval</td></tr>
<tr><td>_G</td><td>special identifier, read/write</td><td>global environment access</td></tr>
<tr><td>null</td><td>constant</td><td>constant</td></tr>
<tr><td>true</td><td>constant</td><td>constant</td></tr>
<tr><td>false</td><td>constant</td><td>constant</td></tr>
<tr><td>var</td><td>restricted keyword</td><td>variable declaration</td></tr>
<tr><td>global</td><td>restricted keyword</td><td>variable declaration</td></tr>
<tr><td>function</td><td>restricted keyword</td><td>function definition</td></tr>
<tr><td>use</td><td>restricted keyword</td><td>function definition</td></tr>
<tr><td>if</td><td>restricted keyword</td><td>&quot;if&quot; statement</td></tr>
<tr><td>else</td><td>restricted keyword</td><td>&quot;if/else&quot; statement</td></tr>
<tr><td>do</td><td>restricted keyword</td><td>&quot;do/while&quot; statement</td></tr>
<tr><td>while</td><td>restricted keyword</td><td>&quot;while&quot;, &quot;do/while&quot; statements</td></tr>
<tr><td>for</td><td>restricted keyword</td><td>&quot;for&quot; statement</td></tr>
<tr><td>foreach</td><td>restricted keyword</td><td>&quot;foreach&quot; statement</td></tr>
<tr><td>break</td><td>restricted keyword</td><td>&quot;break&quot; statement</td></tr>
<tr><td>continue</td><td>restricted keyword</td><td>&quot;continue&quot; statement</td></tr>
<tr><td>return</td><td>restricted keyword</td><td>&quot;return&quot; statement</td></tr>
</table>
</p></div>
<div class='item'><a name='Expressions'></a><hr><h2>Expressions</h2><p>
Expressions can be categorized in many different ways: type of action, appearance, whether it also assigns the value somewhere or if its purpose has a special meaning.
</p><p>
There are 5 types of action for expressions in SGScript: arithmetic, binary, boolean, comparison and special.
</p><p>
<table>
<tr><th>expression</th><th>appearance</th><th>type of action</th><th>assign</th><th># in.</th></tr>
<tr><td>add</td><td><code>   A  +  B    </code></td><td>arithmetic</td><td>no</td><td>2</td></tr>
<tr><td>subtract</td><td><code>   A  -  B    </code></td><td>arithmetic</td><td>no</td><td>2</td></tr>
<tr><td>multiply</td><td><code>   A  *  B    </code></td><td>arithmetic</td><td>no</td><td>2</td></tr>
<tr><td>divide</td><td><code>   A  /  B    </code></td><td>arithmetic</td><td>no</td><td>2</td></tr>
<tr><td>modulo</td><td><code>   A  %  B    </code></td><td>arithmetic</td><td>no</td><td>2</td></tr>
<tr><td>pre-increment</td><td><code>     ++ A     </code></td><td>arithmetic</td><td>self</td><td>1</td></tr>
<tr><td>pre-decrement</td><td><code>     -- A     </code></td><td>arithmetic</td><td>self</td><td>1</td></tr>
<tr><td>post-increment</td><td><code>     A ++     </code></td><td>arithmetic</td><td>self</td><td>1</td></tr>
<tr><td>post-decrement</td><td><code>     A --     </code></td><td>arithmetic</td><td>self</td><td>1</td></tr>
<tr><td>add-assign</td><td><code>   A  +=  B   </code></td><td>arithmetic</td><td>yes</td><td>2</td></tr>
<tr><td>subtract-assign</td><td><code>   A  -=  B   </code></td><td>arithmetic</td><td>yes</td><td>2</td></tr>
<tr><td>multiply-assign</td><td><code>   A  *=  B   </code></td><td>arithmetic</td><td>yes</td><td>2</td></tr>
<tr><td>divide-assign</td><td><code>   A  /=  B   </code></td><td>arithmetic</td><td>yes</td><td>2</td></tr>
<tr><td>modulo-assign</td><td><code>   A  %=  B   </code></td><td>arithmetic</td><td>yes</td><td>2</td></tr>
<tr><td>binary AND</td><td><code>   A  &amp;  B    </code></td><td>binary</td><td>no</td><td>2</td></tr>
<tr><td>binary OR</td><td><code>   A  |  B    </code></td><td>binary</td><td>no</td><td>2</td></tr>
<tr><td>binary XOR</td><td><code>   A  ^  B    </code></td><td>binary</td><td>no</td><td>2</td></tr>
<tr><td>left shift</td><td><code>   A  &lt;&lt;  B   </code></td><td>binary</td><td>no</td><td>2</td></tr>
<tr><td>right shift</td><td><code>   A  &gt;&gt;  B   </code></td><td>binary</td><td>no</td><td>2</td></tr>
<tr><td>binary AND-assign</td><td><code>   A  &amp;=  B   </code></td><td>binary</td><td>yes</td><td>2</td></tr>
<tr><td>binary OR-assign</td><td><code>   A  |=  B   </code></td><td>binary</td><td>yes</td><td>2</td></tr>
<tr><td>binary XOR-assign</td><td><code>   A  ^=  B   </code></td><td>binary</td><td>yes</td><td>2</td></tr>
<tr><td>left shift-assign</td><td><code>   A  &lt;&lt;=  B  </code></td><td>binary</td><td>yes</td><td>2</td></tr>
<tr><td>right shift-assign</td><td><code>   A  &gt;&gt;=  B  </code></td><td>binary</td><td>yes</td><td>2</td></tr>
<tr><td>binary invert</td><td><code>     ~ A      </code></td><td>binary</td><td>no</td><td>1</td></tr>
<tr><td>boolean AND</td><td><code>   A  &amp;&amp;  B   </code></td><td>boolean</td><td>no</td><td>2</td></tr>
<tr><td>boolean OR</td><td><code>   A  ||  B   </code></td><td>boolean</td><td>no</td><td>2</td></tr>
<tr><td>boolean AND-assign</td><td><code>   A  &amp;&amp;=  B  </code></td><td>boolean</td><td>yes</td><td>2</td></tr>
<tr><td>boolean OR-assign</td><td><code>   A  ||=  B  </code></td><td>boolean</td><td>yes</td><td>2</td></tr>
<tr><td>boolean invert</td><td><code>     ! A      </code></td><td>boolean</td><td>no</td><td>1</td></tr>
<tr><td>less than</td><td><code>   A  &lt;  B    </code></td><td>comparison</td><td>no</td><td>2</td></tr>
<tr><td>less than or equal</td><td><code>   A  &lt;=  B   </code></td><td>comparison</td><td>no</td><td>2</td></tr>
<tr><td>greater than</td><td><code>   A  &gt;  B    </code></td><td>comparison</td><td>no</td><td>2</td></tr>
<tr><td>greater than or equal</td><td><code>   A  &gt;=  B   </code></td><td>comparison</td><td>no</td><td>2</td></tr>
<tr><td>equal</td><td><code>   A  ==  B   </code></td><td>comparison</td><td>no</td><td>2</td></tr>
<tr><td>not equal</td><td><code>   A  !=  B   </code></td><td>comparison</td><td>no</td><td>2</td></tr>
<tr><td>strict equality</td><td><code>   A  ===  B  </code></td><td>comparison</td><td>no</td><td>2</td></tr>
<tr><td>strict inequality</td><td><code>   A  !==  B  </code></td><td>comparison</td><td>no</td><td>2</td></tr>
<tr><td>declare-local</td><td><code>   var A      </code></td><td>special</td><td>maybe</td><td>any</td></tr>
<tr><td>declare-global</td><td><code>   global A   </code></td><td>special</td><td>maybe</td><td>any</td></tr>
<tr><td>array literal</td><td><code> [ A, B, .. ] </code></td><td>special</td><td>no</td><td>any</td></tr>
<tr><td>dict. literal</td><td><code> {A=1,B=2,..} </code></td><td>special</td><td>no</td><td>any</td></tr>
<tr><td>assign</td><td><code>   A  =  B    </code></td><td>special</td><td>yes</td><td>1</td></tr>
<tr><td>concatenate</td><td><code>   A  $  B    </code></td><td>special</td><td>no</td><td>2</td></tr>
<tr><td>concatenate-assign</td><td><code>   A  $=  B   </code></td><td>special</td><td>yes</td><td>2</td></tr>
<tr><td>property</td><td><code>   A  .  B    </code></td><td>special</td><td>maybe</td><td>2</td></tr>
<tr><td>index</td><td><code>   A [ B ]    </code></td><td>special</td><td>maybe</td><td>2</td></tr>
<tr><td>function call</td><td><code>  A ([B,..])  </code></td><td>special</td><td>no</td><td>&lt;=256</td></tr>
<tr><td>function definition</td><td><code> function A.. </code></td><td>special</td><td>maybe</td><td>0</td></tr>
<tr><td>inline if</td><td><code>  if(A,B,C)   </code></td><td>special</td><td>no</td><td>3(2)</td></tr>
<tr><td>subexpression</td><td><code> ( A[, ..] )  </code></td><td>special</td><td>maybe</td><td>any</td></tr>
</table>
</p><p>
Some notes on the special cases:
</p><ul><li>[increment,decrement] pre-increment and pre-decrement operators return the modified value, post- operators - the original one
</li><li>[boolean] all boolean operators except &#39;boolean invert&#39; (which returns bool) set/return one of the two operands passed
</li><li>[equality] strict (in)equality operators are the same as their non-strict counterparts with one difference: they do type checking, for example <code>5 == 5.0</code> would return &#39;true&#39; and <code>5 === 5.0</code> would return &#39;false&#39;
</li><li>[declare] declarations only actually set the data if they include the assignment expression, otherwise only the type is internally noted for other references
</li><li>[declare] variables can be redeclared as long as they maintain their access level
</li><li>[property,index] whether property or index expressions set data depends if they&#39;re on the receiving (left) end of an assignment expression
</li><li>[inline if] 3 inputs are required, 2 are actually used (as if <code>if(A){return B;}else{return C;}</code> was used)
</li><li>[subexpression] subexpressions can set data if they are set up like this: &lt;subexpression&gt; = &lt;function-call&gt; - this is the way to read more than one return value from a function</li></ul></div>
<div class='item'><a name='Statements'></a><hr><h2>Statements</h2><p>
There are 4 statement types in SGScript:
</p><h4>Container statements</h4><p>
There are two types of container statements: expression statements and block statements.
</p><ul><li>Expression statements contain zero or more expressions, separated by commas (&quot;,&quot;) and ending with semicolons (&quot;;&quot;).
</li><li>Block statements contain zero or more statements.</li></ul><p>
Format:
</p><ul><li>expression statement: <code>&lt;expression&gt;[, &lt;expression&gt;[, &lt;expression&gt; ...]] ;</code>
</li><li>block statement: <code>{ [&lt;statement&gt;[, &lt;statement&gt;...]] }</code></li></ul><p>
Examples:
</p><pre>a = 5;
a = 1, b = 2;</pre><h4>Flow control statements</h4><p>
These statements decide which code gets executed when. They include loops (while, for, foreach, do/while), the if/else construct, break/continue/return.
</p><p>
Formats:
</p><ul><li>if/else: <code>if( &lt;expression&gt; ) &lt;statement&gt; [ else &lt;statement&gt; ]</code>
</li><li>while: <code>while( &lt;expression&gt; ) &lt;statement&gt;</code>
</li><li>for: <code>for( &lt;expression-list&gt;; &lt;expression-list&gt;; &lt;expression-list&gt; ) &lt;statement&gt;</code>
</li><li>foreach: <code>foreach( [&lt;identifier&gt;,][&lt;identifier&gt;] : &lt;expression&gt; ) &lt;statement&gt;</code>
</li><li>do/while: <code>do &lt;statement&gt; while( &lt;expression&gt; )</code>
</li><li>break: <code>break &lt;N&gt;;</code>
</li><li>continue: <code>continue &lt;N&gt;;</code>
</li><li>return: <code>return &lt;expression-list&gt;;</code></li></ul><p>
Examples:
</p><pre>if( a )
{
    print( &quot;a is true&quot; );
}
else
    print( &quot;a is not true&quot; );

while( b &gt; 0 ) b--;</pre><h4>Declaration statements</h4><p>
Statements that begin with &quot;var&quot;, &quot;global&quot; or &quot;function&quot; declare and set variables.
</p><p>
Examples:
</p><pre>var x = 5, y = 6, z;
global World = null;
function fn(){ INFO( &quot;&#39;fn&#39; was called&quot; ); }</pre><h4>Function call statements</h4><p>
These statements are converted directly to function calls. Currently, &#39;include&#39; and &#39;print&#39; functions are available as statements.
</p><p>
Formats:
</p><ul><li>include: <code>include [&lt;file1&gt;[, &lt;file2&gt;...]];</code> - for each entry, a function call is generated
</li><li>print: <code>print [&lt;string&gt;[, &lt;string&gt;...]];</code> - one function call is generated for all items</li></ul><p>
Examples:
</p><pre>include &quot;io&quot;, &quot;string&quot;;
print &quot;Count: &quot;, count;</pre></div>
<div class='item'><a name='Built-in-accessors'></a><hr><h2>Built-in accessors</h2><p>
There are several built-in accessors for the variable types that are available.
</p><p>
<table>
<tr><th>name</th><th>variable type</th><th>accessor type</th><th>description</th></tr>
<tr><td>length</td><td>string</td><td>property</td><td>returns the length of the string, in bytes</td></tr>
<tr><td>char. at</td><td>string</td><td>index</td><td>returns the character from the specified position</td></tr>
<tr><td>call</td><td>any callable</td><td>property</td><td>function that allows to specify &quot;this&quot; for the call</td></tr>
</table>
</p></div>
<div class='item'><a name='Common-constructs-in-SGScript'></a><hr><h2>Common constructs in SGScript</h2><p>
This section shows some ways of implementing various often-used constructs in SGScript. Some of them (specifically the constructs coming from compiled languages) do not map directly to any set of native features and are considered solutions of lower quality.
</p></div>
<div class='item'><a name='Basic-classes'></a><hr><h2>Basic classes</h2><pre>global SampleClass = {}; // create a placeholder type dictionary

function SampleClass.SampleMethod( a, b ) // this is the name that will show up in debug output
{
    return a + b + this.c; // usage of &quot;this&quot; turns the function into a method
}

function SampleClass.SampleFunction( a, b )
{
    return a + b;
}

// Function will show up as &quot;&lt;anonymous&gt;&quot; in debug output, so avoid this kind of function declaration if possible
SampleClass.SampleAnonymous = function( a, b )
{
    return a + b + this.c;
}; // &lt;-- the semicolon is required for this notation

// Giving functions a specific name:
function MyCustomFunction( a, b )
{
    return a + b + this.c; // note that it is still possible to use &quot;this&quot;
}
SampleClass.Sample = MyCustomFunction;

SampleClass.StaticVariable = 5;

// class instantiation without custom data
myclass = class( {}, SampleClass );

// class instantiation with custom data
CustomData = { c = 5, d = 6 };
mydataclass = class( CustomData, SampleClass );

// static construction function
function SampleClass.Create( x )
{
    data = { c = x };
    return class( data, SampleClass );
}

// make class interface into a construction function
function SampleClass.__call( x )
{
    return SampleClass.Create( x );
}
SampleClass = class( null, SampleClass );
// Be aware that this method involves some runtime overhead.
// Prefer simply giving the construction function (or the interface variable) a different name:
function createSampleClass( x )
{
    data = { c = x };
    return class( data, SampleClass );
}

// destructor
function SampleClass.__destruct()
{
    this.c = null;
}

// many more special methods are available for &#39;class&#39; objects</pre></div>
<div class='item'><a name='Inheritance'></a><hr><h2>Inheritance</h2><pre>// class A - base class
global A = {};
function A.func()
{
    println( &quot;base&quot; );
}
function A.create()
{
    return class( {}, A );
}

// class B - inherits from A
global B = {};
function B.func()
{
    // needless to say, this is not the preferred way to do software design in SGScript
	this._super._super.func.call( this );
    println( &quot;override&quot; );
}
A.func_A = A.func; // make a duplicate entry that will not be overridden
// it is usually preferred to make the duplicates near the original entries where they&#39;re expected to be overridden
function B.func()
{
    B.func_A(); // call that entry instead of the original, obstructed entry 
    println( &quot;override&quot; );
}
function B.create()
{
    return class( {}, class( B, A ) );
}</pre></div>
<div class='item'><a name='Game-entities'></a><hr><h2>Game entities</h2><p>
With game entities and objects of similar structure (just about any object) it is easier to simply define it as a key-value data map, without any classes, inheritance or anything of that kind. The nature of a dynamically typed scripting engine implies that almost everything is checked at runtime, making emulation of compiled language constructs pointless.
</p><pre>entity =
{
    x = 10,
    y = 20,
};

function entity.tick( dt )
{
    this.x += dt;
}</pre></div>
<div class='item'><a name='Numeric-string-parsing-rules'></a><hr><h2>Numeric string parsing rules</h2><p>
&quot;&gt;&gt;&gt;&quot; means &quot;until any other symbol has been found&quot; (the text is too dense for exact repetition)
</p><p>
The string is not a number if no numeric characters (0-9) could be parsed. (for example, &quot;+&quot; isn&#39;t a number but &quot;0x&quot; is)
</p><ul><li>if string begins with 0b and has at least 3 characters, try to read a binary integer
<ul><li>&gt;&gt;&gt;, 0 or 1 adds the specified bit to the integer
</li></ul><li>if string begins with 0o and has at least 3 characters, try to read an octal integer
<ul><li>&gt;&gt;&gt;, characters 0-7 add the specified 3 bits to the integer
</li></ul><li>if string begins with 0x and has at least 3 characters, try to read a hexadecimal integer
<ul><li>&gt;&gt;&gt;, characters 0-9, a-f and A-F add the specified 4 bits to the integer
</li></ul><li>otherwise, try to read a decimal number
<ul><li>do a test to see if the number is not an integer
<ul><li>skip the sign character (+ or -)
</li><li>skip the 0-9 characters
</li><li>if e, E or . is found, try to read a real value
<ul><li>read the sign character (+ or -)
</li><li>&gt;&gt;&gt;, characters 0-9 add the specified decimal number to the whole part
</li><li>if the dot character (.) is found, read the fractional part
<ul><li>&gt;&gt;&gt;, characters 0-9 add the specified decimal number to the fractional part
</li></ul><li>if at least 3 more characters can be found and the first is &quot;e&quot; or &quot;E&quot;, read the exponent part
<ul><li>read the sign character (+ or -)
</li><li>&gt;&gt;&gt;, characters 0-9 add the specified decimal number to the exponent part
</li></ul></li></ul><li>otherwise, try to read the integer
<ul><li>read the sign character (+ or -)
</li><li>&gt;&gt;&gt;, characters 0-9 add the specified decimal number to the integer</li></ul></li></ul></li></ul></li></ul></div>
<div class='item'><a name='C-API-reference'></a><hr><h2>C API reference</h2><p>
The interface that it defines is one of the driving forces of SGScript. It is heavily influenced by Lua, while also adding some features of PHP (Zend Engine) and Python.
</p><p>
The most important difference is in error handling and triggers: errors detected in C can easily be non-fatal. Just like with PHP, minor errors are emitted as warnings that also propagate invalid (null) values throughout the system to effectively disable the subsequent calls and notify whoever is interested of the exact trail of errors. Furthermore, this behavior can be modified by using protected calls (pcall function) in SGScript and custom messaging callbacks in C.
</p><p>
The virtual machine supports:
</p><ul><li>Operator overloading
</li><li>On-demand garbage collection
</li><li>Full introspection of machine state
</li><li>Type registration for simplified cross-library data reuse</li></ul></div>
<div class='item'><a name='Constants-and-types'></a><hr><h2>Constants and types</h2><p>
This part of the documentation describes the various types and definitions used in the C API.
</p></div>
<div class='item'><a name='Main-types'></a><hr><h2>Main types</h2><p>
Return types:
</p><ul><li>SGSRESULT [int]: output code (success = 0, failure: &lt; 0 )
</li><li>SGSBOOL [int]: simplified output code (success = 1, failure = 0)
</li><li>SGSMIXED [int32_t] output code / value (success + value: &gt;= 0, failure: &lt; 0)</li></ul><p>
Virtual machine / language types:
</p><ul><li>sgs_Bool [int32_t]: boolean value
</li><li>sgs_Int [int64_t]: integer
</li><li>sgs_Real [double]: real (floating point) value
</li><li>sgs_SizeVal [int32_t]: size type
</li><li>sgs_CFunc [int ( sgs_Context* )]: C function type
</li><li>sgs_ObjInterface [struct]: object interface description
</li><li>sgs_Variable [struct]: the combined variable type</li></ul><p>
System types:
</p><ul><li>sgs_Context [struct]: the virtual machine
</li><li>sgs_StackFrame [struct]: the function call info object</li></ul><p>
Interface types:
</p><ul><li>sgs_MemFunc [void* ( void* userdata, void* ptr, size_t size )]: memory interface function
</li><li>sgs_OutputFunc [void ( void* userdata, sgs_Context* C, const void* buf, sgs_SizeVal size )]: output function
</li><li>sgs_MsgFunc [void ( void* userdata, sgs_Context* C, int code, const char* text )]: messaging function
</li><li>sgs_HookFunc [void ( void*, sgs_Context*, int )]: debug hook function</li></ul></div>
<div class='item'><a name='Error-codes'></a><hr><h2>Error codes</h2><p>
These are the default meanings for error codes that are honored throughout the API.
</p><ul><li>Generated by the C API
<ul><li>SGS_SUCCESS: operation was successful
</li><li>SGS_ENOTFND: item was not found
</li><li>SGS_ECOMP: compile error
</li><li>SGS_ENOTOBJ: argument was not an object
</li><li>SGS_ENOTSUP: operation is not supported
</li><li>SGS_EINVAL: invalid value was passed
</li><li>SGS_EINPROC: process was interrupted</li></ul></li></ul><ul><li>Generated by SGScript VM
<ul><li>SGS_INFO: information about potential issues and state of the system
</li><li>SGS_WARNING: non-fatal issues
</li><li>SGS_ERROR: fatal issues
</li><li>any other integer may be defined and returned by other interfaces</li></ul></li></ul></div>
<div class='item'><a name='Variable-types'></a><hr><h2>Variable types</h2><p>
-- SGS_VT_[NULL|BOOL|INT|REAL|STRING|FUNC|CFUNC|OBJECT|PTR]
</p></div>
<div class='item'><a name='Constant-registration-types'></a><hr><h2>Constant registration types</h2><ul><li>struct sgs_RegFuncConst { char* name; sgs_CFunc value; }
</li><li>struct sgs_RegIntConst { char* name; sgs_Int value; }
</li><li>struct sgs_RegRealConst { char* name; sgs_Real value; }</li></ul></div>
<div class='item'><a name='Concepts-systems'></a><hr><h2>Concepts &amp; systems</h2></div>
<div class='item'><a name='Messaging-system'></a><hr><h2>Messaging system</h2><p>
Messages are combinations of importance code and a null-terminated string that holds the message itself. The messaging system&#39;s purpose generally is to notify about problems and allow handling them to some extent.
</p><p>
The C API has a function for sending messages - <a href="#sgs-Msg-function">sgs_Msg</a> - and two for dealing with the current callback - <a href="#sgs-SetMsgFunc-function">sgs_SetMsgFunc</a> / <a href="#sgs-GetMsgFunc-function">sgs_GetMsgFunc</a>.
</p><p>
The <a href="#sgs-Msg-function">sgs_Msg</a> function basically generates the full string from the format string and calls the callback that is currently set. Due to the data association and accessibility, various systems can be implemented on top of it:
</p><h5>Logging</h5><p>
All messages can simply be logged. For the most simple approach, the <a href="#sgs-StdOutputFunc-function">sgs_StdOutputFunc</a> callback can be used with any FILE* for the data pointer.
</p><h5>A limited amount of exception handling</h5><p>
This system can be used to break out of any point in SGS code up until the last C function. For this, <a href="#pcall-function">pcall</a> can be used together with a callback that calls <a href="#sys-abort-function">sys_abort</a> when necessary.
</p><h5>Debugging</h5><p>
On each warning or error, debugging code can be triggered. It can be an interactive console debugger (as implemented in ext/sgs_idbg), it could also be code that dumps the relevant state and sends it to the developer.
</p><h5>Hidden data collection</h5><p>
Similarly to exception handling, <a href="#pcall-function">pcall</a> can be used also for gathering messages otherwise skipped by the system. The sub-zero importance range is generally hidden - there&#39;s 2^31 values to use to mark special messages - however, <a href="#sys-replevel-function">sys_replevel</a> or <a href="#sgs-Cntl-function">sgs_Cntl</a> with SGS_CNTL_(SET_)MINLEV must be used to enable that range.
</p></div>
<div class='item'><a name='Iterator-system'></a><hr><h2>Iterator system</h2><p>
Iterators are objects that enable sequential, ordered traversal of object contents, allowing to read up to 2 variables at each position: the key and the value.
</p><p>
The C API has <a href="#Iterators">several functions</a> used to deal with iterators. There are essentially three kinds of functions: initialization ( <a href="#sgs-PushIterator-P-functions">sgs_PushIterator(P)</a>, <a href="#sgs-GetIterator-P-functions">sgs_GetIterator(P)</a> ), advancing ( <a href="#sgs-IterAdvance-P-functions">sgs_IterAdvance(P)</a> ) and data retrieval ( <a href="#sgs-IterPushData-P-functions">sgs_IterPushData(P)</a>, <a href="#sgs-IterGetData-P-functions">sgs_IterGetData(P)</a> ).
</p><p>
Iterator starts at the pre-first position (-1 in terms of indices), so nothing can be read initially, before the first advance. This allows to implement iterator handling with rather simple code:
</p><pre>initialize;
while( advance &gt; 0 )
{
    retrieve key and/or value;
    ..do something else..;
}
free;</pre><p>
A more real example follows:
</p><pre>// assuming iterable object is at the top of the stack
sgs_PushIterator( C, -1 );
while( sgs_IterAdvance( C, -1 ) &gt; 0 )
{
    sgs_StackIdx ssz = sgs_StackSize( C );
    
    sgs_IterPushData( C, -1, 1, 1 ); // push both key and value
    
    sgs_SetStackSize( C, ssz ); // restore stack to have iterator at -1 again
}
sgs_Pop( C, 1 ); // pop the iterator</pre><p>
Another example using pointers:
</p><pre>sgs_Variable iterator, iterable, key, value;
// .. assuming iterable is initalized here ..
sgs_GetIteratorP( C, &amp;iterable, &amp;iterator );
while( sgs_IterAdvanceP( C, &amp;iterator ) &gt; 0 )
{
    sgs_IterGetDataP( C, &amp;iterator, NULL, &amp;value );
    // .. use value ..
    sgs_Release( C, &amp;value );
    
    sgs_IterGetDataP( C, &amp;iterator, &amp;key, &amp;value );
    // .. use key and value ..
    sgs_Release( C, &amp;key );
    sgs_Release( C, &amp;value );
}
sgs_Release( C, &amp;iterator );
// .. release the iterable or not, depending on how it was initialized ..</pre></div>
<div class='item'><a name='Garbage-collection-system'></a><hr><h2>Garbage collection system</h2><p>
The garbage collector currently implemented is a basic stop-the-world mark-and-sweep algorithm that goes over all objects and recursively marks them as available.
</p><p>
The marking is done on the variable named <code>redblue</code>, which contains 0 or 1 and in all avaiable objects is synced with the same variable for the context. On each pass, the bit is flipped for all available objects, so all objects that didn&#39;t have the bit flipped can be safely removed.
</p><p>
The garbage collector is invoked with <a href="#sgs-GCExecute-function">sgs_GCExecute</a> in the C API and <a href="#gc-collect-function">gc_collect</a> in SGScript.
</p><p>
Sub-objects are marked as available in the GCMARK callback with <a href="#sgs-GCMark-Array-function">sgs_GCMark(Array)</a> / <a href="#sgs-ObjGCMark-function">sgs_ObjGCMark</a> functions.
</p></div>
<div class='item'><a name='Classes'></a><hr><h2>Classes</h2><p>
Classes are objects that enable operator/interface overloading and two-layer index retrieval.
</p><p>
Overloadable operators/interfaces:
</p><ul><li>basic math: +, - (both unary and binary), *, /, %
</li><li>comparison
</li><li>conversions to bool, int, real, string
</li><li>typeof string retrieval
</li><li>cloning</li></ul><p>
Two-layer index retrieval is simply trying to read the index from a different source if the first source fails to come up with something. In other languages, metatable and prototype is the name of a table that is the second source. This allows to avoid storing functions and other data that is equal to all instances of some object type.
</p></div>
<div class='item'><a name='Closures'></a><hr><h2>Closures</h2><p>
Closures are a combination of one callable and some variables. They are meant to simplify interfaces and code around places where it was important for functions to have access to call-invariant (same on every call) data.
</p><p>
Closures can be created from both SGScript and the C API, though both options have their limitations.
</p><ul><li>In SGScript, closures can be created by letting functions &quot;use&quot; a variable, e.g. by writing <code>function func( args ) use( closures ){ ..body.. }</code>
</li><li>In the C API, closures can be created with <a href="#sgs-MakeClosure">sgs_MakeClosure</a>, though this requires knowledge about the receiving function&#39;s ability to use them. This means that even though there are no variable type limits, it is much more practical to create closures from native functions (both plain and object interface functions) with the C API.</li></ul></div>
<div class='item'><a name='Functions'></a><hr><h2>Functions</h2></div>
<div class='item'><a name='Context-management'></a><hr><h2>Context management</h2><ul><li><a href="#sgs-CreateEngineExt-function">sgs_CreateEngine</a> - create scripting engine context
</li><li><a href="#sgs-CreateEngineExt-function">sgs_CreateEngineExt</a> - create scripting engine context and pass a custom memory function
</li><li><a href="#sgs-DestroyEngine-function">sgs_DestroyEngine</a> - validate memory statistics and destroy engine context
</li><li><a href="#sgs-DefaultMemFunc-function">sgs_DefaultMemFunc</a> - example memory management callback
</li><li><a href="#sgs-GetOutputFunc-function">sgs_GetOutputFunc</a> - return the current output callback and its user data pointer
</li><li><a href="#sgs-SetOutputFunc-function">sgs_SetOutputFunc</a> - set the output callback and its user data pointer
</li><li><a href="#sgs-GetMsgFunc-function">sgs_GetMsgFunc</a> - return the current messaging callback and its user data pointer
</li><li><a href="#sgs-SetMsgFunc-function">sgs_SetMsgFunc</a> - set the messaging callback and its user data pointer
</li><li><a href="#sgs-Cntl-function">sgs_Cntl</a> - set and/or retrieve various states in the system</li></ul></div>
<div class='item'><a name='Memory-management'></a><hr><h2>Memory management</h2><ul><li><a href="#sgs-DefaultMemFunc-function">sgs_DefaultMemFunc</a> - example memory management callback
</li><li><a href="#sgs-Memory-function">sgs_Memory</a> - allocate/reallocate/free memory
</li><li><a href="#Memory-allocation-macros-macros">sgs_Malloc</a> - allocate specified amount of memory
</li><li><a href="#Memory-allocation-macros-macros">sgs_Free</a> - free a previously allocated memory pointer
</li><li><a href="#Memory-allocation-macros-macros">sgs_Realloc</a> - allocate/reallocate/free memory (requires implicit sgs_Context* C)
</li><li><a href="#Memory-allocation-macros-macros">sgs_Alloc</a> - allocate object (requires implicit sgs_Context* C)
</li><li><a href="#Memory-allocation-macros-macros">sgs_Alloc_n</a> - allocate an array of objects (requires implicit sgs_Context* C)
</li><li><a href="#Memory-allocation-macros-macros">sgs_Alloc_a</a> - allocate object + additional memory (requires implicit sgs_Context* C)
</li><li><a href="#Memory-allocation-macros-macros">sgs_Dealloc</a> - free a previously allocated memory pointer (requires implicit sgs_Context* C)</li></ul></div>
<div class='item'><a name='Input-output'></a><hr><h2>Input / output</h2><ul><li><a href="#sgs-GetOutputFunc-function">sgs_GetOutputFunc</a> - return the current output callback and its user data pointer
</li><li><a href="#sgs-SetOutputFunc-function">sgs_SetOutputFunc</a> - set the output callback and its user data pointer
</li><li><a href="#sgs-Write-function">sgs_Write</a> - pass a character buffer to the output callback
</li><li><a href="#sgs-Writef-function">sgs_Writef</a> - pass a formatted string to the output callback
</li><li><a href="#sgs-WriteStr-function-alias">sgs_WriteStr</a> - pass a null-terminated string to the output callback
</li><li><a href="#sgs-GetMsgFunc-function">sgs_GetMsgFunc</a> - return the current messaging callback and its user data pointer
</li><li><a href="#sgs-SetMsgFunc-function">sgs_SetMsgFunc</a> - set the messaging callback and its user data pointer
</li><li><a href="#sgs-Msg-function">sgs_Msg</a> - invoke the messaging system
</li><li><a href="#sgs-WriteErrorInfo-function">sgs_WriteErrorInfo</a> - write message info to output callback
</li><li><a href="#sgs-PushErrorInfo-function">sgs_PushErrorInfo</a> - push message info to stack
</li><li><a href="#sgs-HasFuncName-function">sgs_HasFuncName</a> - check if current C function has a name set
</li><li><a href="#sgs-FuncName-function">sgs_FuncName</a> - set current C function name
</li><li><a href="#SGSFN-function-alias">SGSFN</a> - set current C function name
</li><li><a href="#SGSBASEFN-function-alias">SGSBASEFN</a> - set current C function name if it&#39;s not already set
</li><li><a href="#sgs-Errno-function-alias">sgs_Errno</a> - copy errno to internal errno if 2nd argument is false, otherwise clear it
</li><li><a href="#sgs-SetErrno-function-alias">sgs_SetErrno</a> - set the internal errno value
</li><li><a href="#sgs-GetLastErrno-function-alias">sgs_GetLastErrno</a> - return the currently set internal errno value
</li><li><a href="#sgs-StdOutputFunc-function">sgs_StdOutputFunc</a> - example output callback
</li><li><a href="#sgs-StdMsgFunc-NoAbort-functions">sgs_StdMsgFunc_NoAbort</a> - example messaging callback that does not abort on errors
</li><li><a href="#sgs-StdMsgFunc-NoAbort-functions">sgs_StdMsgFunc</a> - example messaging callback
</li><li><a href="#sgs-Cntl-function">sgs_Cntl</a> - set and/or retrieve various states in the system
</li><li><a href="#sgs-ArgErrorExt-function">sgs_ArgErrorExt</a> - emit an argument type mismatch error with additional formatting options
</li><li><a href="#sgs-ArgError-function">sgs_ArgError</a> - emit an argument type mismatch error
</li><li><a href="#sgs-ArgError-function">sgs_FuncArgError</a> - emit an argument type mismatch error (alias for states where <code>this</code> variable is hidden)
</li><li><a href="#sgs-ArgError-function">sgs_MethodArgError</a> - emit an argument type mismatch error (alias for states where <code>this</code> variable is NOT hidden)</li></ul></div>
<div class='item'><a name='Code-handling'></a><hr><h2>Code handling</h2><ul><li><a href="#sgs-ExecBuffer-function-alias">sgs_ExecBuffer</a> - execute a character buffer
</li><li><a href="#sgs-EvalBuffer-function">sgs_EvalBuffer</a> - execute a character buffer, keep returned variables on stack
</li><li><a href="#sgs-ExecFile-function-alias">sgs_ExecFile</a> - execute a file
</li><li><a href="#sgs-EvalFile-function">sgs_EvalFile</a> - execute a file, keep returned variables on stack
</li><li><a href="#sgs-ExecString-function-alias">sgs_ExecString</a> - execute a null-terminated string
</li><li><a href="#sgs-EvalString-function-alias">sgs_EvalString</a> - execute a null-terminated string, keep returned variables on stack
</li><li><a href="#sgs-IncludeExt-function">sgs_Include</a> - include an item from the file system
</li><li><a href="#sgs-IncludeExt-function">sgs_IncludeExt</a> - include an item from the file system, optionally specifying a search path
</li><li><a href="#sgs-Compile-function">sgs_Compile</a> - compile character buffer to bytecode buffer
</li><li><a href="#sgs-DumpCompiled-function">sgs_DumpCompiled</a> - dump bytecode/constant info from a compiled bytecode buffer</li></ul></div>
<div class='item'><a name='Introspection'></a><hr><h2>Introspection</h2><ul><li><a href="#sgs-Stat-function">sgs_Stat</a> - retrieve or dump various parts of VM state
</li><li><a href="#sgs-StackFrameInfo-function">sgs_StackFrameInfo</a> - retrieve preprocessed info from stack frame
</li><li><a href="#sgs-GetFramePtr-function">sgs_GetFramePtr</a> - return a stack frame pointer</li></ul></div>
<div class='item'><a name='Execution-control'></a><hr><h2>Execution control</h2><ul><li><a href="#sgs-FCall-P-functions">sgs_FCallP</a> - call variable as function
</li><li><a href="#sgs-This-Call-P-function-aliases">sgs_CallP</a> - call variable as function without <code>this</code> passed to it
</li><li><a href="#sgs-This-Call-P-function-aliases">sgs_ThisCallP</a> - call variable as function function with <code>this</code> passed to it
</li><li><a href="#sgs-FCall-P-functions">sgs_FCall</a> - call the topmost stack item as function
</li><li><a href="#sgs-This-Call-P-function-aliases">sgs_Call</a> - call the topmost stack item as function without <code>this</code> passed to it
</li><li><a href="#sgs-This-Call-P-function-aliases">sgs_ThisCall</a> - call the topmost stack item as function with <code>this</code> passed to it
</li><li><a href="#sgs-GlobalCall-function">sgs_GlobalCall</a> - call a global function
</li><li><a href="#sgs-Abort-function">sgs_Abort</a> - abort the execution of the previous SGS functions up to the last C function before them
</li><li><a href="#sgs-Cntl-function">sgs_Cntl</a> - set and/or retrieve various states in the system</li></ul></div>
<div class='item'><a name='Binding-helpers'></a><hr><h2>Binding helpers</h2><ul><li><a href="#sgs-LoadLib-functions">sgs_LoadLib_Fmt</a> - load the formatting library
</li><li><a href="#sgs-LoadLib-functions">sgs_LoadLib_IO</a> - load the input/output library
</li><li><a href="#sgs-LoadLib-functions">sgs_LoadLib_Math</a> - load the math library
</li><li><a href="#sgs-LoadLib-functions">sgs_LoadLib_OS</a> - load the operating system library
</li><li><a href="#sgs-LoadLib-functions">sgs_LoadLib_RE</a> - load the regular expression library
</li><li><a href="#sgs-LoadLib-functions">sgs_LoadLib_String</a> - load the string library
</li><li><a href="#sgs-Reg-Consts-function">sgs_RegFuncConsts</a> - register a list of global C function constants
</li><li><a href="#sgs-Reg-Consts-function">sgs_RegIntConsts</a> - register a list of global integer constants
</li><li><a href="#sgs-Reg-Consts-function">sgs_RegRealConsts</a> - register a list of global real value constants</li></ul></div>
<div class='item'><a name='Object-type-storage'></a><hr><h2>Object type storage</h2><ul><li><a href="#sgs-RegisterType-function">sgs_RegisterType</a> - register an object interface pointer by name
</li><li><a href="#sgs-UnregisterType-function">sgs_UnregisterType</a> - unregister an object interface pointer by name
</li><li><a href="#sgs-FindType-function">sgs_FindType</a> - find a registered object interface pointer by name
</li><li><a href="#sgs-IsType-P-function-aliases">sgs_IsType</a> - check if variable on stack is of specified registered type</li></ul></div>
<div class='item'><a name='Variable-initialization'></a><hr><h2>Variable initialization</h2><ul><li><a href="#sgs-Init-functions">sgs_InitNull</a> - initialize variable to a null variable
</li><li><a href="#sgs-Init-functions">sgs_InitBool</a> - initialize variable to a boolean variable
</li><li><a href="#sgs-Init-functions">sgs_InitInt</a> - initialize variable to an integer
</li><li><a href="#sgs-Init-functions">sgs_InitReal</a> - initialize variable to a real value
</li><li><a href="#sgs-Init-functions">sgs_InitStringBuf</a> - initialize variable to a new char buffer
</li><li><a href="#sgs-Init-functions">sgs_InitString</a> - initialize variable to a new string
</li><li><a href="#sgs-Init-functions">sgs_InitCFunction</a> - initialize variable to C function
</li><li><a href="#sgs-Init-functions">sgs_InitObject</a> - initialize variable to a new object
</li><li><a href="#sgs-Init-functions">sgs_InitObjectIPA</a> - initialize variable to a new object with additional memory allocated in-place for the internal data pointer
</li><li><a href="#sgs-Init-functions">sgs_InitPtr</a> - initialize variable to a pointer variable
</li><li><a href="#sgs-Init-functions">sgs_InitObjectPtr</a> - initialize variable to an existing object and acquire it
</li><li><a href="#sgs-InitArray-function">sgs_InitArray</a> - initialize variable to a new array, optionally using the specified number of pushed items on stack
</li><li><a href="#sgs-InitDict-function">sgs_InitDict</a> - initialize variable to a new dict, optionally using the specified number of pushed items on stack
</li><li><a href="#sgs-InitMap-function">sgs_InitMap</a> - initialize variable to a new map, optionally using the specified number of pushed items on stack</li></ul></div>
<div class='item'><a name='Stack-primary-interface'></a><hr><h2>Stack primary interface</h2><ul><li><a href="#sgs-Push-functions">sgs_PushNull</a> - push a null variable
</li><li><a href="#sgs-Push-functions">sgs_PushBool</a> - push a boolean variable
</li><li><a href="#sgs-Push-functions">sgs_PushInt</a> - push an integer
</li><li><a href="#sgs-Push-functions">sgs_PushReal</a> - push a real value
</li><li><a href="#sgs-Push-functions">sgs_PushStringBuf</a> - push a new string from char buffer
</li><li><a href="#sgs-Push-functions">sgs_PushString</a> - push a new string
</li><li><a href="#sgs-Push-functions">sgs_PushCFunction</a> - push a C function
</li><li><a href="#sgs-Push-functions">sgs_PushObject</a> - push a new object
</li><li><a href="#sgs-Push-functions">sgs_PushObjectIPA</a> - push a new object with additional memory allocated in-place for the internal data pointer
</li><li><a href="#sgs-Push-functions">sgs_PushPtr</a> - push a pointer
</li><li><a href="#sgs-Push-functions">sgs_PushObjectPtr</a> - push an object pointer
</li><li><a href="#sgs-PushArray-function">sgs_PushArray</a> - push a new array variable, optionally using the specified number of pushed items on stack
</li><li><a href="#sgs-PushDict-function">sgs_PushDict</a> - push a new dict variable, optionally using the specified number of pushed items on stack
</li><li><a href="#sgs-PushMap-function">sgs_PushMap</a> - push a new map variable, optionally using the specified number of pushed items on stack
</li><li><a href="#sgs-Push-functions">sgs_PushVariable</a> - push the specified variable
</li><li><a href="#sgs-StoreVariable-function">sgs_StoreVariable</a> - retrieve, acquire and pop the topmost variable on stack
</li><li><a href="#sgs-PushItem-function">sgs_PushItem</a> - retrieve and push the specified variable on stack
</li><li><a href="#sgs-StoreItem-function">sgs_StoreItem</a> - store and pop the topmost variable to the specified position after removal in stack
</li><li><a href="#sgs-InsertVariable-function">sgs_InsertVariable</a> - insert a variable on stack in the specified position
</li><li><a href="#sgs-Pop-function">sgs_Pop</a> - pop the specified number of items from stack
</li><li><a href="#sgs-PopSkip-function">sgs_PopSkip</a> - pop the specified number of items from stack, skipping some topmost items
</li><li><a href="#sgs-StackSize-function">sgs_StackSize</a> - return the size of the current stack frame
</li><li><a href="#sgs-SetStackSize-function">sgs_SetStackSize</a> - resize the current stack frame
</li><li><a href="#sgs-AbsIndex-function">sgs_AbsIndex</a> - convert stack index to positive if possible (if it&#39;s &lt;0 or &gt;=StackSize, then it&#39;s invalid)
</li><li><a href="#sgs-IsValidIndex-function">sgs_IsValidIndex</a> - check if specified stack index is valid
</li><li><a href="#sgs-PeekStackItem-function">sgs_PeekStackItem</a> - retrieve without acquisition the specified variable on stack
</li><li><a href="#sgs-GetStackItem-function">sgs_GetStackItem</a> - retrieve and acquire the specified variable on stack
</li><li><a href="#sgs-SetStackItem-function">sgs_SetStackItem</a> - assign variable to the specified variable on stack
</li><li><a href="#sgs-ItemType-function">sgs_ItemType</a> - return the variable type of the specified variable on stack
</li><li><a href="#sgs-LoadArgsExt-VA-function">sgs_LoadArgsExtVA</a> - parse the stack as an argument list with additional options (for custom wrapper functions)
</li><li><a href="#sgs-LoadArgsExt-VA-function">sgs_LoadArgsExt</a> - parse the stack as an argument list with additional options
</li><li><a href="#sgs-LoadArgsExt-VA-function">sgs_LoadArgs</a> - parse the stack as an argument list
</li><li><a href="#sgs-ParseMethod-function">sgs_ParseMethod</a> - the <code>this</code> object variable handling function, using the macro is preferred to this
</li><li><a href="#SGS-PARSE-METHOD-function-alias">SGS_PARSE_METHOD</a> - automagically handle a <code>this</code> object variable regardless of the way its passed
</li><li><a href="#sgs-Method-function">sgs_Method</a> - unhide the first variable on stack if there is a hidden <code>this</code> variable
</li><li><a href="#sgs-Force-HideThis-functions">sgs_HideThis</a> - hide the first variable on stack if the stack already doesn&#39;t contain a hidden <code>this</code> variable
</li><li><a href="#sgs-Force-HideThis-functions">sgs_ForceHideThis</a> - hide the first variable even if it wasn&#39;t previously hidden before unhiding</li></ul></div>
<div class='item'><a name='Sub-item-usage'></a><hr><h2>Sub-item usage</h2><ul><li><a href="#sgs-GetIndex-functions">sgs_GetIndex***</a> - retrieve a sub-item
</li><li><a href="#sgs-SetIndex-functions">sgs_SetIndex***</a> - set a sub-item
</li><li><a href="#sgs-PushIndex-functions">sgs_PushIndex**</a> - retrieve and push a sub-item
</li><li><a href="#sgs-StoreIndex-functions">sgs_StoreIndex**</a> - store and pop a sub-item
</li><li><a href="#sgs-GetGlobalPP-function">sgs_GetGlobalPP</a> - retrieve a global variable
</li><li><a href="#sgs-SetGlobalPP-function">sgs_SetGlobalPP</a> - set a global variable
</li><li><a href="#sgs-PushProperty-function">sgs_PushProperty</a> - retrieve and push the string property of a variable on stack
</li><li><a href="#sgs-StoreProperty-function">sgs_StoreProperty</a> - store and pop the topmost stack item to a string property of a variable on stack
</li><li><a href="#sgs-PushNumIndex-function">sgs_PushNumIndex</a> - retrieve and push the integer index of a variable on stack
</li><li><a href="#sgs-StoreNumIndex-function">sgs_StoreNumIndex</a> - store and pop the topmost stack item to an integer index of a variable on stack
</li><li><a href="#sgs-PushGlobal-function">sgs_PushGlobal</a> - retrieve and push the global variable, specified by a string
</li><li><a href="#sgs-StoreGlobal-function">sgs_StoreGlobal</a> - store and pop the topmost stack item as a global variable, specified by a string
</li><li><a href="#sgs-GetEnv-function">sgs_GetEnv</a> - retrieve the global environment hash table (dict)
</li><li><a href="#sgs-SetEnv-function">sgs_SetEnv</a> - set the variable as the global environment hash table (dict), if possible
</li><li><a href="#sgs-PushEnv-function">sgs_PushEnv</a> - push the global environment hash table (dict)
</li><li><a href="#sgs-StoreEnv-function">sgs_StoreEnv</a> - store and pop the topmost stack item as the global environment hash table (dict), if possible
</li><li><a href="#sgs-PushPath-function">sgs_PushPath</a> - retrieve and push a variable from a path of sub-items
</li><li><a href="#sgs-StorePath-function">sgs_StorePath</a> - store and pop the topmost stack item into a path of sub-items</li></ul></div>
<div class='item'><a name='Argument-handling'></a><hr><h2>Argument handling</h2><ul><li><a href="#sgs-ArgErrorExt-function">sgs_ArgErrorExt</a> - emit an argument type mismatch error with additional formatting options
</li><li><a href="#sgs-ArgError-function">sgs_ArgError</a> - emit an argument type mismatch error
</li><li><a href="#sgs-ArgError-function">sgs_FuncArgError</a> - emit an argument type mismatch error (alias for states where <code>this</code> variable is hidden)
</li><li><a href="#sgs-ArgError-function">sgs_MethodArgError</a> - emit an argument type mismatch error (alias for states where <code>this</code> variable is NOT hidden)
</li><li><a href="#sgs-LoadArgsExt-VA-function">sgs_LoadArgsExtVA</a> - parse the stack as an argument list with additional options (for custom wrapper functions)
</li><li><a href="#sgs-LoadArgsExt-VA-function">sgs_LoadArgsExt</a> - parse the stack as an argument list with additional options
</li><li><a href="#sgs-LoadArgsExt-VA-function">sgs_LoadArgs</a> - parse the stack as an argument list
</li><li><a href="#sgs-ParseMethod-function">sgs_ParseMethod</a> - the <code>this</code> object variable handling function, using the macro is preferred to this
</li><li><a href="#SGS-PARSE-METHOD-function-alias">SGS_PARSE_METHOD</a> - automagically handle a <code>this</code> object variable regardless of the way its passed
</li><li><a href="#sgs-Method-function">sgs_Method</a> - unhide the first variable on stack if there is a hidden <code>this</code> variable
</li><li><a href="#sgs-Force-HideThis-functions">sgs_HideThis</a> - hide the first variable on stack if the stack already doesn&#39;t contain a hidden <code>this</code> variable
</li><li><a href="#sgs-Force-HideThis-functions">sgs_ForceHideThis</a> - hide the first variable even if it wasn&#39;t previously hidden before unhiding</li></ul></div>
<div class='item'><a name='Virtual-machine-operations'></a><hr><h2>Virtual machine operations</h2><ul><li><a href="#sgs-Assign-function">sgs_Assign</a> - release the current variable and acquire-assign to it from the source
</li><li><a href="#sgs-ArithOp-function">sgs_ArithOp</a> - run an arithmetic operation (+,-,*,/,%) on two variables to generate a third one
</li><li><a href="#sgs-IncDec-function">sgs_IncDec</a> - increment or decrement the specified variable
</li><li><a href="#sgs-Compare-function">sgs_Compare</a> - check if both variables compare equal to each other
</li><li><a href="#sgs-EqualTypes-function">sgs_EqualTypes</a> - check if both variables have the same type and object interface (if both are objects)
</li><li><a href="#sgs-TypeOf-function">sgs_TypeOf</a> - convert the topmost variable on stack to a type name string
</li><li><a href="#sgs-DumpVar-function">sgs_DumpVar</a> - convert the topmost variable on stack to a string that contains detailed info about its contents
</li><li><a href="#sgs-GCExecute-function">sgs_GCExecute</a> - run the garbage collection system to remove all unreachable objects
</li><li><a href="#sgs-StringConcat-function">sgs_StringConcat</a> - concatenate two or more variables into a string
</li><li><a href="#sgs-CloneItem-function">sgs_CloneItem</a> - clone the topmost stack item if it&#39;s mutable
</li><li><a href="#sgs-ObjectAction-function">sgs_ObjectAction</a> - execute actions on object variable on stack
</li><li><a href="#sgs-Serialize-function">sgs_Serialize</a> - serialize the topmost variable on stack by converting it recursively to an instruction stream
</li><li><a href="#sgs-SerializeObject-function">sgs_SerializeObject</a> - emit a call to the specified function to the serialized stream
</li><li><a href="#sgs-Unserialize-function">sgs_Unserialize</a> - unserialize the topmost variable on stack by running its serialized instruction stream</li></ul></div>
<div class='item'><a name='String-helpers'></a><hr><h2>String helpers</h2><ul><li><a href="#sgs-PadString-function">sgs_PadString</a> - return a string with two spaces appended to all newline characters
</li><li><a href="#sgs-ToPrintSafeString-function">sgs_ToPrintSafeString</a> - return a string with all non-printable (except space), non-ASCII characters converted to a character hex code
</li><li><a href="#sgs-StringConcat-function">sgs_StringConcat</a> - concatenate two or more variables into a string</li></ul></div>
<div class='item'><a name='Closures'></a><hr><h2>Closures</h2><ul><li><a href="#sgs-ClPushNulls">sgs_ClPushNulls</a> - push a number of empty closures to the closure stack
</li><li><a href="#sgs-ClPushItem">sgs_ClPushItem</a> - push a variable on stack as a closure to the closure stack
</li><li><a href="#sgs-ClPop">sgs_ClPop</a> - pop a number of closures from the closure stack
</li><li><a href="#sgs-MakeClosure">sgs_MakeClosure</a> - make a callable closure object from the specified callable and number of closures on stack
</li><li><a href="#sgs-ClGetItem">sgs_ClGetItem</a> - retrieve the variable from a closure on stack
</li><li><a href="#sgs-ClSetItem">sgs_ClSetItem</a> - set the variable to a closure on stack</li></ul></div>
<div class='item'><a name='Data-retrieval-conversion'></a><hr><h2>Data retrieval &amp; conversion</h2><ul><li><a href="#sgs-Get-functions">sgs_GetBoolP</a> - return the boolean version of the variable
</li><li><a href="#sgs-Get-functions">sgs_GetIntP</a> - return the integer version of the variable
</li><li><a href="#sgs-Get-functions">sgs_GetRealP</a> - return the real value version of the variable
</li><li><a href="#sgs-Get-functions">sgs_GetPtrP</a> - return the pointer version of the variable
</li><li><a href="#sgs-To-functions">sgs_ToBoolP</a> - convert variable to a boolear value and return it
</li><li><a href="#sgs-To-functions">sgs_ToIntP</a> - convert variable to an integer and return it
</li><li><a href="#sgs-To-functions">sgs_ToRealP</a> - convert variable to a real value and return it
</li><li><a href="#sgs-To-functions">sgs_ToPtrP</a> - convert variable to a pointer and return it
</li><li><a href="#sgs-ToStringBuf-Fast-P-functions">sgs_ToStringBufP</a> - convert variable to a string, returning size
</li><li><a href="#sgs-ToString-Fast-P-function-aliases">sgs_ToStringP</a> - convert variable to a string
</li><li><a href="#sgs-ToStringBuf-Fast-P-functions">sgs_ToStringBufFastP</a> - convert variable to a string, preventing possible recursion and returning size
</li><li><a href="#sgs-ToString-Fast-P-function-aliases">sgs_ToStringFastP</a> - convert variable to a string, preventing possible recursion
</li><li><a href="#sgs-IsObject-P-functions">sgs_IsObjectP</a> - check if variable is an object and has the specified interface pointer
</li><li><a href="#sgs-IsType-P-function-aliases">sgs_IsTypeP</a> - check if variable is of specified registered type
</li><li><a href="#sgs-IsCallable-P-functions">sgs_IsCallableP</a> - check if variable is callable (SGS function, C function or object with CALL impl.)
</li><li><a href="#sgs-Parse-functions">sgs_ParseBoolP</a> - validate conversion, optionally return boolean value from variable, if possible
</li><li><a href="#sgs-Parse-functions">sgs_ParseIntP</a> - validate conversion, optionally return integer value from variable, if possible
</li><li><a href="#sgs-Parse-functions">sgs_ParseRealP</a> - validate conversion, optionally return real value from variable, if possible
</li><li><a href="#sgs-Parse-functions">sgs_ParseStringP</a> - validate conversion, optionally return string or buffer from variable, if possible
</li><li><a href="#sgs-Parse-functions">sgs_ParseObjectPtrP</a> - validate conversion, optionally return object pointer from variable, if possible
</li><li><a href="#sgs-Parse-functions">sgs_ParsePtrP</a> - validate conversion, optionally return pointer from variable, if possible
</li><li><a href="#sgs-ArraySize-P-functions">sgs_ArraySizeP</a> - retrieve size of array variable, if possible
</li><li><a href="#sgs-Get-functions">sgs_GetBool</a> - return the boolean version of the variable on stack
</li><li><a href="#sgs-Get-functions">sgs_GetInt</a> - return the integer version of the variable on stack
</li><li><a href="#sgs-Get-functions">sgs_GetReal</a> - return the real value version of the variable on stack
</li><li><a href="#sgs-Get-functions">sgs_GetPtr</a> - return the pointer version of the variable on stack
</li><li><a href="#sgs-To-functions">sgs_ToBool</a> - convert variable on stack to a boolear value and return it
</li><li><a href="#sgs-To-functions">sgs_ToInt</a> - convert variable on stack to an integer and return it
</li><li><a href="#sgs-To-functions">sgs_ToReal</a> - convert variable on stack to a real value and return it
</li><li><a href="#sgs-To-functions">sgs_ToPtr</a> - convert variable on stack to a pointer and return it
</li><li><a href="#sgs-ToStringBuf-Fast-P-functions">sgs_ToStringBuf</a> - convert variable on stack to a string, returning size
</li><li><a href="#sgs-ToString-Fast-P-function-aliases">sgs_ToString</a> - convert variable on stack to a string
</li><li><a href="#sgs-ToStringBuf-Fast-P-functions">sgs_ToStringBufFast</a> - convert variable on stack to a string, preventing possible recursion and returning size
</li><li><a href="#sgs-ToString-Fast-P-function-aliases">sgs_ToStringFast</a> - convert variable on stack to a string, preventing possible recursion
</li><li><a href="#sgs-IsObject-P-functions">sgs_IsObject</a> - check if variable on stack is an object and has the specified interface pointer
</li><li><a href="#sgs-IsType-P-function-aliases">sgs_IsType</a> - check if variable on stack is of specified registered type
</li><li><a href="#sgs-IsCallable-P-functions">sgs_IsCallable</a> - check if variable on stack is callable (SGS function, C function or object with CALL impl.)
</li><li><a href="#sgs-Parse-functions">sgs_ParseBool</a> - validate conversion, optionally return boolean value from variable on stack, if possible
</li><li><a href="#sgs-Parse-functions">sgs_ParseInt</a> - validate conversion, optionally return integer value from variable on stack, if possible
</li><li><a href="#sgs-Parse-functions">sgs_ParseReal</a> - validate conversion, optionally return real value from variable on stack, if possible
</li><li><a href="#sgs-Parse-functions">sgs_ParseString</a> - validate conversion, optionally return string or buffer from variable on stack, if possible
</li><li><a href="#sgs-Parse-functions">sgs_ParseObjectPtr</a> - validate conversion, optionally return object pointer from variable on stack, if possible
</li><li><a href="#sgs-Parse-functions">sgs_ParsePtr</a> - validate conversion, optionally return pointer from variable on stack, if possible
</li><li><a href="#sgs-ArraySize-P-functions">sgs_ArraySize</a> - retrieve size of array variable on stack, if possible
</li><li><a href="#sgs-GlobalBool">sgs_GlobalBool</a> - retrieve global by name as bool
</li><li><a href="#sgs-GlobalInt">sgs_GlobalInt</a> - retrieve global by name as integer
</li><li><a href="#sgs-GlobalReal">sgs_GlobalReal</a> - retrieve global by name as real
</li><li><a href="#sgs-GlobalStringBuf">sgs_GlobalStringBuf</a> - retrieve global by name as string buffer
</li><li><a href="#sgs-GlobalString">sgs_GlobalString</a> - retrieve global by name as string
</li><li><a href="#sgs-GetStringPtr-P-functions">sgs_GetStringPtrP</a> - get string pointer from variable pointer
</li><li><a href="#sgs-GetStringSize-P-functions">sgs_GetStringSizeP</a> - get string size from variable pointer
</li><li><a href="#sgs-GetObjectStruct-P-functions">sgs_GetObjectStructP</a> - get object pointer from variable pointer
</li><li><a href="#sgs-GetObjectData-P-functions">sgs_GetObjectDataP</a> - get data pointer of object variable pointer
</li><li><a href="#sgs-GetObjectIface-P-functions">sgs_GetObjectIfaceP</a> - get interface pointer of object variable pointer
</li><li><a href="#sgs-SetObjectData-P-functions">sgs_SetObjectDataP</a> - set data pointer of object variable pointer
</li><li><a href="#sgs-SetObjectIface-P-functions">sgs_SetObjectIfaceP</a> - set interface pointer of object variable pointer
</li><li><a href="#sgs-GetStringPtr-P-functions">sgs_GetStringPtr</a> - get string pointer from variable on stack
</li><li><a href="#sgs-GetStringSize-P-functions">sgs_GetStringSize</a> - get string size from variable on stack
</li><li><a href="#sgs-GetObjectStruct-P-functions">sgs_GetObjectStruct</a> - get object pointer from variable on stack
</li><li><a href="#sgs-GetObjectData-P-functions">sgs_GetObjectData</a> - get data pointer of object variable on stack
</li><li><a href="#sgs-GetObjectIface-P-functions">sgs_GetObjectIface</a> - get interface pointer of object variable on stack
</li><li><a href="#sgs-SetObjectData-P-functions">sgs_SetObjectData</a> - set data pointer of object variable on stack
</li><li><a href="#sgs-SetObjectIface-P-functions">sgs_SetObjectIface</a> - set interface pointer of object variable on stack</li></ul></div>
<div class='item'><a name='Iterators'></a><hr><h2>Iterators</h2><ul><li>see <a href="#Iterator-system">Iterator system</a> for info on how these functions are to be used</li></ul><ul><li><a href="#sgs-PushIterator-P-functions">sgs_PushIteratorP</a> - create and push iterator from variable pointer
</li><li><a href="#sgs-GetIterator-P-functions">sgs_GetIteratorP</a> - create iterator from variable pointer
</li><li><a href="#sgs-IterAdvance-P-functions">sgs_IterAdvanceP</a> - advance iterator, specified by its variable pointer
</li><li><a href="#sgs-IterPushData-P-functions">sgs_IterPushDataP</a> - extract and push data of current iteration of the iterator, specified by its variable pointer
</li><li><a href="#sgs-IterGetData-P-functions">sgs_IterGetDataP</a> - extract data of current iteration of the iterator, specified by its variable pointer
</li><li><a href="#sgs-PushIterator-P-functions">sgs_PushIterator</a> - create and push iterator from variable on stack
</li><li><a href="#sgs-GetIterator-P-functions">sgs_GetIterator</a> - create iterator from variable on stack
</li><li><a href="#sgs-IterAdvance-P-functions">sgs_IterAdvance</a> - advance iterator, specified by its stack index
</li><li><a href="#sgs-IterPushData-P-functions">sgs_IterPushData</a> - extract and push data of current iteration of the iterator variable on stack
</li><li><a href="#sgs-IterGetData-P-functions">sgs_IterGetData</a> - extract data of current iteration of the iterator variable on stack</li></ul></div>
<div class='item'><a name='Variable-ownership'></a><hr><h2>Variable ownership</h2><ul><li><a href="#sgs-Acquire-Array-function">sgs_Acquire</a> - increment reference count of a variable if the type implements reference counting
</li><li><a href="#sgs-Acquire-Array-function">sgs_AcquireArray</a> - acquire an array of variables
</li><li><a href="#sgs-Release-Array-function">sgs_Release</a> - decrement reference count and possibly destroy a variable if the type implements ref.counting
</li><li><a href="#sgs-Release-Array-function">sgs_ReleaseArray</a> - release an array of variables
</li><li><a href="#sgs-GCMark-Array-function">sgs_GCMark</a> - mark a variable as available to prevent GC from removing it
</li><li><a href="#sgs-GCMark-Array-function">sgs_GCMarkArray</a> - mark an array of variables as available
</li><li><a href="#sgs-ObjAcquire-function">sgs_ObjAcquire</a> - acquire an object variable by its sgs_VarObj pointer
</li><li><a href="#sgs-ObjRelease-function">sgs_ObjRelease</a> - release an object variable by its sgs_VarObj pointer
</li><li><a href="#sgs-ObjGCMark-function">sgs_ObjGCMark</a> - mark an object variable by its sgs_VarObj pointer
</li><li><a href="#sgs-ObjCallDtor-function">sgs_ObjCallDtor</a> - call the destruction function of an object variable if it&#39;s defined</li></ul></div>
<div class='item'><a name='String32-optimization-interface'></a><hr><h2>String32 optimization interface</h2><ul><li><a href="#sgs-PushStringBuf32-function">sgs_PushStringBuf32</a> - initialize and push string32 object on stack
</li><li><a href="#sgs-PushString32-function">sgs_PushString32</a> - initialize and push string32 object on stack
</li><li><a href="#sgs-CheckString32-function">sgs_CheckString32</a> - trigger a breakpoint if string32 object is not freed
</li><li><a href="#sgs-IsFreedString32-function">sgs_IsFreedString32</a> - check if string32 object is freed</li></ul></div>
<div class='item'><a name='Utility-functions'></a><hr><h2>Utility functions</h2><ul><li><a href="#sgs-CodeString-function">sgs_CodeString</a> - retrieve a name string for the specified constant
</li><li><a href="#sgs-IsNumericString-function">sgs_IsNumericString</a> - check if string is going to be parsed as a number by the internal parser</li></ul></div>
<div class='item'><a name='ALL-functions-A-Z'></a><hr><h2>ALL functions (A-Z)</h2><ul><li><a href="#SGSBASEFN-function-alias">SGSBASEFN [function alias]</a>
</li><li><a href="#SGSFN-function-alias">SGSFN [function alias]</a>
</li><li><a href="#SGS-PARSE-METHOD-function-alias">SGS_PARSE_METHOD [function alias]</a>
</li><li><a href="#sgs-Force-HideThis-functions">sgs_(Force)HideThis [functions]</a>
</li><li><a href="#sgs-This-Call-P-function-aliases">sgs_(This)Call(P) [function aliases]</a>
</li><li><a href="#sgs-ArgError-function-aliases">sgs_***ArgError [function aliases]</a>
</li><li><a href="#sgs-Abort-function">sgs_Abort [function]</a>
</li><li><a href="#sgs-AbsIndex-function">sgs_AbsIndex [function]</a>
</li><li><a href="#sgs-Acquire-Array-function">sgs_Acquire(Array) [function]</a>
</li><li><a href="#sgs-ArgError-function">sgs_ArgError [function]</a>
</li><li><a href="#sgs-ArgErrorExt-function">sgs_ArgErrorExt [function]</a>
</li><li><a href="#sgs-ArithOp-function">sgs_ArithOp [function]</a>
</li><li><a href="#sgs-ArraySize-P-functions">sgs_ArraySize(P) [functions]</a>
</li><li><a href="#sgs-Assign-function">sgs_Assign [function]</a>
</li><li><a href="#sgs-CheckString32-function">sgs_CheckString32 [function]</a>
</li><li><a href="#sgs-CloneItem-function">sgs_CloneItem [function]</a>
</li><li><a href="#sgs-Cntl-function">sgs_Cntl [function]</a>
</li><li><a href="#sgs-CodeString-function">sgs_CodeString [function]</a>
</li><li><a href="#sgs-Compare-function">sgs_Compare [function]</a>
</li><li><a href="#sgs-Compile-function">sgs_Compile [function]</a>
</li><li><a href="#sgs-CreateEngine-function-alias">sgs_CreateEngine [function alias]</a>
</li><li><a href="#sgs-CreateEngineExt-function">sgs_CreateEngineExt [function]</a>
</li><li><a href="#sgs-DefaultMemFunc-function">sgs_DefaultMemFunc [function]</a>
</li><li><a href="#sgs-DestroyEngine-function">sgs_DestroyEngine [function]</a>
</li><li><a href="#sgs-DumpCompiled-function">sgs_DumpCompiled [function]</a>
</li><li><a href="#sgs-DumpVar-function">sgs_DumpVar [function]</a>
</li><li><a href="#sgs-EqualTypes-function">sgs_EqualTypes [function]</a>
</li><li><a href="#sgs-Errno-function-alias">sgs_Errno [function alias]</a>
</li><li><a href="#sgs-EvalBuffer-function">sgs_EvalBuffer [function]</a>
</li><li><a href="#sgs-EvalFile-function">sgs_EvalFile [function]</a>
</li><li><a href="#sgs-EvalString-function-alias">sgs_EvalString [function alias]</a>
</li><li><a href="#sgs-ExecBuffer-function-alias">sgs_ExecBuffer [function alias]</a>
</li><li><a href="#sgs-ExecFile-function-alias">sgs_ExecFile [function alias]</a>
</li><li><a href="#sgs-ExecString-function-alias">sgs_ExecString [function alias]</a>
</li><li><a href="#sgs-FCall-P-functions">sgs_FCall(P) [functions]</a>
</li><li><a href="#sgs-FindType-function">sgs_FindType [function]</a>
</li><li><a href="#sgs-FuncName-function">sgs_FuncName [function]</a>
</li><li><a href="#sgs-GCExecute-function">sgs_GCExecute [function]</a>
</li><li><a href="#sgs-GCMark-Array-function">sgs_GCMark(Array) [function]</a>
</li><li><a href="#sgs-Get-functions">sgs_Get*** [functions]</a>
</li><li><a href="#sgs-GetEnv-function">sgs_GetEnv [function]</a>
</li><li><a href="#sgs-GetFramePtr-function">sgs_GetFramePtr [function]</a>
</li><li><a href="#sgs-GetGlobalPP-function">sgs_GetGlobalPP [function]</a>
</li><li><a href="#sgs-GetHookFunc-function">sgs_GetHookFunc [function]</a>
</li><li><a href="#sgs-GetIndex-functions">sgs_GetIndex*** [functions]</a>
</li><li><a href="#sgs-GetIterator-P-functions">sgs_GetIterator(P) [functions]</a>
</li><li><a href="#sgs-GetLastErrno-function-alias">sgs_GetLastErrno [function alias]</a>
</li><li><a href="#sgs-GetMsgFunc-function">sgs_GetMsgFunc [function]</a>
</li><li><a href="#sgs-GetObjectData-P-functions">sgs_GetObjectData(P) [functions]</a>
</li><li><a href="#sgs-GetObjectIface-P-functions">sgs_GetObjectIface(P) [functions]</a>
</li><li><a href="#sgs-GetObjectStruct-P-functions">sgs_GetObjectStruct(P) [functions]</a>
</li><li><a href="#sgs-GetOutputFunc-function">sgs_GetOutputFunc [function]</a>
</li><li><a href="#sgs-GetStackItem-function">sgs_GetStackItem [function]</a>
</li><li><a href="#sgs-GetStringPtr-P-functions">sgs_GetStringPtr(P) [functions]</a>
</li><li><a href="#sgs-GetStringSize-P-functions">sgs_GetStringSize(P) [functions]</a>
</li><li><a href="#sgs-GlobalCall-function">sgs_GlobalCall [function]</a>
</li><li><a href="#sgs-HasFuncName-function">sgs_HasFuncName [function]</a>
</li><li><a href="#sgs-IncDec-function">sgs_IncDec [function]</a>
</li><li><a href="#sgs-Include-function-alias">sgs_Include [function alias]</a>
</li><li><a href="#sgs-IncludeExt-function">sgs_IncludeExt [function]</a>
</li><li><a href="#sgs-Init-functions">sgs_Init*** [functions]</a>
</li><li><a href="#sgs-InitArray-function">sgs_InitArray [function]</a>
</li><li><a href="#sgs-InitDict-function">sgs_InitDict [function]</a>
</li><li><a href="#sgs-InitMap-function">sgs_InitMap [function]</a>
</li><li><a href="#sgs-InsertVariable-function">sgs_InsertVariable [function]</a>
</li><li><a href="#sgs-IsCallable-P-functions">sgs_IsCallable(P) [functions]</a>
</li><li><a href="#sgs-IsFreedString32-function">sgs_IsFreedString32 [function]</a>
</li><li><a href="#sgs-IsNumericString-function">sgs_IsNumericString [function]</a>
</li><li><a href="#sgs-IsObject-P-functions">sgs_IsObject(P) [functions]</a>
</li><li><a href="#sgs-IsType-P-function-aliases">sgs_IsType(P) [function aliases]</a>
</li><li><a href="#sgs-IsValidIndex-function">sgs_IsValidIndex [function]</a>
</li><li><a href="#sgs-ItemType-function">sgs_ItemType [function]</a>
</li><li><a href="#sgs-IterAdvance-P-functions">sgs_IterAdvance(P) [functions]</a>
</li><li><a href="#sgs-IterGetData-P-functions">sgs_IterGetData(P) [functions]</a>
</li><li><a href="#sgs-IterPushData-P-functions">sgs_IterPushData(P) [functions]</a>
</li><li><a href="#sgs-LoadArgs-function-alias">sgs_LoadArgs [function alias]</a>
</li><li><a href="#sgs-LoadArgsExt-VA-function">sgs_LoadArgsExt(VA) [function]</a>
</li><li><a href="#sgs-LoadLib-functions">sgs_LoadLib_*** [functions]</a>
</li><li><a href="#sgs-Memory-function">sgs_Memory [function]</a>
</li><li><a href="#sgs-Method-function">sgs_Method [function]</a>
</li><li><a href="#sgs-Msg-function">sgs_Msg [function]</a>
</li><li><a href="#sgs-ObjAcquire-function">sgs_ObjAcquire [function]</a>
</li><li><a href="#sgs-ObjCallDtor-function">sgs_ObjCallDtor [function]</a>
</li><li><a href="#sgs-ObjGCMark-function">sgs_ObjGCMark [function]</a>
</li><li><a href="#sgs-ObjRelease-function">sgs_ObjRelease [function]</a>
</li><li><a href="#sgs-ObjectAction-function">sgs_ObjectAction [function]</a>
</li><li><a href="#sgs-PadString-function">sgs_PadString [function]</a>
</li><li><a href="#sgs-Parse-functions">sgs_Parse*** [functions]</a>
</li><li><a href="#sgs-ParseMethod-function">sgs_ParseMethod [function]</a>
</li><li><a href="#sgs-PeekStackItem-function">sgs_PeekStackItem [function]</a>
</li><li><a href="#sgs-Pop-function">sgs_Pop [function]</a>
</li><li><a href="#sgs-PopSkip-function">sgs_PopSkip [function]</a>
</li><li><a href="#sgs-Push-functions">sgs_Push*** [functions]</a>
</li><li><a href="#sgs-PushArray-function">sgs_PushArray [function]</a>
</li><li><a href="#sgs-PushDict-function">sgs_PushDict [function]</a>
</li><li><a href="#sgs-PushEnv-function">sgs_PushEnv [function]</a>
</li><li><a href="#sgs-PushErrorInfo-function">sgs_PushErrorInfo [function]</a>
</li><li><a href="#sgs-PushGlobal-function">sgs_PushGlobal [function]</a>
</li><li><a href="#sgs-PushIndex-functions">sgs_PushIndex** [functions]</a>
</li><li><a href="#sgs-PushItem-function">sgs_PushItem [function]</a>
</li><li><a href="#sgs-PushIterator-P-functions">sgs_PushIterator(P) [functions]</a>
</li><li><a href="#sgs-PushMap-function">sgs_PushMap [function]</a>
</li><li><a href="#sgs-PushNumIndex-function">sgs_PushNumIndex [function]</a>
</li><li><a href="#sgs-PushPath-function">sgs_PushPath [function]</a>
</li><li><a href="#sgs-PushProperty-function">sgs_PushProperty [function]</a>
</li><li><a href="#sgs-PushString32-function">sgs_PushString32 [function]</a>
</li><li><a href="#sgs-PushStringBuf32-function">sgs_PushStringBuf32 [function]</a>
</li><li><a href="#sgs-Reg-Consts-function">sgs_Reg***Consts [function]</a>
</li><li><a href="#sgs-RegisterType-function">sgs_RegisterType [function]</a>
</li><li><a href="#sgs-Release-Array-function">sgs_Release(Array) [function]</a>
</li><li><a href="#sgs-Serialize-function">sgs_Serialize [function]</a>
</li><li><a href="#sgs-SerializeObject-function">sgs_SerializeObject [function]</a>
</li><li><a href="#sgs-SetEnv-function">sgs_SetEnv [function]</a>
</li><li><a href="#sgs-SetErrno-function-alias">sgs_SetErrno [function alias]</a>
</li><li><a href="#sgs-SetGlobalPP-function">sgs_SetGlobalPP [function]</a>
</li><li><a href="#sgs-SetHookFunc-function">sgs_SetHookFunc [function]</a>
</li><li><a href="#sgs-SetIndex-functions">sgs_SetIndex*** [functions]</a>
</li><li><a href="#sgs-SetMsgFunc-function">sgs_SetMsgFunc [function]</a>
</li><li><a href="#sgs-SetObjectData-P-functions">sgs_SetObjectData(P) [functions]</a>
</li><li><a href="#sgs-SetObjectIface-P-functions">sgs_SetObjectIface(P) [functions]</a>
</li><li><a href="#sgs-SetOutputFunc-function">sgs_SetOutputFunc [function]</a>
</li><li><a href="#sgs-SetStackItem-function">sgs_SetStackItem [function]</a>
</li><li><a href="#sgs-SetStackSize-function">sgs_SetStackSize [function]</a>
</li><li><a href="#sgs-StackFrameInfo-function">sgs_StackFrameInfo [function]</a>
</li><li><a href="#sgs-StackSize-function">sgs_StackSize [function]</a>
</li><li><a href="#sgs-Stat-function">sgs_Stat [function]</a>
</li><li><a href="#sgs-StdMsgFunc-NoAbort-functions">sgs_StdMsgFunc(_NoAbort) [functions]</a>
</li><li><a href="#sgs-StdOutputFunc-function">sgs_StdOutputFunc [function]</a>
</li><li><a href="#sgs-StoreEnv-function">sgs_StoreEnv [function]</a>
</li><li><a href="#sgs-StoreGlobal-function">sgs_StoreGlobal [function]</a>
</li><li><a href="#sgs-StoreIndex-functions">sgs_StoreIndex** [functions]</a>
</li><li><a href="#sgs-StoreItem-function">sgs_StoreItem [function]</a>
</li><li><a href="#sgs-StoreNumIndex-function">sgs_StoreNumIndex [function]</a>
</li><li><a href="#sgs-StorePath-function">sgs_StorePath [function]</a>
</li><li><a href="#sgs-StoreProperty-function">sgs_StoreProperty [function]</a>
</li><li><a href="#sgs-StoreVariable-function">sgs_StoreVariable [function]</a>
</li><li><a href="#sgs-StringConcat-function">sgs_StringConcat [function]</a>
</li><li><a href="#sgs-To-functions">sgs_To*** [functions]</a>
</li><li><a href="#sgs-ToPrintSafeString-function">sgs_ToPrintSafeString [function]</a>
</li><li><a href="#sgs-ToString-Fast-P-function-aliases">sgs_ToString(Fast)(P) [function aliases]</a>
</li><li><a href="#sgs-ToStringBuf-Fast-P-functions">sgs_ToStringBuf(Fast)(P) [functions]</a>
</li><li><a href="#sgs-TypeOf-function">sgs_TypeOf [function]</a>
</li><li><a href="#sgs-UnregisterType-function">sgs_UnregisterType [function]</a>
</li><li><a href="#sgs-Unserialize-function">sgs_Unserialize [function]</a>
</li><li><a href="#sgs-Write-function">sgs_Write [function]</a>
</li><li><a href="#sgs-WriteErrorInfo-function">sgs_WriteErrorInfo [function]</a>
</li><li><a href="#sgs-WriteStr-function-alias">sgs_WriteStr [function alias]</a>
</li><li><a href="#sgs-Writef-function">sgs_Writef [function]</a></li></ul></div>
<div class='item'><a name='sgs-CreateEngine-function-alias'></a><hr><h2>sgs_CreateEngine [function alias]</h2><h3>sgs_Context* sgs_CreateEngine()</h3><h4>returns a new scripting engine context</h4><ul><li>alias to <code>sgs_CreateEngineExt( sgs_DefaultMemFunc, NULL )</code></li></ul></div>
<div class='item'><a name='sgs-CreateEngineExt-function'></a><hr><h2>sgs_CreateEngineExt [function]</h2><h3>sgs_Context* sgs_CreateEngineExt( sgs_MemFunc memfunc, void* mfuserdata )</h3><h4>returns a new scripting engine context, attached to the specified allocator</h4></div>
<div class='item'><a name='sgs-DestroyEngine-function'></a><hr><h2>sgs_DestroyEngine [function]</h2><h3>sgs_DestroyEngine( sgs_Context* C )</h3><h4>destroys the passed context and frees all memory associated to it</h4></div>
<div class='item'><a name='sgs-ExecString-function-alias'></a><hr><h2>sgs_ExecString [function alias]</h2><h3>SGSRESULT sgs_ExecString( sgs_Context* C, const char* str )</h3><h4>compiles and executes a string of text</h4><ul><li>leaves the stack the same as it was before the call
</li><li>alias to <code>sgs_ExecBuffer( C, str, SGS_STRINGLENGTHFUNC( str ) )</code>
</li><li>theoretically bytecode is supported but it will most probably be trimmed by the string length function, unless a different string termination mark is used, and a different string length function to detect it is set</li></ul><h4>error codes</h4><ul><li>SGS_ECOMP: compiler error
</li><li>SGS_EINVAL: passed data was not recognized</li></ul></div>
<div class='item'><a name='sgs-ExecBuffer-function-alias'></a><hr><h2>sgs_ExecBuffer [function alias]</h2><h3>SGSRESULT sgs_ExecBuffer( sgs_Context* C, const char* buf, sgs_SizeVal size )</h3><h4>compiles and executes a buffer of text or bytecode</h4><ul><li>leaves the stack the same as it was before the call
</li><li>alias to <code>sgs_EvalBuffer( C, buf, size, NULL )</code></li></ul><h4>error codes</h4><ul><li>SGS_ECOMP: compiler error
</li><li>SGS_EINVAL: passed data was not recognized</li></ul></div>
<div class='item'><a name='sgs-EvalString-function-alias'></a><hr><h2>sgs_EvalString [function alias]</h2><h3>SGSRESULT sgs_EvalString( sgs_Context* C, const char* str, int* rvc )</h3><h4>compiles and executes a string of text, optionally leaving the return values on stack and returning the number of values via <code>rvc</code></h4><ul><li>if <code>rvc</code> is not set (NULL), return values are removed - the stack is the same as it was before the call
</li><li>alias to sgs_EvalBuffer( C, str, SGS_STRINGLENGTHFUNC( str ), rvc )</li></ul><h4>error codes</h4><ul><li>SGS_ECOMP: compiler error
</li><li>SGS_EINVAL: passed data was not recognized</li></ul></div>
<div class='item'><a name='sgs-EvalBuffer-function'></a><hr><h2>sgs_EvalBuffer [function]</h2><h3>SGSRESULT sgs_EvalBuffer( sgs_Context* C, const char* buf, sgs_SizeVal size, int* rvc )</h3><h4>compiles and executes a buffer of text or bytecode, optionally leaving the return values on stack and returning the number of values via <code>rvc</code></h4><ul><li>if <code>rvc</code> is not set (NULL), return values are removed - the stack is the same as it was before the call</li></ul><h4>error codes</h4><ul><li>SGS_ECOMP: compiler error
</li><li>SGS_EINVAL: passed data was not recognized</li></ul></div>
<div class='item'><a name='sgs-ExecFile-function-alias'></a><hr><h2>sgs_ExecFile [function alias]</h2><h3>SGSRESULT sgs_ExecFile( sgs_Context* C, const char* filename )</h3><h4>compiles and executes a file containing script text or bytecode</h4><ul><li>leaves the stack the same as it was before the call
</li><li>alias to <code>sgs_EvalFile( C, filename, NULL )</code></li></ul><h4>error codes</h4><ul><li>SGS_ECOMP: compiler error
</li><li>SGS_EINVAL: passed data was not recognized</li></ul></div>
<div class='item'><a name='sgs-EvalFile-function'></a><hr><h2>sgs_EvalFile [function]</h2><h3>SGSRESULT sgs_EvalFile( sgs_Context* C, const char* filename, int* rvc )</h3><h4>compiles and executes a file containing script text or bytecode, optionally leaving the return values on stack and returning the number of values via <code>rvc</code></h4><ul><li>if <code>rvc</code> is not set (NULL), return values are removed - the stack is the same as it was before the call</li></ul><h4>error codes</h4><ul><li>SGS_ECOMP: compiler error
</li><li>SGS_EINVAL: passed data was not recognized</li></ul></div>
<div class='item'><a name='sgs-Include-function-alias'></a><hr><h2>sgs_Include [function alias]</h2><h3>SGSBOOL sgs_Include( sgs_Context* C, const char* name )</h3><h4>includes an item by the specified name, returning if completed successfully</h4><ul><li>a C version of the <code>include</code> SGS function
</li><li>alias to <code>sgs_IncludeExt( C, name, NULL )</code></li></ul></div>
<div class='item'><a name='sgs-IncludeExt-function'></a><hr><h2>sgs_IncludeExt [function]</h2><h3>SGSBOOL sgs_IncludeExt( sgs_Context* C, const char* name, const char* searchpath )</h3><h4>includes an item by the specified name, optionally looking in the places specified by the search path, returning if completed successfully</h4><ul><li>a C version of the <a href="#include-function">include</a> SGS function
</li><li><code>searchpath</code> overrides SGS_PATH for the time of execution</li></ul></div>
<div class='item'><a name='sgs-Compile-function'></a><hr><h2>sgs_Compile [function]</h2><h3>SGSRESULT sgs_Compile( sgs_Context* C, const char* buf, size_t size, char** outbuf, size_t* outsize )</h3><h4>compile a buffer of SGScript code, returning the compiled code buffer on success</h4><ul><li>a C version of <a href="#compile-sgs-function">compile_sgs</a> SGS function
</li><li><code>outbuf</code> must be freed after usage with one of the relevant memory handling functions
</li><li><code>outbuf</code> and <code>outsize</code> will only contain valid buffer (pointer and size) on success
</li><li>all info/warning/error messages are passed to the <a href="#Messaging-system">Messaging system</a></li></ul><h4>error codes</h4><ul><li>SGS_ECOMP: compiler error
</li><li>SGS_EINVAL: passed data was too big
</li><li>SGS_EINPROC: failed to serialize bytecode</li></ul></div>
<div class='item'><a name='sgs-DumpCompiled-function'></a><hr><h2>sgs_DumpCompiled [function]</h2><h3>SGSRESULT sgs_DumpCompiled( sgs_Context* C, const char* buf, size_t size )</h3><h4>dump compiled bytecode or SGScript code buffer to stdout</h4><ul><li>code is compiled before dumping if SGScript code is passed
<ul><li>in that case, all info/warning/error messages are passed to the <a href="#Messaging-system">Messaging system</a></li></ul></li></ul><h4>error codes</h4><ul><li>SGS_ECOMP: compiler error
</li><li>SGS_EINVAL: passed data was too big</li></ul></div>
<div class='item'><a name='sgs-LoadLib-functions'></a><hr><h2>sgs_LoadLib_*** [functions]</h2><h3>SGSRESULT sgs_LoadLib_Fmt( sgs_Context* C )</h3><h3>SGSRESULT sgs_LoadLib_IO( sgs_Context* C )</h3><h3>SGSRESULT sgs_LoadLib_Math( sgs_Context* C )</h3><h3>SGSRESULT sgs_LoadLib_OS( sgs_Context* C )</h3><h3>SGSRESULT sgs_LoadLib_RE( sgs_Context* C )</h3><h3>SGSRESULT sgs_LoadLib_String( sgs_Context* C )</h3><h4>loads the library into the specified context</h4><ul><li>it is generally unnecessary to check for these error codes</li></ul><h4>error codes</h4><ul><li>SGS_E****: first error encountered (operation stopped somewhere in the middle)</li></ul></div>
<div class='item'><a name='sgs-Reg-Consts-function'></a><hr><h2>sgs_Reg***Consts [function]</h2><h3>SGSRESULT sgs_RegFuncConsts( sgs_Context* C, const sgs_RegFuncConst* list, int size )</h3><h3>SGSRESULT sgs_RegIntConsts( sgs_Context* C, const sgs_RegIntConst* list, int size )</h3><h3>SGSRESULT sgs_RegRealConsts( sgs_Context* C, const sgs_RegRealConst* list, int size )</h3><h4>loads the specified list of constants in the context</h4><ul><li>the end of list can be specified in two ways
<ul><li>set the size to <code>sizeof(list)/sizeof(list[0])</code>
</li><li>set the size to -1 and end the list with <code>SGS_RC_END()</code>
</li><li>using both at the same time should be reserved to special cases only</li></ul></li></ul><h4>error codes</h4><ul><li>SGS_E****: first error encountered (operation stopped somewhere in the middle)</li></ul></div>
<div class='item'><a name='sgs-Init-functions'></a><hr><h2>sgs_Init*** [functions]</h2><h3>void sgs_InitNull( sgs_Variable* out )</h3><h3>void sgs_InitBool( sgs_Variable* out, sgs_Bool value )</h3><h3>void sgs_InitInt( sgs_Variable* out, sgs_Int value )</h3><h3>void sgs_InitReal( sgs_Variable* out, sgs_Real value )</h3><h3>void sgs_InitStringBuf( sgs_Context* C, sgs_Variable* out, const char* str, sgs_SizeVal size )</h3><h3>void sgs_InitString( sgs_Context* C, sgs_Variable* out, const char* str )</h3><h3>void sgs_InitCFunction( sgs_Variable* out, sgs_CFunc func )</h3><h3>void sgs_InitObject( sgs_Context* C, sgs_Variable* out, void* data, sgs_ObjInterface* iface )</h3><h3>void* sgs_InitObjectIPA( sgs_Context* C, sgs_Variable* out, sgs_SizeVal added, sgs_ObjInterface* iface )</h3><h3>void sgs_InitPtr( sgs_Variable* out, void* ptr )</h3><h3>void sgs_InitObjectPtr( sgs_Variable* out, sgs_VarObj* obj )</h3><ul><li>sgs_Bool is transformed to 0/1 before pushing, everything else is unchanged
</li><li>sgs_InitStringBuf( C, NULL, size ) would allocate an uninitialized buffer
<ul><li>it is accessible immediately by <a href="#sgs-GetStringPtr-P-functions">sgs_GetStringPtrP</a> / <a href="#sgs-GetStringSize-P-functions">sgs_GetStringSizeP</a>
</li></ul><li>sgs_InitObjectIPA stands for &quot;initialize object, allocate memory in-place&quot;
<ul><li>it means that the <code>added</code> memory space will be appended to the end of object allocation
</li><li>this allows to allocate all object data for most objects with just one allocation, instead of two
</li><li>the allocated memory will be returned and also available via <a href="#sgs-GetObjectData-P-functions">sgs_GetObjectDataP</a></li></ul></li></ul></div>
<div class='item'><a name='sgs-InitArray-function'></a><hr><h2>sgs_InitArray [function]</h2><h3>SGSRESULT sgs_InitArray( sgs_Context* C, sgs_Variable* out, sgs_SizeVal numitems )</h3><h4>creates an array at <code>out</code> from <code>numitems</code> last items on the stack, pops those items</h4><h4>error codes</h4><ul><li>SGS_EINVAL: more items are selected than exist in the current stack frame</li></ul></div>
<div class='item'><a name='sgs-InitDict-function'></a><hr><h2>sgs_InitDict [function]</h2><h3>SGSRESULT sgs_InitDict( sgs_Context* C, sgs_Variable* out, sgs_SizeVal numitems )</h3><h4>creates a dict at <code>out</code> from <code>numitems</code> last items on the stack, pops those items</h4><ul><li><code>numitems</code> can be even or 0, since all odd arguments are keys and all even arguments are values</li></ul><h4>error codes</h4><ul><li>SGS_EINVAL: more items are selected than exist in the current stack frame or <code>numitems</code> wasn&#39;t even or 0</li></ul></div>
<div class='item'><a name='sgs-InitMap-function'></a><hr><h2>sgs_InitMap [function]</h2><h3>SGSRESULT sgs_InitMap( sgs_Context* C, sgs_Variable* out, sgs_SizeVal numitems )</h3><h4>creates a map at <code>out</code> from <code>numitems</code> last items on the stack, pops those items</h4><ul><li><code>numitems</code> can be even or 0, since all odd arguments are keys and all even arguments are values</li></ul><h4>error codes</h4><ul><li>SGS_EINVAL: more items are selected than exist in the current stack frame or <code>numitems</code> wasn&#39;t even or 0</li></ul></div>
<div class='item'><a name='sgs-Push-functions'></a><hr><h2>sgs_Push*** [functions]</h2><h3>void sgs_PushNull( sgs_Context* C )</h3><h3>void sgs_PushBool( sgs_Context* C, sgs_Bool value )</h3><h3>void sgs_PushInt( sgs_Context* C, sgs_Int value )</h3><h3>void sgs_PushReal( sgs_Context* C, sgs_Real value )</h3><h3>void sgs_PushStringBuf( sgs_Context* C, const char* str, sgs_SizeVal size )</h3><h3>void sgs_PushString( sgs_Context* C, const char* str )</h3><h3>void sgs_PushCFunction( sgs_Context* C, sgs_CFunc func )</h3><h3>void sgs_PushObject( sgs_Context* C, void* data, sgs_ObjInterface* iface )</h3><h3>void* sgs_PushObjectIPA( sgs_Context* C, sgs_SizeVal added, sgs_ObjInterface* iface )</h3><h3>void sgs_PushPtr( sgs_Context* C, void* ptr )</h3><h3>void sgs_PushObjectPtr( sgs_Context* C, sgs_VarObj* obj )</h3><h3>SGSRESULT sgs_PushVariable( sgs_Context* C, sgs_Variable* var )</h3><h4>pushes the data on the stack, as a new entry, appended to the end</h4><ul><li>sgs_Bool is transformed to 0/1 before pushing, everything else is unchanged
</li><li>sgs_PushStringBuf( C, NULL, size ) would allocate an uninitialized buffer
<ul><li>it is accessible immediately by <a href="#sgs-GetStringPtr-P-functions">sgs_GetStringPtr( C, -1 )</a> / <a href="#sgs-GetStringSize-P-functions">sgs_GetStringSize( C, -1 )</a>
</li></ul><li>sgs_PushObjectIPA stands for &quot;push object, allocate memory in-place&quot;
<ul><li>it means that the <code>added</code> memory space will be appended to the end of object allocation
</li><li>this allows to allocate all object data for most objects with just one allocation, instead of two
</li><li>the allocated memory will be returned and also available via <a href="#sgs-GetObjectData-P-functions">sgs_GetObjectData( C, -1 )</a>
</li></ul><li>sgs_PushVariable will increment the reference count of strings, SGS functions and objects
<ul><li>it will also return EINVAL if type of variable isn&#39;t one of the allowed types
</li></ul><li>these functions do not throw an error when the stack is full since there is no way to handle that</li></ul></div>
<div class='item'><a name='sgs-StoreVariable-function'></a><hr><h2>sgs_StoreVariable [function]</h2><h3>SGSRESULT sgs_StoreVariable( sgs_Context* C, sgs_Variable* var )</h3><h4>copy the topmost item of the current stack frame to the specified place, acquire it and pop it</h4><h4>error codes</h4><ul><li>SGS_ENOTFND: stack frame is empty</li></ul></div>
<div class='item'><a name='sgs-Pop-function'></a><hr><h2>sgs_Pop [function]</h2><h3>SGSRESULT sgs_Pop( sgs_Context* C, int count )</h3><h4>pops <code>count</code> variables off the current frame of the stack</h4><h4>error codes</h4><ul><li>SGS_EINVAL: <code>count</code> was bigger than the number of items in the current stack frame or <code>count</code> is less than 0</li></ul></div>
<div class='item'><a name='sgs-PopSkip-function'></a><hr><h2>sgs_PopSkip [function]</h2><h3>SGSRESULT sgs_PopSkip( sgs_Context* C, int count, int skip )</h3><h4>pops <code>count</code> variables off the current frame of the stack, skipping the last <code>skip</code> elements</h4><h4>error codes</h4><ul><li>SGS_EINVAL: <code>count+skip</code> was bigger than the number of items in the current stack frame or <code>count</code> is less than 0 or <code>skip</code> is less than 0</li></ul></div>
<div class='item'><a name='sgs-InsertVariable-function'></a><hr><h2>sgs_InsertVariable [function]</h2><h3>SGSRESULT sgs_InsertVariable( sgs_Context* C, int pos, sgs_Variable* var )</h3><h4>inserts a variable <code>var</code> at a given index <code>pos</code> of the current stack frame, increasing its reference count</h4><h4>error codes</h4><ul><li>SGS_EBOUNDS: index out of bounds</li></ul></div>
<div class='item'><a name='sgs-PushArray-function'></a><hr><h2>sgs_PushArray [function]</h2><h3>SGSRESULT sgs_PushArray( sgs_Context* C, sgs_SizeVal numitems )</h3><h4>creates an array from <code>numitems</code> last items on the stack, pops those items and pushes the array</h4><h4>error codes</h4><ul><li>SGS_EINVAL: more items are selected than exist in the current stack frame</li></ul></div>
<div class='item'><a name='sgs-PushDict-function'></a><hr><h2>sgs_PushDict [function]</h2><h3>SGSRESULT sgs_PushDict( sgs_Context* C, sgs_SizeVal numitems )</h3><h4>creates a dict from <code>numitems</code> last items on the stack, pops those items and pushes the dict</h4><ul><li><code>numitems</code> can be even or 0, since all odd arguments are keys and all even arguments are values</li></ul><h4>error codes</h4><ul><li>SGS_EINVAL: more items are selected than exist in the current stack frame or <code>numitems</code> wasn&#39;t even or 0</li></ul></div>
<div class='item'><a name='sgs-PushMap-function'></a><hr><h2>sgs_PushMap [function]</h2><h3>SGSRESULT sgs_PushMap( sgs_Context* C, sgs_SizeVal numitems )</h3><h4>creates a map from <code>numitems</code> last items on the stack, pops those items and pushes the map</h4><ul><li><code>numitems</code> can be even or 0, since all odd arguments are keys and all even arguments are values</li></ul><h4>error codes</h4><ul><li>SGS_EINVAL: more items are selected than exist in the current stack frame or <code>numitems</code> wasn&#39;t even or 0</li></ul></div>
<div class='item'><a name='sgs-PushItem-function'></a><hr><h2>sgs_PushItem [function]</h2><h3>SGSRESULT sgs_PushItem( sgs_Context* C, sgs_StkIdx item )</h3><h4>copy an item from the current stack frame and append it to the end of the stack</h4><h4>error codes</h4><ul><li>SGS_EBOUNDS: index out of bounds</li></ul></div>
<div class='item'><a name='sgs-StoreItem-function'></a><hr><h2>sgs_StoreItem [function]</h2><h3>SGSRESULT sgs_StoreItem( sgs_Context* C, sgs_StkIdx item )</h3><h4>copy last item in current stack frame to index <code>item</code> and pop it</h4><ul><li><code>item</code> refers to a position after the pop operation, therefore -1 means one element before the last etc.</li></ul><h4>error codes</h4><ul><li>SGS_EBOUNDS: index out of bounds</li></ul></div>
<div class='item'><a name='sgs-GetIndex-functions'></a><hr><h2>sgs_GetIndex*** [functions]</h2><h3>SGSRESULT sgs_GetIndexPPP( sgs_Context* C, sgs_Variable* obj, sgs_Variable* idx, sgs_Variable* out, int isprop )</h3><h3>SGSRESULT sgs_GetIndexIPP( sgs_Context* C, sgs_StkIdx obj, sgs_Variable* idx, sgs_Variable* out, int isprop )</h3><h3>SGSRESULT sgs_GetIndexPIP( sgs_Context* C, sgs_Variable* obj, sgs_StkIdx idx, sgs_Variable* out, int isprop )</h3><h3>SGSRESULT sgs_GetIndexIIP( sgs_Context* C, sgs_StkIdx obj, sgs_StkIdx idx, sgs_Variable* out, int isprop )</h3><h3>SGSRESULT sgs_GetIndexPPI( sgs_Context* C, sgs_Variable* obj, sgs_Variable* idx, sgs_StkIdx out, int isprop )</h3><h3>SGSRESULT sgs_GetIndexIPI( sgs_Context* C, sgs_StkIdx obj, sgs_Variable* idx, sgs_StkIdx out, int isprop )</h3><h3>SGSRESULT sgs_GetIndexPII( sgs_Context* C, sgs_Variable* obj, sgs_StkIdx idx, sgs_StkIdx out, int isprop )</h3><h3>SGSRESULT sgs_GetIndexIII( sgs_Context* C, sgs_StkIdx obj, sgs_StkIdx idx, sgs_StkIdx out, int isprop )</h3><h4>retrieve index/property <code>idx</code> from the specified variable <code>obj</code> to the position <code>out</code>, specifying retrieval type via <code>isprop</code></h4><ul><li>last 3 letters in function name determines the type for parameters 2, 3 and 4: P for pointers, I for stack indices</li></ul><h4>error codes</h4><ul><li>SGS_EBOUNDS: something was not pointing inside the current stack frame
</li><li>SGS_ENOTFND: index/property was not found
</li><li>other codes may appear if returned by custom objects</li></ul></div>
<div class='item'><a name='sgs-SetIndex-functions'></a><hr><h2>sgs_SetIndex*** [functions]</h2><h3>SGSRESULT sgs_SetIndexPPP( sgs_Context* C, sgs_Variable* obj, sgs_Variable* idx, sgs_Variable* val, int isprop )</h3><h3>SGSRESULT sgs_SetIndexIPP( sgs_Context* C, sgs_StkIdx obj, sgs_Variable* idx, sgs_Variable* val, int isprop )</h3><h3>SGSRESULT sgs_SetIndexPIP( sgs_Context* C, sgs_Variable* obj, sgs_StkIdx idx, sgs_Variable* val, int isprop )</h3><h3>SGSRESULT sgs_SetIndexIIP( sgs_Context* C, sgs_StkIdx obj, sgs_StkIdx idx, sgs_Variable* val, int isprop )</h3><h3>SGSRESULT sgs_SetIndexPPI( sgs_Context* C, sgs_Variable* obj, sgs_Variable* idx, sgs_StkIdx val, int isprop )</h3><h3>SGSRESULT sgs_SetIndexIPI( sgs_Context* C, sgs_StkIdx obj, sgs_Variable* idx, sgs_StkIdx val, int isprop )</h3><h3>SGSRESULT sgs_SetIndexPII( sgs_Context* C, sgs_Variable* obj, sgs_StkIdx idx, sgs_StkIdx val, int isprop )</h3><h3>SGSRESULT sgs_SetIndexIII( sgs_Context* C, sgs_StkIdx obj, sgs_StkIdx idx, sgs_StkIdx val, int isprop )</h3><h4>set index/property <code>idx</code> in the specified variable <code>obj</code> to the value <code>val</code>, specifying type via <code>isprop</code></h4><ul><li>last 3 letters in function name determines the type for parameters 2, 3 and 4: P for pointers, I for stack indices</li></ul><h4>error codes</h4><ul><li>SGS_EBOUNDS: something was not pointing inside the current stack frame
</li><li>SGS_ENOTFND: index/property was not found
</li><li>SGS_EINVAL: specified value could not be used
</li><li>other codes may appear if returned by custom objects</li></ul></div>
<div class='item'><a name='sgs-PushIndex-functions'></a><hr><h2>sgs_PushIndex** [functions]</h2><h3>SGSRESULT sgs_PushIndexPP( sgs_Context* C, sgs_Variable* obj, sgs_Variable* idx, int isprop )</h3><h3>SGSRESULT sgs_PushIndexIP( sgs_Context* C, sgs_StkIdx obj, sgs_Variable* idx, int isprop )</h3><h3>SGSRESULT sgs_PushIndexPI( sgs_Context* C, sgs_Variable* obj, sgs_StkIdx idx, int isprop )</h3><h3>SGSRESULT sgs_PushIndexII( sgs_Context* C, sgs_StkIdx obj, sgs_StkIdx idx, int isprop )</h3><h4>retrieve and push index/property <code>idx</code> from the specified variable <code>obj</code>, specifying retrieval type via <code>isprop</code></h4><ul><li>last 2 letters in function name determines the type for parameters 2 and 3: P for pointers, I for stack indices</li></ul><h4>error codes</h4><ul><li>SGS_EBOUNDS: something was not pointing inside the current stack frame
</li><li>SGS_ENOTFND: index/property was not found
</li><li>other codes may appear if returned by custom objects</li></ul></div>
<div class='item'><a name='sgs-StoreIndex-functions'></a><hr><h2>sgs_StoreIndex** [functions]</h2><h3>SGSRESULT sgs_StoreIndexPP( sgs_Context* C, sgs_Variable* obj, sgs_Variable* idx, int isprop )</h3><h3>SGSRESULT sgs_StoreIndexIP( sgs_Context* C, sgs_StkIdx obj, sgs_Variable* idx, int isprop )</h3><h3>SGSRESULT sgs_StoreIndexPI( sgs_Context* C, sgs_Variable* obj, sgs_StkIdx idx, int isprop )</h3><h3>SGSRESULT sgs_StoreIndexII( sgs_Context* C, sgs_StkIdx obj, sgs_StkIdx idx, int isprop )</h3><h4>set index/property <code>idx</code> in the specified variable <code>obj</code> to the topmost variable in stack, specifying type via <code>isprop</code>, then pop the topmost variable in stack if successful</h4><ul><li>last 2 letters in function name determines the type for parameters 2 and 3: P for pointers, I for stack indices</li></ul><h4>error codes</h4><ul><li>SGS_EBOUNDS: something was not pointing inside the current stack frame
</li><li>SGS_ENOTFND: index/property was not found
</li><li>SGS_EINVAL: specified value could not be used
</li><li>SGS_EINPROC: current stack frame is empty
</li><li>other codes may appear if returned by custom objects</li></ul></div>
<div class='item'><a name='sgs-GetGlobalPP-function'></a><hr><h2>sgs_GetGlobalPP [function]</h2><h3>SGSRESULT sgs_GetGlobalPP( SGS_CTX, sgs_Variable* idx, sgs_Variable* out )</h3><h4>retrieve a global variable by index <code>idx</code> to position <code>out</code></h4><h4>error codes</h4><ul><li>SGS_ENOTSUP: <code>idx</code> was not a string
</li><li>SGS_ENOTFND: index was not found</li></ul></div>
<div class='item'><a name='sgs-SetGlobalPP-function'></a><hr><h2>sgs_SetGlobalPP [function]</h2><h3>SGSRESULT sgs_SetGlobalPP( SGS_CTX, sgs_Variable* idx, sgs_Variable* val )</h3><h4>set a global variable <code>val</code> to index <code>idx</code></h4><h4>error codes</h4><ul><li>SGS_ENOTSUP: <code>idx</code> was not a string / <code>idx</code> was _G and <code>val</code> was not a dict</li></ul></div>
<div class='item'><a name='sgs-PushProperty-function'></a><hr><h2>sgs_PushProperty [function]</h2><h3>SGSRESULT sgs_PushProperty( sgs_Context* C, sgs_StkIdx obj, const char* name )</h3><h4>load and push the property of the item <code>obj</code> in the current stack frame</h4><h4>error codes</h4><ul><li>SGS_EBOUNDS: <code>obj</code> was not pointing inside the current stack frame
</li><li>SGS_EINPROC: current stack frame is empty
</li><li>SGS_ENOTFND: property was not found
</li><li>other codes may appear if returned by custom objects</li></ul></div>
<div class='item'><a name='sgs-StoreProperty-function'></a><hr><h2>sgs_StoreProperty [function]</h2><h3>SGSRESULT sgs_StoreProperty( sgs_Context* C, sgs_StkIdx obj, const char* name )</h3><h4>copy and pop the topmost item of the current stack frame to the property <code>name</code> of variable <code>obj</code></h4><h4>error codes</h4><ul><li>SGS_EBOUNDS: <code>obj</code> was not pointing inside the current stack frame
</li><li>SGS_ENOTFND: property was not found
</li><li>other codes may appear if returned by custom objects</li></ul></div>
<div class='item'><a name='sgs-PushNumIndex-function'></a><hr><h2>sgs_PushNumIndex [function]</h2><h3>SGSRESULT sgs_PushNumIndex( sgs_Context* C, sgs_StkIdx obj, sgs_Int idx )</h3><h4>load and push the integer index <code>idx</code> of the variable <code>obj</code></h4><h4>error codes:</h4><ul><li>SGS_EBOUNDS: <code>obj</code> was not pointing inside the current stack frame / array index out of bounds
</li><li>SGS_ENOTFND: index was not found
</li><li>other codes may appear if returned by custom objects</li></ul></div>
<div class='item'><a name='sgs-StoreNumIndex-function'></a><hr><h2>sgs_StoreNumIndex [function]</h2><h3>SGSRESULT sgs_StoreNumIndex( sgs_Context* C, sgs_StkIdx obj, sgs_Int idx )</h3><h4>copy and pop the topmost item of the current stack to the integer index <code>idx</code> of variable <code>obj</code></h4><h4>error codes</h4><ul><li>SGS_EBOUNDS: <code>obj</code> was not pointing inside the current stack frame / array index out of bounds
</li><li>SGS_ENOTFND: index was not found
</li><li>other codes may appear if returned by custom objects</li></ul></div>
<div class='item'><a name='sgs-PushGlobal-function'></a><hr><h2>sgs_PushGlobal [function]</h2><h3>SGSRESULT sgs_PushGlobal( sgs_Context* C, const char* name )</h3><h4>push the global variable <code>name</code> on the stack</h4><h4>error codes</h4><ul><li>SGS_ENOTFND: variable was not found</li></ul></div>
<div class='item'><a name='sgs-StoreGlobal-function'></a><hr><h2>sgs_StoreGlobal [function]</h2><h3>SGSRESULT sgs_StoreGlobal( sgs_Context* C, const char* name )</h3><h4>copy and pop the topmost stack item to the global variable <code>name</code></h4><ul><li>_G is the environment table (a superglobal, list of global variable names and values)</li></ul><h4>error codes</h4><ul><li>SGS_EINPROC: current stack frame was empty
</li><li>SGS_ENOTSUP: variable was not a dict (_G only accepts dict values)</li></ul></div>
<div class='item'><a name='sgs-GetEnv-function'></a><hr><h2>sgs_GetEnv [function]</h2><h3>void sgs_GetEnv( SGS_CTX, sgs_Variable* out )</h3><h4>retrieve the global environment dict variable (_G)</h4></div>
<div class='item'><a name='sgs-SetEnv-function'></a><hr><h2>sgs_SetEnv [function]</h2><h3>SGSRESULT sgs_SetEnv( SGS_CTX, sgs_Variable* var )</h3><h4>set a global environment dict variable from the variable <code>var</code></h4><h4>error codes</h4><ul><li>SGS_ENOTSUP: variable was not a dict (_G only accepts dict values)</li></ul></div>
<div class='item'><a name='sgs-PushEnv-function'></a><hr><h2>sgs_PushEnv [function]</h2><h3>void sgs_PushEnv( SGS_CTX )</h3><h4>retrieve and push the global environment dict variable (_G)</h4></div>
<div class='item'><a name='sgs-StoreEnv-function'></a><hr><h2>sgs_StoreEnv [function]</h2><h3>SGSRESULT sgs_StoreEnv( SGS_CTX )</h3><h4>set a global environment dict variable from the topmost stack item, then pop it if successful</h4><h4>error codes</h4><ul><li>SGS_EINPROC: current stack frame was empty
</li><li>SGS_ENOTSUP: variable was not a dict (_G only accepts dict values)</li></ul></div>
<div class='item'><a name='sgs-PushPath-function'></a><hr><h2>sgs_PushPath [function]</h2><h3>SGSRESULT sgs_PushPath( sgs_Context* C, sgs_StkIdx item, const char* path, ... )</h3><h4>push the variable specified by starting point <code>item</code> and traversal path <code>path</code></h4><p>
<em class='notice-bgr'>The safety of this function is similar to that of the printf family of functions. Be explicit in what types you pass to the variable argument list to avoid errors.</em>
</p><ul><li>the syntax of `path`:
<ul><li>a list of letters, specifying a sub-variable to request (o,p,s,i,k,n)</li></ul></li></ul><h5>table of accepted letters</h5><p>
<table>
<tr><th>letter</th><th>property?</th><th>variable arguments</th><th>virtual machine access mode / description</th></tr>
<tr><td>o</td><td>yes</td><td>SizeVal</td><td>integer property</td></tr>
<tr><td>p</td><td>yes</td><td>C string</td><td>string property</td></tr>
<tr><td>s</td><td>yes</td><td>SizeVal, buffer</td><td>special string property</td></tr>
<tr><td>i</td><td>no</td><td>SizeVal</td><td>integer index</td></tr>
<tr><td>k</td><td>no</td><td>C string</td><td>string index</td></tr>
<tr><td>n</td><td>no</td><td>SizeVal, buffer</td><td>special string index</td></tr>
</table>
</p><ul><li>legend:
<ul><li>SizeVal: sgs_SizeVal / int32_t
</li><li>C string: null-terminated char* string
</li><li>buffer: char* byte array, size is specified in the previous argument
</li><li>property?: if yes, property access is used (object.property), otherwise index access is used (object[index])</li></ul></li></ul><h4>error codes</h4><ul><li>SGS_EINVAL: invalid symbol found in path / corresponding variable arguments had an invalid value
</li><li>other errors, as returned by <a href="#sgs-PushIndex-functions">sgs_PushIndex***()</a></li></ul></div>
<div class='item'><a name='sgs-StorePath-function'></a><hr><h2>sgs_StorePath [function]</h2><h3>SGSRESULT sgs_StorePath( sgs_Context* C, sgs_StkIdx item, const char* path, ... )</h3><h4>copy and pop the topmost item on stack to variable specified by starting point <code>item</code> and traversal path <code>path</code></h4><p>
<em class='notice-bgr'>The safety of this function is similar to that of the printf family of functions. Be explicit in what types you pass to the variable argument list to avoid errors.</em>
</p><ul><li>the syntax of <code>path</code> is the same as with <a href="#sgs-PushPath-function">sgs_PushPath</a>
</li><li>the last item on the path (or in the case of an empty path, the starting point) is accessed with a store operation, the rest - with a push operation</li></ul><h4>error codes</h4><ul><li>SGS_EINVAL: invalid symbol found in path / corresponding variable arguments had an invalid value
</li><li>SGS_EINPROC: current stack frame is empty
</li><li>other errors, as returned by <a href="#sgs-PushIndex-functions">sgs_PushIndex***</a> or <a href="#sgs-StoreIndex-functions">sgs_StoreIndex***</a></li></ul></div>
<div class='item'><a name='sgs-ArgErrorExt-function'></a><hr><h2>sgs_ArgErrorExt [function]</h2><h3>int sgs_ArgErrorExt( sgs_Context* C, int argid, int method, const char* expect, const char* expfx )</h3><h4>prints the argument type mismatch error</h4><ul><li><code>expfx</code> - prefix of <code>expect</code>, put exactly before this for things like &#39;strict &#39;
</li><li>always returns 0 so it can be used to return and print an error in the same statement</li></ul></div>
<div class='item'><a name='sgs-ArgError-function'></a><hr><h2>sgs_ArgError [function]</h2><h3>int sgs_ArgError( sgs_Context* C, int argid, int expect, int is_strict )</h3><h4>prints the argument type mismatch error</h4><ul><li>always returns 0 so it can be used to return and print an error in the same statement</li></ul></div>
<div class='item'><a name='sgs-ArgError-function-aliases'></a><hr><h2>sgs_***ArgError [function aliases]</h2><h3>int sgs_FuncArgError( sgs_Context* C, int argid, int expect, int is_strict )</h3><h3>int sgs_MethodArgError( sgs_Context* C, int argid, int expect, int is_strict )</h3><h4>prints the argument type mismatch error</h4><ul><li>always returns 0 so it can be used to return and print an error in the same statement
</li><li>alias to <code>sgs_ArgError( C, argid, Func/Method =&gt; 0/1, expect, is_strict )</code></li></ul></div>
<div class='item'><a name='sgs-LoadArgsExt-VA-function'></a><hr><h2>sgs_LoadArgsExt(VA) [function]</h2><h3>SGSMIXED sgs_LoadArgsExt( sgs_Context* C, int from, const char* cmd, ... )</h3><h3>SGSMIXED sgs_LoadArgsExtVA( sgs_Context* C, int from, const char* cmd, va_list args )</h3><h4>parse the stack items and retrieve their data according to <code>cmd</code>, starting from item <code>from</code></h4><ul><li>for anything function requires, pass the value; for anything it returns - the pointer to the value
</li><li><code>cmd</code> is a string consisting of one-character commands
</li><li>the commands are grouped into two kinds: control commands and parsing commands
</li><li>function returns whether all required arguments have been parsed successfully
<ul><li>thus, if function returns &lt; 1, state of outputs is somewhat unknown unless filled with defaults
</li><li>it is guaranteed that all arguments will be parsed from first (specified) forward, not in any other way</li></ul></li></ul><p>
<em class='notice-bgr'>unlike sgs_LoadArgs, it returns <code>SGSMIXED</code> and must be checked differently (&quot;ret.val. &gt; 0&quot;, if same output needed)</em>
</p><h5>control commands</h5><ul><li><code>?</code> -- only check, do not write the result and do not require a pointer to write the data to
</li><li><code>!</code> -- enable strict parsing for the next item (requires exactly the type specified
</li><li><code>-</code>,<code>+</code> -- enable (-) or disable (+) treating integers as signed (default = true)
</li><li><code>|</code> -- mark the point where required arguments end and optional arguments begin
</li><li><code>#</code> -- do range checking on integer arguments (min/max of the required types)
</li><li><code>^</code> -- clamp the argument to the range of the required type
</li><li><code>~</code> -- ignore ranges and chop out-of-range integers (default)
</li><li><code>&lt;</code> -- move argument pointer 1 item back (cannot move it before 0)
</li><li><code>&gt;</code> -- move argument pointer 1 item forward
</li><li><code>@</code> -- specify that this is a method (argument 0 = &#39;this&#39;; shifts argument indices on error printing by -1)
</li><li><code>.</code> -- specify the end of argument list (how many arguments are expected)</li></ul><h5>parsing commands</h5><ul><li><code>n</code> -- check for <code>null</code> (returns SGSBOOL = 1, always strict)
</li><li><code>b</code> -- check for <code>bool</code> (returns sgs_Bool)
</li><li><code>c</code> -- check for <code>int</code> (returns int8_t or uint8_t, depending on sign settings, may check ranges)
</li><li><code>w</code> -- check for <code>int</code> (returns int16_t or uint16_t, depending on sign settings, may check ranges)
</li><li><code>l</code> -- check for <code>int</code> (returns int32_t or uint32_t, depending on sign settings, may check ranges)
</li><li><code>q</code> -- check for <code>int</code> (returns int64_t or uint64_t, depending on sign settings, may check ranges)
</li><li><code>i</code> -- check for <code>int</code> (returns sgs_Int, may check ranges)
</li><li><code>f</code> -- check for <code>real</code> (returns float)
</li><li><code>d</code> -- check for <code>real</code> (returns double)
</li><li><code>r</code> -- check for <code>real</code> (returns sgs_Real)
</li><li><code>s</code> -- check for <code>string</code> (returns char*)
</li><li><code>m</code> -- check for <code>string</code> (returns char* string and sgs_SizeVal size)
</li><li><code>p</code> -- check for <code>func/cfunc/object with CALL</code> (callables) (returns SGSBOOL = 1)
</li><li><code>a</code> -- check for <code>array</code> (returns sgs_SizeVal size, use -1 as starting value to check optional arguments)
</li><li><code>t</code> -- check for <code>dict</code> (returns sgs_SizeVal size, use -1 as starting value to check optional arguments)
</li><li><code>h</code> -- check for <code>map</code> (returns sgs_SizeVal size, use -1 as starting value to check optional arguments)
</li><li><code>o</code> -- check for <code>object</code> (requires void** interface, returns &lt;type&gt;* data - the data pointer)
</li><li><code>&amp;</code> -- check for <code>pointer</code> (returns void* data - the pointer)
</li><li><code>v</code> -- check for any (non-null if strict, returns sgs_Variable data)
</li><li><code>x</code> -- call a custom checking function (requires sgs_ArgCheckFunc, everything else depends on function)</li></ul><h4>error codes</h4><ul><li>SGS_EINVAL: error in <code>cmd</code> (wrong character/argument pointer moved before 0)</li></ul></div>
<div class='item'><a name='sgs-LoadArgs-function-alias'></a><hr><h2>sgs_LoadArgs [function alias]</h2><h3>SGSBOOL sgs_LoadArgs( sgs_Context* C, const char* cmd, ... )</h3><h4>parse the stack items and retrieve their data according to <code>cmd</code>, starting from item 0</h4><p>
<em class='notice-bgr'>unlike <a href="#sgs-LoadArgsExt-VA-function">sgs_LoadArgsExt(VA)</a>, it returns <code>bool</code> - whether all required arguments have been successfully parsed</em>
</p><ul><li>for more info on syntax and usage, refer to <a href="#sgs-LoadArgsExt-VA-function">sgs_LoadArgsExt(VA)</a>
</li><li>alias to <code>sgs_LoadArgsExt( C, 0, cmd, ... )&gt;0</code></li></ul></div>
<div class='item'><a name='sgs-ParseMethod-function'></a><hr><h2>sgs_ParseMethod [function]</h2></div>
<div class='item'><a name='SGS-PARSE-METHOD-function-alias'></a><hr><h2>SGS_PARSE_METHOD [function alias]</h2></div>
<div class='item'><a name='sgs-Method-function'></a><hr><h2>sgs_Method [function]</h2><h3>SGSBOOL sgs_Method( sgs_Context* C )</h3><h4>unlock the &#39;this&#39; variable, return if the function was called as a method (and thus variable was unlocked)</h4><ul><li>method calls look like this: &quot;object.method(...)&quot;</li></ul></div>
<div class='item'><a name='sgs-Force-HideThis-functions'></a><hr><h2>sgs_(Force)HideThis [functions]</h2><h3>SGSBOOL sgs_HideThis( sgs_Context* C )</h3><h3>SGSBOOL sgs_ForceHideThis( sgs_Context* C )</h3><h4>hide the &#39;this&#39; variable, return if successful</h4><ul><li>sgs_ForceHideThis attempts to hide the first item on stack even if it didn&#39;t belong to the call, sgs_HideThis only does it if it belongs to the call and was hidden before
</li><li>the hiding method is stack offset pointer shift</li></ul></div>
<div class='item'><a name='sgs-FCall-P-functions'></a><hr><h2>sgs_FCall(P) [functions]</h2><h3>SGSRESULT sgs_FCall( sgs_Context* C, int args, int expect, int gotthis )</h3><h4>call the topmost variable on stack with the arguments before it, returning the expected number of variables on stack</h4><h3>SGSRESULT sgs_FCallP( sgs_Context* C, sgs_Variable* var, int args, int expect, int gotthis )</h3><h4>call the variable with the arguments on stack, returning the expected number of variables on stack</h4><ul><li>`var`: the callable variable to call as a function
</li><li>`args`: the primary variables to be passed to the function, in the same order they are in the stack
</li><li>`expect`: the number of variables to be left after a successful call
</li><li>`gotthis`: whether the function is a method and an additional argument needs to be passed as the &#39;this&#39; value before others</li></ul><p>
After a successful call, all arguments and the function will be popped off the stack and the expected number of variables will appear in their place. If the underlying callable does not return enough arguments, &#39;null&#39; variables will be pushed instead. If the number of returned values is bigger than expected, only the first expected return values will stay on the stack.
</p><ul><li>expected stack structure:
<ul><li>(if gotthis != 0) [this]
</li><li>[argument] x <code>args</code>
</li><li>[callable]</li></ul></li></ul><ul><li>a callable is one of the following:
<ul><li>SGS function
</li><li>C function
</li><li>object with CALL interface function defined</li></ul></li></ul><p>
<em class='notice-bgr'>Stack is returned to the expected state only if the return value is equal to SGS_SUCCESS or SGS_EINPROC. Otherwise, it&#39;s left exactly as it was before the call.</em>
</p><h4>error codes</h4><ul><li>SGS_EINPROC: topmost item on stack was not callable
</li><li>SGS_EINVAL: not enough values in current stack frame (must have at least `args + (gotthis?1:0) + (is_sgs_FCallP?0:1)`)</li></ul></div>
<div class='item'><a name='sgs-This-Call-P-function-aliases'></a><hr><h2>sgs_(This)Call(P) [function aliases]</h2><h3>SGSRESULT sgs_Call( sgs_Context* C, int args, int expect )</h3><h3>SGSRESULT sgs_ThisCall( sgs_Context* C, int args, int expect )</h3><h4>call the topmost variable on stack with the arguments before it, returning the expected number of variables on stack</h4><h3>SGSRESULT sgs_Call( sgs_Context* C, sgs_Variable* var, int args, int expect )</h3><h3>SGSRESULT sgs_ThisCall( sgs_Context* C, sgs_Variable* var, int args, int expect )</h3><h4>call the variable with the arguments on stack, returning the expected number of variables on stack</h4><ul><li>aliases to <a href="#sgs-FCall-P-functions">sgs_FCall(P)</a>, for the first function of each group <code>gotthis = 0</code>, for the second <code>gotthis = 1</code>.</li></ul></div>
<div class='item'><a name='sgs-GlobalCall-function'></a><hr><h2>sgs_GlobalCall [function]</h2><h3>SGSRESULT sgs_GlobalCall( sgs_Context* C, const char* name, int args, int expect )</h3><h4>call the global variable <code>name</code> as a function</h4><ul><li>combination of global function retrieval and function call; see <a href="#sgs-PushGlobal-function">sgs_PushGlobal</a> and <a href="#sgs-FCall-P-functions">sgs_FCall(P)</a> for more info on behavior</li></ul><h4>error codes</h4><ul><li>SGS_ENOTFND: global variable was not found
</li><li>SGS_EINPROC: item found was not callable
</li><li>SGS_EINVAL: not enough values in current stack frame (must have at least `args + (gotthis?1:0)`)</li></ul></div>
<div class='item'><a name='sgs-TypeOf-function'></a><hr><h2>sgs_TypeOf [function]</h2><h3>SGSRESULT sgs_TypeOf( sgs_Context* C )</h3><h4>return the type name string of topmost variable in current stack frame</h4><ul><li>if the object does not support the specific part of the conversion interface function, a string of format &quot;object (%p)&quot; is returned to ensure expected type name comparison capabilities</li></ul><h4>error codes</h4><ul><li>SGS_EINPROC: current stack frame was empty</li></ul></div>
<div class='item'><a name='sgs-DumpVar-function'></a><hr><h2>sgs_DumpVar [function]</h2><h3>SGSRESULT sgs_DumpVar( sgs_Context* C, int maxdepth )</h3><h4>convert the topmost variable of current stack frame to a highly informative string that should display the contents of the variable, up to <code>maxdepth</code> depth</h4><ul><li>if object does not have the DUMP interface function implemented, only its pointer in memory and reference count are displayed</li></ul><h4>error codes</h4><ul><li>SGS_EINPROC: current stack frame was empty
</li><li>SGS_EINVAL: invalid base variable type found in variable (not really expected to happen unless custom variable creation is done)</li></ul></div>
<div class='item'><a name='sgs-GCExecute-function'></a><hr><h2>sgs_GCExecute [function]</h2><h3>SGSRESULT sgs_GCExecute( sgs_Context* C )</h3><h4>call the garbage collector on the VM</h4><ul><li>this procedure may take some time if the object graph is big
</li><li>during the procedure, the GCMARK interface functions of objects are invoked for the objects visible from entry points (like stack and global table)
</li><li>aborting the procedure via error codes could lead the system into an unrecoverable state</li></ul><h4>error codes</h4><ul><li>any code can be returned by GCMARK and DESTRUCT functions, doing so would abort the process if the code is not either SGS_SUCCESS or SGS_ENOTFND</li></ul></div>
<div class='item'><a name='sgs-PadString-function'></a><hr><h2>sgs_PadString [function]</h2><h3>SGSRESULT sgs_PadString( sgs_Context* C )</h3><h4>replace the topmost variable of current stack frame with a string variable where two spaces are appended after every newline</h4><h4>error codes</h4><ul><li>SGS_EINPROC: current stack frame is empty or output string size exceeds limit
</li><li>SGS_EINVAL: topmost variable is not a string</li></ul></div>
<div class='item'><a name='sgs-ToPrintSafeString-function'></a><hr><h2>sgs_ToPrintSafeString [function]</h2><h3>SGSRESULT sgs_ToPrintSafeString( sgs_Context* C )</h3><h4>replace the topmost variable of current stack frame with a string where all non-printable (except space), non-ASCII characters converted to a character hex code</h4><h4>error codes</h4><ul><li>SGS_EINPROC: current stack frame is empty or output string size exceeds limit</li></ul></div>
<div class='item'><a name='sgs-StringConcat-function'></a><hr><h2>sgs_StringConcat [function]</h2><h3>SGSRESULT sgs_StringConcat( sgs_Context* C, int args )</h3><h4>concatenate the <code>args</code> number of topmost string variables in the current stack frame</h4><h4>error codes</h4><ul><li>SGS_EINVAL: not enough (less than `args`) variables were found in the current stack frame</li></ul></div>
<div class='item'><a name='sgs-CloneItem-function'></a><hr><h2>sgs_CloneItem [function]</h2><h3>SGSRESULT sgs_CloneItem( sgs_Context* C, sgs_StkIdx item )</h3><h4>push a copy of the specified stack item</h4><p>
<em class='notice-bgr'>Even though operations with functions and strings succeed, functions and strings are not actually cloned since they are immutable.</em>
</p><h4>error codes</h4><ul><li>SGS_EBOUNDS: stack item index was out of bounds
</li><li>SGS_ENOTFND: the object does not support cloning</li></ul></div>
<div class='item'><a name='sgs-ObjectAction-function'></a><hr><h2>sgs_ObjectAction [function]</h2><h3>SGSMIXED sgs_ObjectAction( sgs_Context* C, sgs_StkIdx item, int action, int arg )</h3><h4>execute an action on the specified stack item</h4><h4>actions</h4><ul><li>SGS_ACT_ARRAY_PUSH
<ul><li>append the last <code>arg</code> items on stack to the array
</li><li>error codes
<ul><li>SGS_EINVAL: <code>item</code> was not an array, <code>arg</code> was negative or bigger than stack frame
</li></ul></li></ul><li>SGS_ACT_ARRAY_POP
<ul><li>remove the last <code>arg</code> items from the end of the array
</li><li>error codes
<ul><li>SGS_EINVAL: <code>item</code> was not an array, <code>arg</code> was negative or bigger than size of array
</li></ul></li></ul><li>SGS_ACT_ARRAY_POPRET
<ul><li>remove the last <code>arg</code> items from the end of the array and return them in the order they were stored (last items on array are last on stack)
</li><li>error codes
<ul><li>SGS_EINVAL: <code>item</code> was not an array, <code>arg</code> was negative or bigger than size of array
</li></ul></li></ul><li>SGS_ACT_ARRAY_FIND
<ul><li>find and return the index of variable specified in <code>arg</code>
</li><li>error codes
<ul><li>SGS_EINVAL: <code>item</code> was not an array
</li><li>SGS_EBOUNDS: <code>arg</code> was out of bounds
</li><li>SGS_ENOTFND: <code>arg</code> was not found inside item
</li></ul></li></ul><li>SGS_ACT_ARRAY_RM_ONE
<ul><li>find and remove only the first copy of variable specified in <code>arg</code>, return if found and removed
</li><li>error codes
<ul><li>SGS_EINVAL: <code>item</code> was not an array
</li><li>SGS_EBOUNDS: <code>arg</code> was out of bounds
</li></ul></li></ul><li>SGS_ACT_ARRAY_RM_ALL
<ul><li>find and remove all copies of variable specified in <code>arg</code>, return how many were found and removed
</li><li>error codes
<ul><li>SGS_EINVAL: <code>item</code> was not an array
</li><li>SGS_EBOUNDS: <code>arg</code> was out of bounds
</li></ul></li></ul><li>SGS_ACT_DICT_UNSET
<ul><li>unset a key-value pair from a dict
</li><li>error codes
<ul><li>SGS_EINVAL: <code>item</code> was not a dict, <code>arg</code> was not pointing to a stack item of <code>string</code> type
</li></ul></li></ul><li>SGS_ACT_MAP_UNSET
<ul><li>unset a key-value pair from a map
</li><li>error codes
<ul><li>SGS_EINVAL: <code>item</code> was not a map, <code>arg</code> was out of bounds</li></ul></li></ul></li></ul><h4>error codes</h4><ul><li>SGS_E****: action-specific
</li><li>SGS_ENOTFND: action was not found</li></ul></div>
<div class='item'><a name='sgs-Serialize-function'></a><hr><h2>sgs_Serialize [function]</h2><h3>SGSRESULT sgs_Serialize( sgs_Context* C )</h3><h4>serialize the topmost variable of the current stack frame (convert to a binary recreation instruction stream)</h4><ul><li>the following variable types can be serialized:
<ul><li>null, bool, int, real, string, func (SGS function)
</li><li>objects with the SERIALIZE interface function defined</li></ul></li></ul><ul><li>serialized data has the following format:
<ul><li>a list of &#39;P&#39; or &#39;C&#39; commands
</li><li>&#39;P&#39; (push) command: byte - variable type; variable data
<ul><li>variable data: nothing for null, byte for bool, int64 for int, double for real, int32 + char[] for string
</li></ul><li>&#39;C&#39; (call) command: int32 - number of arguments; byte - function name size; char[] - function name</li></ul></li></ul><h4>error codes</h4><ul><li>SGS_EBOUNDS: current stack frame was empty
</li><li>SGS_EINVAL: an unserializable topmost variable was found (function)
</li><li>SGS_EINPROC: unknown memory error</li></ul></div>
<div class='item'><a name='sgs-SerializeObject-function'></a><hr><h2>sgs_SerializeObject [function]</h2><h3>SGSRESULT sgs_SerializeObject( sgs_Context* C, int args, const char* func )</h3><h4>write the serialized code for an object&#39;s unserializing function</h4><h4>error codes</h4><ul><li>SGS_EINVAL: function name was too long (255 characters or more)
</li><li>SGS_EINPROC: function was used outside serialization interface function</li></ul></div>
<div class='item'><a name='sgs-Unserialize-function'></a><hr><h2>sgs_Unserialize [function]</h2><h3>SGSRESULT sgs_Unserialize( sgs_Context* C )</h3><h4>unserialize the topmost string variable of the current stack frame (run the binary recreation instruction stream)</h4><p>
<em class='notice-bgr'>Be mindful of the data sources you use - calls to any global function can be placed in the instruction stream.</em>
</p></div>
<div class='item'><a name='sgs-Assign-function'></a><hr><h2>sgs_Assign [function]</h2><h3>void sgs_Assign( sgs_Context* C, sgs_Variable* var_to, sgs_Variable* var_from )</h3><h4>release <code>var_to</code>, copy <code>var_from</code> to <code>var_to</code>, acquire the new value</h4></div>
<div class='item'><a name='sgs-ArithOp-function'></a><hr><h2>sgs_ArithOp [function]</h2><h3>SGSRESULT sgs_ArithOp( sgs_Context* C, sgs_Variable* out, sgs_Variable* A, sgs_Variable* B, int op )</h3><h4>perform the specified operation on variables A and B, returning the value on <code>out</code></h4><p>
<em class='notice-bgr'>this function prints errors, exactly like VM would (internally there are the same functions)</em>
</p><ul><li>this function can perform 5 operations, which are specified by passing the following values to `op`:
<ul><li>SGS_EOP_ADD: +
</li><li>SGS_EOP_SUB: - (binary)
</li><li>SGS_EOP_MUL: *
</li><li>SGS_EOP_DIV: /
</li><li>SGS_EOP_MOD: %
</li><li>SGS_EOP_NEGATE: - (unary, uses only `A`)</li></ul></li></ul><h4>error codes</h4><ul><li>SGS_ENOTSUP: operation not supported (invalid operation ID)
</li><li>SGS_EINVAL: specified arithmetic operation is not supported by the given set of arguments
</li><li>SGS_EINPROC: division by 0</li></ul></div>
<div class='item'><a name='sgs-IncDec-function'></a><hr><h2>sgs_IncDec [function]</h2><h3>SGSRESULT sgs_IncDec( SGS_CTX, sgs_Variable* out, sgs_Variable* A, int inc )</h3><h4>increment or decrement the specified variable <code>A</code> to the output <code>out</code></h4><p>
<em class='notice-bgr'>this function prints errors, exactly like VM would (internally there are the same functions)</em>
</p><ul><li>if inc is non-zero, variable is incremented; otherwise it is decremented</li></ul><h4>error codes</h4><ul><li>SGS_EINVAL: variable was not int or real</li></ul></div>
<div class='item'><a name='sgs-Compare-function'></a><hr><h2>sgs_Compare [function]</h2><h3>int sgs_Compare( sgs_Context* C, sgs_Variable* v1, sgs_Variable* v2 )</h3><h4>return the difference between variables, as int -1/0/1</h4></div>
<div class='item'><a name='sgs-EqualTypes-function'></a><hr><h2>sgs_EqualTypes [function]</h2><h3>SGSBOOL sgs_EqualTypes( sgs_Variable* v1, sgs_Variable* v2 )</h3><h4>return if types of both variables are exactly equal</h4><ul><li>both type variables and interface pointers (only if both variables are objects) are checked for equality</li></ul></div>
<div class='item'><a name='sgs-Get-functions'></a><hr><h2>sgs_Get*** [functions]</h2><h3>sgs_Bool sgs_GetBool( sgs_Context* C, sgs_StkIdx item )</h3><h3>sgs_Int sgs_GetInt( sgs_Context* C, sgs_StkIdx item )</h3><h3>sgs_Real sgs_GetReal( sgs_Context* C, sgs_StkIdx item )</h3><h3>void* sgs_GetPtr( sgs_Context* C, sgs_StkIdx item )</h3><h4>return an item from the current stack frame, converted to the specified type</h4><h3>sgs_Bool sgs_GetBoolP( sgs_Context* C, sgs_Variable* var )</h3><h3>sgs_Int sgs_GetIntP( sgs_Context* C, sgs_Variable* var )</h3><h3>sgs_Real sgs_GetRealP( sgs_Context* C, sgs_Variable* var )</h3><h3>void* sgs_GetPtrP( sgs_Context* C, sgs_Variable* var )</h3><h4>return the value of the specified variable, converted to the specified type</h4><ul><li>if <code>item</code> is out of bounds, 0 is returned</li></ul></div>
<div class='item'><a name='sgs-To-functions'></a><hr><h2>sgs_To*** [functions]</h2><h3>sgs_Bool sgs_ToBool( sgs_Context* C, sgs_StkIdx item )</h3><h3>sgs_Int sgs_ToInt( sgs_Context* C, sgs_StkIdx item )</h3><h3>sgs_Real sgs_ToReal( sgs_Context* C, sgs_StkIdx item )</h3><h3>void* sgs_ToPtr( sgs_Context* C, sgs_StkIdx item )</h3><h4>return an item from the current stack frame, converted in-place to the specified type</h4><h3>sgs_Bool sgs_ToBoolP( sgs_Context* C, sgs_Variable* var )</h3><h3>sgs_Int sgs_ToIntP( sgs_Context* C, sgs_Variable* var )</h3><h3>sgs_Real sgs_ToRealP( sgs_Context* C, sgs_Variable* var )</h3><h3>void* sgs_GetPtrP( sgs_Context* C, sgs_Variable* var )</h3><h4>return the value of the specified variable, converted in-place to the specified type</h4><ul><li>in ***P functions previous variable is properly released before conversion takes place and reacquired afterwards
</li><li>in-place conversion means that if the function succeeds, the variable will have the requested type</li></ul></div>
<div class='item'><a name='sgs-ToStringBuf-Fast-P-functions'></a><hr><h2>sgs_ToStringBuf(Fast)(P) [functions]</h2><h3>char* sgs_ToStringBuf( sgs_Context* C, sgs_StkIdx item, sgs_SizeVal* outsize )</h3><h3>char* sgs_ToStringBufFast( sgs_Context* C, sgs_StkIdx item, sgs_SizeVal* outsize )</h3><h4>return an item from the current stack frame, converted in-place to string</h4><h3>char* sgs_ToStringBufP( sgs_Context* C, sgs_Variable* var, sgs_SizeVal* outsize )</h3><h3>char* sgs_ToStringBufFastP( sgs_Context* C, sgs_Variable* var, sgs_SizeVal* outsize )</h3><h4>return the value of the specified variable, converted in-place to string</h4><ul><li>in ***P functions previous variable is properly released before conversion takes place and reacquired afterwards
</li><li>if <code>item</code> is out of bounds or conversion fails, NULL is returned
</li><li>the &#39;fast&#39; version uses type name conversion on object, instead of string conversion - this is to avoid recursion while generating a short description about object contents
</li><li>length of string is returned to the value that <code>outsize</code> points to</li></ul></div>
<div class='item'><a name='sgs-ToString-Fast-P-function-aliases'></a><hr><h2>sgs_ToString(Fast)(P) [function aliases]</h2><h3>char* sgs_ToString( sgs_Context* C, sgs_StkIdx item )</h3><h3>char* sgs_ToStringFast( sgs_Context* C, sgs_StkIdx item )</h3><h4>return an item from the current stack frame, converted in-place to string</h4><h3>char* sgs_ToStringP( sgs_Context* C, sgs_Variable* var )</h3><h3>char* sgs_ToStringFastP( sgs_Context* C, sgs_Variable* var )</h3><h4>return the value of the specified variable, converted in-place to string</h4><ul><li>in ***P functions previous variable is properly released before conversion takes place and reacquired afterwards
</li><li>these are aliases of <a href="#sgs-ToStringBuf-Fast-P-functions">sgs_ToStringBuf(Fast)(P)</a> with the third argument set to NULL</li></ul></div>
<div class='item'><a name='sgs-RegisterType-function'></a><hr><h2>sgs_RegisterType [function]</h2><h3>SGSRESULT sgs_RegisterType( sgs_Context* C, const char* name, sgs_ObjInterface* iface )</h3><h4>register a type interface by mapping it to a name</h4><h4>error codes</h4><ul><li>SGS_EINVAL: iface was NULL
</li><li>SGS_EINPROC: the name is already used</li></ul></div>
<div class='item'><a name='sgs-UnregisterType-function'></a><hr><h2>sgs_UnregisterType [function]</h2><h3>SGSRESULT sgs_UnregisterType( sgs_Context* C, const char* name )</h3><h4>unregister a type interface by its name</h4><h4>error codes</h4><ul><li>SGS_ENOTFND: the specified type name was not mapped to any interface</li></ul></div>
<div class='item'><a name='sgs-FindType-function'></a><hr><h2>sgs_FindType [function]</h2><h3>sgs_ObjInterface* sgs_FindType( sgs_Context* C, const char* name )</h3><h4>finds the type interface that is mapped to the specified name or returns NULL if that type name cannot be found</h4></div>
<div class='item'><a name='sgs-IsObject-P-functions'></a><hr><h2>sgs_IsObject(P) [functions]</h2><h3>SGSBOOL sgs_IsObject( sgs_Context* C, sgs_StkIdx item, sgs_ObjInterface* iface )</h3><h4>returns whether the specified stack item <code>item</code> is an object with the interface pointer <code>iface</code></h4><ul><li>if <code>item</code> is out of bounds or not an object or doesn&#39;t have the specified interface, 0 is returned</li></ul><h3>SGSBOOL sgs_IsObjectP( sgs_Context* C, sgs_Variable* var, sgs_ObjInterface* iface )</h3><h4>returns whether the specified variable <code>var</code> is an object with the interface pointer <code>iface</code></h4></div>
<div class='item'><a name='sgs-IsType-P-function-aliases'></a><hr><h2>sgs_IsType(P) [function aliases]</h2><h3>SGSBOOL sgs_IsType( sgs_Context* C, sgs_StkIdx item, const char* type )</h3><h4>returns whether the specified stack item <code>item</code> is an object of the specified type</h4><ul><li>alias of <code>sgs_IsObject( C, item, sgs_FindType( C, type ) )</code></li></ul><h3>SGSBOOL sgs_IsTypeP( sgs_Context* C, sgs_Variable* var, const char* type )</h3><h4>returns whether the specified variable <code>var</code> is an object of the specified type</h4><ul><li>alias of <code>sgs_IsObjectP( C, var, sgs_FindType( C, type ) )</code></li></ul></div>
<div class='item'><a name='sgs-IsCallable-P-functions'></a><hr><h2>sgs_IsCallable(P) [functions]</h2><h3>SGSBOOL sgs_IsCallable( sgs_Context* C, sgs_StkIdx item )</h3><h4>returns whether the specified stack item <code>item</code> is callable</h4><ul><li>if <code>item</code> is out of bounds, 0 is returned</li></ul><h3>SGSBOOL sgs_IsCallableP( sgs_Context* C, sgs_Variable* var )</h3><h4>returns whether the specified variable <code>var</code> is callable</h4><ul><li>callable variables are either SGS functions or C functions or objects with the CALL interface implemented</li></ul></div>
<div class='item'><a name='sgs-IsNumericString-function'></a><hr><h2>sgs_IsNumericString [function]</h2><h3>SGSBOOL sgs_IsNumericString( const char* str, sgs_SizeVal size )</h3><h4>checks if the string is convertible to an integer/real</h4><ul><li>more info at @&lt;Numeric string parsing rules&gt;</li></ul></div>
<div class='item'><a name='sgs-Parse-functions'></a><hr><h2>sgs_Parse*** [functions]</h2><h3>SGSBOOL sgs_ParseBool( sgs_Context* C, sgs_StkIdx item, sgs_Bool* out )</h3><h3>SGSBOOL sgs_ParseInt( sgs_Context* C, sgs_StkIdx item, sgs_Int* out )</h3><h3>SGSBOOL sgs_ParseReal( sgs_Context* C, sgs_StkIdx item, sgs_Real* out )</h3><h3>SGSBOOL sgs_ParseString( sgs_Context* C, sgs_StkIdx item, char** out, sgs_SizeVal* size )</h3><h3>SGSBOOL sgs_ParseObjectPtr( sgs_Context* C, sgs_StkIdx item, sgs_ObjInterface* iface, sgs_VarObj** out, int strict )</h3><h3>SGSBOOL sgs_ParsePtr( sgs_Context* C, sgs_StkIdx item, void** out )</h3><h4>attempts to parse the specified item of the current stack frame, returning whether parsing was successful</h4><h3>SGSBOOL sgs_ParseBoolP( sgs_Context* C, sgs_Variable* var, sgs_Bool* out )</h3><h3>SGSBOOL sgs_ParseIntP( sgs_Context* C, sgs_Variable* var, sgs_Int* out )</h3><h3>SGSBOOL sgs_ParseRealP( sgs_Context* C, sgs_Variable* var, sgs_Real* out )</h3><h3>SGSBOOL sgs_ParseStringP( sgs_Context* C, sgs_Variable* var, char** out, sgs_SizeVal* size )</h3><h3>SGSBOOL sgs_ParseObjectPtrP( sgs_Context* C, sgs_Variable* var, sgs_ObjInterface* iface, sgs_VarObj** out, int strict )</h3><h3>SGSBOOL sgs_ParsePtrP( sgs_Context* C, sgs_Variable* var, void** out )</h3><h4>attempts to parse the specified varuabke, returning whether parsing was successful</h4><ul><li>the parsing rules:
<ul><li>for `sgs_ParsePtr`/`sgs_ParsePtrP`, unlike every other parsing function, only null/ptr types are considered valid
</li><li>for `sgs_ParseObjectPtr`/`sgs_ParseObjectPtrP`, only objects with the specified interface <code>iface</code> are valid unless strict = 0, then <code>null</code> is valid too
</li><li>if <code>item</code> is out of bounds, fail
</li><li>if item has the type <code>null</code>, <code>func</code> or <code>cfunc</code>, fail
</li><li>if item is of <code>string</code> type and <code>bool</code> is requested, fail
</li><li>if item is of <code>string</code> type and `int`/`real` is requested, try to convert
</li><li>everything else succeeds</li></ul></li></ul></div>
<div class='item'><a name='sgs-PushIterator-P-functions'></a><hr><h2>sgs_PushIterator(P) [functions]</h2><h3>SGSRESULT sgs_PushIterator( sgs_Context* C, sgs_StkIdx item )</h3><h4>create and push an iterator from the specified item of the current stack frame</h4><h3>SGSRESULT sgs_PushIteratorP( sgs_Context* C, sgs_Variable* var )</h3><h4>create and push an iterator from the specified variable</h4><ul><li>see <a href="#Iterator-system">Iterator system</a> for more info about iterators</li></ul><h4>error codes</h4><ul><li>SGS_EBOUNDS: index out of bounds
</li><li>SGS_ENOTSUP: variable type does not support iterators (only objects support them)
</li><li>SGS_ENOTFND: object type does not support iterators (iterator conversion request failed)
</li><li>any other code can be returned by the object</li></ul></div>
<div class='item'><a name='sgs-GetIterator-P-functions'></a><hr><h2>sgs_GetIterator(P) [functions]</h2><h3>SGSRESULT sgs_GetIterator( sgs_Context* C, sgs_StkIdx item, sgs_Variable* out )</h3><h4>create an iterator from the specified item of the current stack frame</h4><h3>SGSRESULT sgs_GetIteratorP( sgs_Context* C, sgs_Variable* var, sgs_Variable* out )</h3><h4>create an iterator from the specified variable</h4><ul><li>see <a href="#Iterator-system">Iterator system</a> for more info about iterators</li></ul><h4>error codes</h4><ul><li>SGS_EBOUNDS: index out of bounds
</li><li>SGS_ENOTSUP: variable type does not support iterators (only objects support them)
</li><li>SGS_ENOTFND: object type does not support iterators (iterator conversion request failed)
</li><li>any other code can be returned by the object</li></ul></div>
<div class='item'><a name='sgs-IterAdvance-P-functions'></a><hr><h2>sgs_IterAdvance(P) [functions]</h2><h3>SGSMIXED sgs_IterAdvance( sgs_Context* C, sgs_StkIdx item )</h3><h3>SGSMIXED sgs_IterAdvanceP( sgs_Context* C, sgs_Variable* var )</h3><h4>advance the iterator to the next position, returning if the current position is still in range or an error code on failure</h4><ul><li>this is the way it&#39;s expected to be usually called: <code>while( sgs_IterAdvance( C, item ) &gt; 0 ){ ... sgs_IterPushData ... }</code>
</li><li>see <a href="#Iterator-system">Iterator system</a> for more info about iterators</li></ul><h4>error codes</h4><ul><li>SGS_EBOUNDS: index out of bounds
</li><li>SGS_EINVAL: iterated object changed in a way that iterator does not support (currently a size equality test)
</li><li>SGS_EINPROC: internal failure in the object interface</li></ul></div>
<div class='item'><a name='sgs-IterPushData-P-functions'></a><hr><h2>sgs_IterPushData(P) [functions]</h2><h3>SGSRESULT sgs_IterPushData( sgs_Context* C, sgs_StkIdx item, int key, int value )</h3><h3>SGSRESULT sgs_IterPushDataP( sgs_Context* C, sgs_Variable* var, int key, int value )</h3><h4>load and push data associated with the current position</h4><ul><li><code>key</code> and <code>value</code> are booleans that specify if the respective value should be returned
</li><li>first the key is pushed, then the value
</li><li>if neither <code>key</code> nor <code>value</code> are expected, the call succeeds and doesn&#39;t push anything
</li><li>see <a href="#Iterator-system">Iterator system</a> for more info about iterators</li></ul><h4>error codes</h4><ul><li>SGS_EBOUNDS: index out of bounds
</li><li>SGS_EINVAL: iterated object changed in a way that iterator does not support
</li><li>SGS_EINPROC: internal failure in the object interface</li></ul></div>
<div class='item'><a name='sgs-IterGetData-P-functions'></a><hr><h2>sgs_IterGetData(P) [functions]</h2><h3>SGSRESULT sgs_IterGetData( sgs_Context* C, sgs_StkIdx item, sgs_Variable* key, sgs_Variable* value )</h3><h3>SGSRESULT sgs_IterGetDataP( sgs_Context* C, sgs_Variable* var, sgs_Variable* key, sgs_Variable* value )</h3><h4>load data associated with the current position</h4><ul><li><code>key</code> and <code>value</code> are variables where the data is written if the pointer is not NULL
</li><li>if neither <code>key</code> nor <code>value</code> are expected, the call succeeds and doesn&#39;t retrieve anything
</li><li>see <a href="#Iterator-system">Iterator system</a> for more info about iterators</li></ul><h4>error codes</h4><ul><li>SGS_EBOUNDS: index out of bounds
</li><li>SGS_EINVAL: iterated object changed in a way that iterator does not support
</li><li>SGS_EINPROC: internal failure in the object interface</li></ul></div>
<div class='item'><a name='sgs-ArraySize-P-functions'></a><hr><h2>sgs_ArraySize(P) [functions]</h2><h3>SGSMIXED sgs_ArraySize( sgs_Context* C, sgs_StkIdx item )</h3><h3>SGSMIXED sgs_ArraySizeP( sgs_Context* C, sgs_Variable* var )</h3><h4>check if the specified stack item or variable is an array and return its size or error code on failure</h4><h4>error codes</h4><ul><li>SGS_EINVAL: index out of bounds / variable was not an array</li></ul></div>
<div class='item'><a name='sgs-StackSize-function'></a><hr><h2>sgs_StackSize [function]</h2><h3>sgs_StkIdx sgs_StackSize( sgs_Context* C )</h3><h4>return the size of the current stack frame</h4></div>
<div class='item'><a name='sgs-SetStackSize-function'></a><hr><h2>sgs_SetStackSize [function]</h2><h3>SGSRESULT sgs_SetStackSize( sgs_Context* C, sgs_StkIdx size )</h3><h4>resizes the current stack frame to fit the specified amount of items</h4><ul><li>if the current number of items is less than needed, stack is null-variable-padded at the end
</li><li>if the current number of items is more than needed, the unnecessary amount of items is popped</li></ul></div>
<div class='item'><a name='sgs-AbsIndex-function'></a><hr><h2>sgs_AbsIndex [function]</h2><h3>sgs_StkIdx sgs_AbsIndex( sgs_Context* C, sgs_StkIdx item )</h3><h4>attempt to convert a negative stack index into a positive one</h4><p>
<em class='notice-bgr'>this function can still return negative values - make sure that valid values are passed to it or check if the returned value is in the range [ 0; stack_frame_size )</em>
</p></div>
<div class='item'><a name='sgs-IsValidIndex-function'></a><hr><h2>sgs_IsValidIndex [function]</h2><h3>SGSBOOL sgs_IsValidIndex( sgs_Context* C, sgs_StkIdx item )</h3><h4>return whether the specified stack index points to an item in the current stack frame</h4><ul><li>both positive (first = 0) and negative (last = -1) indices are supported</li></ul></div>
<div class='item'><a name='sgs-PeekStackItem-function'></a><hr><h2>sgs_PeekStackItem [function]</h2><h3>SGSBOOL sgs_PeekStackItem( sgs_Context* C, sgs_StkIdx item, sgs_Variable* out )</h3><h4>write the data of the specified stack variable if the index is valid</h4><p>
<em class='notice-bgr'>this function does not acquire the variable and thus CANNOT be used in functions that modify it, such as <a href="#sgs-Assign-function">sgs_Assign</a> or <a href="#sgs-To-functions">sgs_To***;</a> to acquire variable on retrieval, see <a href="#sgs-GetStackItem-function">sgs_GetStackItem</a> or <a href="#sgs-Acquire-Array-function">sgs_Acquire</a></em>
</p><ul><li>function returns whether the stack index was valid</li></ul></div>
<div class='item'><a name='sgs-GetStackItem-function'></a><hr><h2>sgs_GetStackItem [function]</h2><h3>SGSBOOL sgs_GetStackItem( sgs_Context* C, sgs_StkIdx item, sgs_Variable* out )</h3><h4>write the data of the specified stack variable and increments its reference count if the index is valid</h4><ul><li>function returns whether the stack index was valid</li></ul></div>
<div class='item'><a name='sgs-SetStackItem-function'></a><hr><h2>sgs_SetStackItem [function]</h2><h3>SGSRESULT sgs_SetStackItem( sgs_Context* C, sgs_StkIdx item, sgs_Variable* val )</h3><h4>copy the specified variable to the specified position in stack</h4><h4>error codes</h4><ul><li>SGS_EINVAL: invalid variable type detected (corrupted data)
</li><li>SGS_EBOUNDS: index out of bounds</li></ul></div>
<div class='item'><a name='sgs-ItemType-function'></a><hr><h2>sgs_ItemType [function]</h2><h3>uint32_t sgs_ItemType( sgs_Context* C, sgs_StkIdx item )</h3><h4>return the type ID of the specified stack item</h4><ul><li>return value will be equal to one of the SGS_VT_* macro
</li><li>if index is invalid, return value will be 0 (SGS_VT_NULL)</li></ul></div>
<div class='item'><a name='sgs-Acquire-Array-function'></a><hr><h2>sgs_Acquire(Array) [function]</h2><h3>void sgs_Acquire( sgs_Context* C, sgs_Variable* var )</h3><h3>void sgs_AcquireArray( sgs_Context* C, sgs_Variable* var, sgs_SizeVal count )</h3><h4>increment the reference count of the specified variables (if they count references)</h4></div>
<div class='item'><a name='sgs-Release-Array-function'></a><hr><h2>sgs_Release(Array) [function]</h2><h3>void sgs_Release( sgs_Context* C, sgs_Variable* var )</h3><h3>void sgs_ReleaseArray( sgs_Context* C, sgs_Variable* var, sgs_SizeVal count )</h3><h4>decrement and possibly deallocate the reference count of the specified variables (if they count references)</h4><ul><li>works differently while GC is running: doesn&#39;t delete objects of same context in destructor</li></ul></div>
<div class='item'><a name='sgs-GCMark-Array-function'></a><hr><h2>sgs_GCMark(Array) [function]</h2><h3>SGSRESULT sgs_GCMark( sgs_Context* C, sgs_Variable* var )</h3><h3>SGSRESULT sgs_GCMarkArray( sgs_Context* C, sgs_Variable* var, sgs_SizeVal count )</h3><h4>mark the specified variables as reachable for the garbage collector</h4><ul><li>to be called in the GCMARK object callback</li></ul></div>
<div class='item'><a name='sgs-ObjAcquire-function'></a><hr><h2>sgs_ObjAcquire [function]</h2><h3>void sgs_ObjAcquire( sgs_Context* C, sgs_VarObj* obj )</h3><h4>increment reference count of the specified object</h4></div>
<div class='item'><a name='sgs-ObjRelease-function'></a><hr><h2>sgs_ObjRelease [function]</h2><h3>void sgs_ObjRelease( sgs_Context* C, sgs_VarObj* obj )</h3><h4>decrement reference count and possibly delete the specified object</h4></div>
<div class='item'><a name='sgs-ObjGCMark-function'></a><hr><h2>sgs_ObjGCMark [function]</h2><h3>SGSRESULT sgs_ObjGCMark( sgs_Context* C, sgs_VarObj* obj )</h3><h4>mark the specified object as accessible to avoid its destruction by the <a href="#Garbage-collection-system">Garbage collection system</a></h4><ul><li>to be called in the GCMARK object callback</li></ul></div>
<div class='item'><a name='sgs-ObjCallDtor-function'></a><hr><h2>sgs_ObjCallDtor [function]</h2><h3>void sgs_ObjCallDtor( sgs_Context* C, sgs_VarObj* obj )</h3><h4>call the DESTRUCT object callback</h4><ul><li>this function is to be used in cases where objects are owned by a single entity but have handles all over the place - calling this function would not delete the object but would free its resources, thus leaving handles intact, with their states updated</li></ul></div>
<div class='item'><a name='sgs-GetStringPtr-P-functions'></a><hr><h2>sgs_GetStringPtr(P) [functions]</h2><h3>char* sgs_GetStringPtr( sgs_Context* C, sgs_StkIdx item )</h3><h4>return the string data pointer of the specified stack item</h4><h3>char* sgs_GetStringPtrP( sgs_Context* C, sgs_Variable* var )</h3><h4>return the string data pointer of the specified variable</h4><ul><li>if item is out of bounds or not a string, NULL will be returned and ...
<ul><li>in a debug build, one of the BreakIf macros will go off and stop the action</li></ul></li></ul></div>
<div class='item'><a name='sgs-GetStringSize-P-functions'></a><hr><h2>sgs_GetStringSize(P) [functions]</h2><h3>sgs_SizeVal sgs_GetStringSize( sgs_Context* C, sgs_StkIdx item )</h3><h4>return the string size of the specified stack item</h4><h3>sgs_SizeVal sgs_GetStringSizeP( sgs_Context* C, sgs_Variable* var )</h3><h4>return the string size of the specified variable</h4><ul><li>if item is out of bounds or not a string, 0 will be returned and ...
<ul><li>in a debug build, one of the BreakIf macros will go off and stop the action</li></ul></li></ul></div>
<div class='item'><a name='sgs-GetObjectStruct-P-functions'></a><hr><h2>sgs_GetObjectStruct(P) [functions]</h2><h3>sgs_VarObj* sgs_GetObjectStruct( sgs_Context* C, sgs_StkIdx item )</h3><h4>return the object&#39;s internal data pointer of the specified stack item</h4><h3>sgs_VarObj* sgs_GetObjectStructP( sgs_Context* C, sgs_Variable* var )</h3><h4>return the object&#39;s internal data pointer of the specified variable</h4><ul><li>if item is out of bounds or not an object, NULL will be returned and ...
<ul><li>in a debug build, one of the BreakIf macros will go off and stop the action</li></ul></li></ul></div>
<div class='item'><a name='sgs-GetObjectData-P-functions'></a><hr><h2>sgs_GetObjectData(P) [functions]</h2><h3>void* sgs_GetObjectData( sgs_Context* C, sgs_StkIdx item )</h3><h4>return the object data pointer of the specified stack item</h4><h3>void* sgs_GetObjectDataP( sgs_Context* C, sgs_Variable* var )</h3><h4>return the object data pointer of the specified variable</h4><ul><li>if item is out of bounds or not an object, NULL will be returned and ...
<ul><li>in a debug build, one of the BreakIf macros will go off and stop the action</li></ul></li></ul></div>
<div class='item'><a name='sgs-GetObjectIface-P-functions'></a><hr><h2>sgs_GetObjectIface(P) [functions]</h2><h3>sgs_ObjInterface* sgs_GetObjectIface( sgs_Context* C, sgs_StkIdx item )</h3><h4>return the object interface pointer of the specified stack item</h4><h3>sgs_ObjInterface* sgs_GetObjectIfaceP( sgs_Context* C, sgs_Variable* var )</h3><h4>return the object interface pointer of the specified variable</h4><ul><li>if item is out of bounds or not an object, NULL will be returned and ...
<ul><li>in a debug build, one of the BreakIf macros will go off and stop the action</li></ul></li></ul></div>
<div class='item'><a name='sgs-SetObjectData-P-functions'></a><hr><h2>sgs_SetObjectData(P) [functions]</h2><h3>int sgs_SetObjectData( sgs_Context* C, sgs_StkIdx item, void* data )</h3><h4>set the object data pointer of the specified stack item</h4><h3>int sgs_SetObjectDataP( sgs_Context* C, sgs_Variable* var, void* data )</h3><h4>set the object data pointer of the specified variable</h4><ul><li>if item is out of bounds or not an object, pointer will not be set, 0 will be returned and ...
<ul><li>in a debug build, one of the BreakIf macros will go off and stop the action</li></ul></li></ul></div>
<div class='item'><a name='sgs-SetObjectIface-P-functions'></a><hr><h2>sgs_SetObjectIface(P) [functions]</h2><h3>int sgs_SetObjectIface( sgs_Context* C, sgs_StkIdx item, sgs_ObjInterface* iface )</h3><h4>set the object interface pointer of the specified stack item</h4><h3>int sgs_SetObjectIfaceP( sgs_Context* C, sgs_Variable* var, sgs_ObjInterface* iface )</h3><h4>set the object interface pointer of the specified variable</h4><ul><li>if item is out of bounds or not an object, pointer will not be set, 0 will be returned and ...
<ul><li>in a debug build, one of the BreakIf macros will go off and stop the action</li></ul></li></ul></div>
<div class='item'><a name='sgs-StdOutputFunc-function'></a><hr><h2>sgs_StdOutputFunc [function]</h2><h3>void sgs_StdOutputFunc( void* userdata, sgs_Context* C, const void* ptr, size_t size )</h3><h4>standard output function assumes userdata to be FILE* type and writes the passed buffer to it</h4></div>
<div class='item'><a name='sgs-GetOutputFunc-function'></a><hr><h2>sgs_GetOutputFunc [function]</h2><h3>void sgs_GetOutputFunc( sgs_Context* C, sgs_OutputFunc* outfunc, void** outuserdata )</h3><h4>retrieves the currently set output function</h4><ul><li>validity of the returned function pointer is assured as long as engine internals are not touched anywhere</li></ul></div>
<div class='item'><a name='sgs-SetOutputFunc-function'></a><hr><h2>sgs_SetOutputFunc [function]</h2><h3>void sgs_SetOutputFunc( sgs_Context* C, sgs_OutputFunc func, void* userdata )</h3><h4>sets the function used in &#39;print&#39; function</h4><ul><li>default output function can be set by passing SGSOUTPUTFN_DEFAULT to func with userdata as FILE*, allocated using the same C runtime that SGScript uses
</li><li>default implementation - <a href="#sgs-StdOutputFunc-function">sgs_StdOutputFunc</a> - copies data to FILE* stream, specified in userdata
<ul><li>to use this function with non-default (stderr) stream, pass it explicity due to the possibility of having different runtime libraries linked to different binaries</li></ul></li></ul></div>
<div class='item'><a name='sgs-Write-function'></a><hr><h2>sgs_Write [function]</h2><h3>void sgs_Write( sgs_Context* C, const void* ptr, sgs_SizeVal size )</h3><h4>passes the specified data to the output function</h4><ul><li>the default output function prints the data to the specified FILE* stream (stdout by default)</li></ul></div>
<div class='item'><a name='sgs-WriteStr-function-alias'></a><hr><h2>sgs_WriteStr [function alias]</h2><h3>void sgs_WriteStr( sgs_Context* C, const char* str )</h3><h4>passes the specified string to the output function</h4><ul><li>alias to <code>sgs_Write( C, str, SGS_STRINGLENGTHFUNC( str ) )</code></li></ul></div>
<div class='item'><a name='sgs-Writef-function'></a><hr><h2>sgs_Writef [function]</h2><h3>void sgs_Writef( sgs_Context* C, const char* what, ... )</h3><h4>passes the arguments through a vsprintf-like function to expand the data and passes it to the specified output function</h4><ul><li>printf rules apply here</li></ul></div>
<div class='item'><a name='sgs-StdMsgFunc-NoAbort-functions'></a><hr><h2>sgs_StdMsgFunc(_NoAbort) [functions]</h2><h3>void sgs_StdMsgFunc( void* ctx, sgs_Context* C, int type, const char* msg )</h3><h3>void sgs_StdMsgFunc_NoAbort( void* ctx, sgs_Context* C, int type, const char* msg )</h3><h4>writes error info with <a href="#sgs-WriteErrorInfo-function">sgs_WriteErrorInfo</a> to userdata with fprintf, assuming userdata is FILE*</h4></div>
<div class='item'><a name='sgs-GetMsgFunc-function'></a><hr><h2>sgs_GetMsgFunc [function]</h2><h3>void sgs_GetMsgFunc( sgs_Context* C, sgs_MsgFunc* outfunc, void** outuserdata )</h3><h4>retrieves the currently set messaging function</h4><ul><li>info about the system is at the <a href="#Messaging-system">Messaging system</a> page
</li><li>validity of the returned function pointer is assured as long as engine internals are not touched anywhere</li></ul></div>
<div class='item'><a name='sgs-SetMsgFunc-function'></a><hr><h2>sgs_SetMsgFunc [function]</h2><h3>void sgs_SetMsgFunc( sgs_Context* C, sgs_MsgFunc func, void* userdata )</h3><h4>sets the function that handles and prints messages (more commonly, warnings and errors), while still being physically in that context</h4><ul><li>info about the system is at the <a href="#Messaging-system">Messaging system</a> page
</li><li>both subtypes of the default messaging function can be set by passing these flags for <code>func</code> with userdata as FILE*, allocated using the same C runtime that SGScript uses
<ul><li>&#39;SGSMSGFN_DEFAULT&#39; - default behavior (write stack frame, write error, abort on SGS_ERROR)
</li><li>&#39;SGSMSGFN_DEFAULT_NOABORT&#39; - default behavior without the abort-on-errors feature
</li></ul><li>default implementations - <a href="#sgs-StdMsgFunc-NoAbort-functions">sgs_StdMsgFunc(_NoAbort)</a> writes error and stack trace to FILE* stream, specified in userdata
<ul><li>to use these functions with non-default (stderr) stream, pass them explicity due to the possibility of having different runtime libraries linked to different binaries</li></ul></li></ul></div>
<div class='item'><a name='sgs-Msg-function'></a><hr><h2>sgs_Msg [function]</h2><h3>int sgs_Msg( sgs_Context* C, int type, const char* what, ... )</h3><h4>prepares and prints the error specified</h4><ul><li>info about the system is at the <a href="#Messaging-system">Messaging system</a> page
</li><li><code>type</code> is the output code (SGS_WARNING, SGS_ERROR etc.)
</li><li><code>what</code> is the error text
<ul><li>additional function name prefix can be specified with <a href="#sgs-FuncName-function">sgs_FuncName</a> or the SGSFN/SGSBASEFN macros
</li></ul><li><code>what</code>, the function name prefix (if set) and the variable arguments are passed to a vsprintf-like function so printf syntax rules apply
</li><li>function always returns 0 to be compatible with most error handling cases in C functions: &quot;return sgs_Msg( ... );&quot;</li></ul></div>
<div class='item'><a name='sgs-WriteErrorInfo-function'></a><hr><h2>sgs_WriteErrorInfo [function]</h2><h3>void sgs_WriteErrorInfo( sgs_Context* C, int flags, sgs_ErrorOutputFunc func, void* ctx, int type, const char* msg )</h3><h4>writes error info using the error output function specified</h4><p>
the error output function type has the following definition:
</p><pre>typedef int (*sgs_ErrorOutputFunc) ( void*, const char*, ... );</pre><ul><li>error output function has the same type as fprintf and sgs_Writef
</li><li><code>type</code> and <code>msg</code> should be passed from the messaging callback - they are the same type number / error message
</li><li><code>flags</code> should be one of SGS_ERRORINFO_STACK, SGS_ERRORINFO_ERROR, SGS_ERRORINFO_FULL
<ul><li>SGS_ERRORINFO_STACK only writes the stack frame
</li><li>SGS_ERRORINFO_ERROR only writes the error message
</li><li>SGS_ERRORINFO_FULL writes both</li></ul></li></ul></div>
<div class='item'><a name='sgs-PushErrorInfo-function'></a><hr><h2>sgs_PushErrorInfo [function]</h2><h3>void sgs_PushErrorInfo( sgs_Context* C, int flags, int type, const char* msg )</h3><h4>pushes a string generated from error info</h4><ul><li><code>type</code> and <code>msg</code> should be passed from the messaging callback - they are the same type number / error message
</li><li><code>flags</code> should be one of SGS_ERRORINFO_STACK, SGS_ERRORINFO_ERROR, SGS_ERRORINFO_FULL
<ul><li>SGS_ERRORINFO_STACK only writes the stack frame
</li><li>SGS_ERRORINFO_ERROR only writes the error message
</li><li>SGS_ERRORINFO_FULL writes both</li></ul></li></ul></div>
<div class='item'><a name='sgs-HasFuncName-function'></a><hr><h2>sgs_HasFuncName [function]</h2><h3>int sgs_HasFuncName( sgs_Context* C )</h3><h4>checks if the currently executed function (last stack frame) has a name literal set</h4></div>
<div class='item'><a name='sgs-FuncName-function'></a><hr><h2>sgs_FuncName [function]</h2><h3>void sgs_FuncName( sgs_Context* C, const char* fnliteral )</h3><h4>sets the function name string for the currently executed function (last stack frame)</h4><ul><li>the argument is expected to stay alive for the duration of the function call
<ul><li>this makes string literals safe for the call, everything else should be avoided</li></ul></li></ul></div>
<div class='item'><a name='SGSFN-function-alias'></a><hr><h2>SGSFN [function alias]</h2><h3>void SGSFN( const char* fnliteral )</h3><h4>sets the function name string, more info at <a href="#sgs-FuncName-function">sgs_FuncName</a></h4><ul><li>alias for <code>sgs_FuncName( &lt;implicit&gt; C, fnliteral )</code></li></ul></div>
<div class='item'><a name='SGSBASEFN-function-alias'></a><hr><h2>SGSBASEFN [function alias]</h2><h3>void SGSBASEFN( const char* fnliteral )</h3><h4>sets the function name string if it hasn&#39;t already been set for the function</h4><ul><li>alias for <code>if( !sgs_HasFuncName( &lt;implicit&gt; C ) ) sgs_FuncName( &lt;implicit&gt; C, x )</code></li></ul></div>
<div class='item'><a name='sgs-SetHookFunc-function'></a><hr><h2>sgs_SetHookFunc [function]</h2><h3>void sgs_SetHookFunc( sgs_Context* C, sgs_HookFunc func, void* ctx )</h3><h4>sets the hook function and user data pointer</h4><ul><li>hook function is called on function entry, exit and instruction change events
</li><li>setting a new hook function disables the one that was set before (if any)</li></ul></div>
<div class='item'><a name='sgs-GetHookFunc-function'></a><hr><h2>sgs_GetHookFunc [function]</h2><h3>SGSBOOL sgs_GetHookFunc( sgs_Context* C, sgs_HookFunc* outfunc, void** outctx )</h3><h4>writes the hook function and user data pointer that was set (if any), returns whether anything was written</h4></div>
<div class='item'><a name='sgs-DefaultMemFunc-function'></a><hr><h2>sgs_DefaultMemFunc [function]</h2><h3>void* sgs_DefaultMemFunc( void* userdata, void* ptr, size_t size )</h3><h4>the default memory allocation function</h4><p>
expected behavior: same as for <a href="#sgs-Memory-function">sgs_Memory</a>
</p><p>
sample implementation (same as in sgscript.h):
</p><pre>if( ptr &amp;&amp; size ) return realloc( ptr, size );
else if( size )   return malloc( size );
if( ptr )         free( ptr );
return NULL;</pre></div>
<div class='item'><a name='sgs-Memory-function'></a><hr><h2>sgs_Memory [function]</h2><h3>void sgs_Memory( sgs_Context* C, void* ptr, size_t size )</h3><h4>allocates and frees memory, as specified in arguments</h4><ul><li>there are four possible cases that are handled by the function:
<ul><li><code>ptr</code> != NULL, <code>size</code> != 0: <code>ptr</code> is reallocated with new size, keeping as much data as possible, new block of memory is returned
</li><li><code>ptr</code> != NULL, <code>size</code> == 0: <code>ptr</code> is freed, NULL is returned
</li><li><code>ptr</code> == NULL, <code>size</code> != 0: a new block of memory is allocated and returned
</li><li><code>ptr</code> == NULL, <code>size</code> == 0: nothing is done, NULL is returned</li></ul></li></ul></div>
<div class='item'><a name='Memory-allocation-macros-macros'></a><hr><h2>Memory allocation macros [macros]</h2><h3>Memory allocation macros</h3><h4>these macros allow slightly simplified handling of memory</h4><ul><li>`sgs_Malloc( C, size )`: allocates the memory (alias to `sgs_Memory( C, NULL, size )`)
</li><li>`sgs_Free( C, ptr )`: frees the memory (alias to `sgs_Memory( C, ptr, 0 )`)
</li><li>sgs_Realloc: alias to sgs_Memory
</li><li>the following macros expect that the variable sgs_Context* C is in the scope
<ul><li>`sgs_Alloc( what )`: allocates enough memory to fit the specified type <code>what</code>
</li><li>`sgs_Alloc_n( what, n )`: allocates enough memory to fit <code>n</code> instances of the specified type <code>what</code>
</li><li>`sgs_Alloc_a( what, app )`: allocates enough memory to fit the specified type <code>what</code> and <code>app</code> more bytes
</li><li>`sgs_Dealloc( ptr )`: frees the memory
</li></ul><li>all of these functions, including sgs_Memory, work on the same heap, thus they are interchangeable</li></ul></div>
<div class='item'><a name='sgs-CodeString-function'></a><hr><h2>sgs_CodeString [function]</h2><h3>const char* sgs_CodeString( int type, int val )</h3><h4>returns a string for the enumeration <code>type</code> value <code>val</code></h4><ul><li>there are 4 enumerations to have value names returned for:
<ul><li>SGS_CODE_ER: error codes (SGS_ERROR, SGS_WARNING, ...)
</li><li>SGS_CODE_VT: variable types (SGS_VT_BOOL, SGS_VT_FUNC, ...)
</li><li>SGS_CODE_OP: VM instructions (SGS_SI_PUSH, SGS_SI_FORPREP, ... [internal])</li></ul></li></ul></div>
<div class='item'><a name='sgs-Abort-function'></a><hr><h2>sgs_Abort [function]</h2><h3>SGSRESULT sgs_Abort( sgs_Context* C )</h3><h4>stops execution of current SGS functions up to the last C function in the stack, excluding the current</h4><h4>error codes</h4><ul><li>SGS_ENOTFND: last or next to last function in the stack was not a SGS function</li></ul></div>
<div class='item'><a name='sgs-Stat-function'></a><hr><h2>sgs_Stat [function]</h2><h3>ptrdiff_t sgs_Stat( sgs_Context* C, int type )</h3><h4>returns or prints information about state of SGScript VM</h4><ul><li>the following <code>type</code> values are supported:
<ul><li>SGS_STAT_VERSION: returns the version number of the VM
</li><li>SGS_STAT_APIVERSION: returns the API version numver of the VM
</li><li>SGS_STAT_OBJCOUNT: returns the number of objects created in the VM
</li><li>SGS_STAT_MEMSIZE: returns the number of bytes allocated through this SGScript context
</li><li>SGS_STAT_NUMALLOCS: returns the number of memory allocations (incremented on each alloc/realloc)
</li><li>SGS_STAT_NUMFREES: returns the number of memory frees (incremented on each free/realloc)
</li><li>SGS_STAT_NUMBLOCKS: number of memory blocks currently allocated (incremented on alloc, decremented on free)
</li><li>SGS_STAT_DUMP_STACK: prints all of the variables in the stack
</li><li>SGS_STAT_DUMP_GLOBALS: prints all variables in the global dictionary
</li><li>SGS_STAT_DUMP_OBJECTS: prints all objects in the context
</li><li>SGS_STAT_DUMP_FRAMES: prints all functions in the call stack
</li><li>SGS_STAT_DUMP_STATS: dump some info about memory and objects
</li><li>SGS_STAT_XDUMP_STACK: verbosely dumps all of the variables in the stack (extended info, may be much longer)</li></ul></li></ul><ul><li>tips:
<ul><li>compare return value of SGS_STAT_VERSION against SGS_VERSION_INT if the code is version-sensitive
</li><li>compare return value of SGS_STATE_APIVERSION against SGS_API_VERSION if dynamic loading is used and multiple versions should be supported</li></ul></li></ul></div>
<div class='item'><a name='sgs-Cntl-function'></a><hr><h2>sgs_Cntl [function]</h2><h3>int32_t sgs_Cntl( sgs_Context* C, int what, int32_t val )</h3><h4>modifies the state of the VM or returns info about it</h4><ul><li>the following <code>what</code> values are supported:
<ul><li>SGS_CNTL_STATE: sets the new compilation state from <code>val</code>, returns the previous value
</li><li>SGS_CNTL_GET_STATE: returns the currently set compilation state
</li><li>SGS_CNTL_MINLEV: sets the new minimum error level from <code>val</code>, returns the previous value
</li><li>SGS_CNTL_GET_MINLEV: returns the currently set minimum error level
</li><li>SGS_CNTL_ERRNO: if <code>val</code> is true, sets internal errno to 0, otherwise - to <code>errno</code>, returns the previous value
</li><li>SGS_CNTL_SET_ERRNO: sets internal errno to <code>val</code>, returns the previous value
</li><li>SGS_CNTL_GET_ERRNO: returns the currently set internal errno
</li></ul><li>everything else does nothing and returns 0</li></ul></div>
<div class='item'><a name='sgs-StackFrameInfo-function'></a><hr><h2>sgs_StackFrameInfo [function]</h2><h3>void sgs_StackFrameInfo( sgs_Context* C, sgs_StackFrame* frame, const char** name, const char** file, int* line )</h3><h4>helps to retrieve file name, function name and line number of the specified stack frame</h4><ul><li>each non-NULL pointer is initialized with valid data; even if it may not be very helpful (for example, all anonymous functions get the same name - &quot;&lt;anonymous function&gt;&quot;)</li></ul></div>
<div class='item'><a name='sgs-GetFramePtr-function'></a><hr><h2>sgs_GetFramePtr [function]</h2><h3>sgs_StackFrame* sgs_GetFramePtr( sgs_Context* C, int end )</h3><h4>returns a call stack frame pointer</h4><ul><li>if <code>end</code> is not 0, pointer to topmost frame is returned, otherwise a pointer to first frame is returned</li></ul></div>
<div class='item'><a name='sgs-Errno-function-alias'></a><hr><h2>sgs_Errno [function alias]</h2><h3>int sgs_Errno( sgs_Context* C, int clear )</h3><h4>copies errno to internal errno value if <code>clear</code> is not 0, otherwise internal errno value is set to 0, returns <code>clear</code></h4><ul><li>used with a boolean expression and chaining to set errno if the expression returned false, like this:
<ul><li><code>sgs_PushBool( C, sgs_Errno( C, rename( a, b ) == 0 ) )</code></li></ul></li></ul></div>
<div class='item'><a name='sgs-SetErrno-function-alias'></a><hr><h2>sgs_SetErrno [function alias]</h2><h3>int sgs_SetErrno( sgs_Context* C, int err )</h3><h4>sets a specific value <code>err</code> to the internal errno variable</h4><ul><li>alias to <code>sgs_Cntl( C, SGS_CNTL_SET_ERRNO, err )</code></li></ul></div>
<div class='item'><a name='sgs-GetLastErrno-function-alias'></a><hr><h2>sgs_GetLastErrno [function alias]</h2><h3>int sgs_GetLastErrno( sgs_Context* C )</h3><h4>returns the currently set internal errno variable</h4><ul><li>alias to <code>sgs_Cntl( C, SGS_CNTL_GET_ERRNO, 0 )</code></li></ul></div>
<div class='item'><a name='sgs-PushStringBuf32-function'></a><hr><h2>sgs_PushStringBuf32 [function]</h2><h3>void sgs_PushStringBuf32( sgs_Context* C, sgs_String32* S, const char* str, sgs_SizeVal len )</h3><h4>pushes a temporary string variable from the specified buffer, allocated in the <code>sgs_String32</code> object</h4><ul><li>string buffer must be freed from all contexts before the memory it&#39;s allocated on is released
</li><li><code>len</code> is limited to 31 character</li></ul></div>
<div class='item'><a name='sgs-PushString32-function'></a><hr><h2>sgs_PushString32 [function]</h2><h3>void sgs_PushString32( sgs_Context* C, sgs_String32* S, const char* str )</h3><h4>pushes a temporary string variable from the specified string, allocated in the <code>sgs_String32</code> object</h4><ul><li>string buffer must be freed from all contexts before the memory it&#39;s allocated on is released
</li><li>alias to <code>sgs_PushStringBuf32( C, S, str, SGS_STRINGLENGTHFUNC(str) )</code></li></ul></div>
<div class='item'><a name='sgs-CheckString32-function'></a><hr><h2>sgs_CheckString32 [function]</h2><h3>void sgs_CheckString32( sgs_String32* S )</h3><h4>attempts to trigger a debug breakpoint if the specified temporary string object is not freed from all contexts</h4><ul><li>internal function <code>sgs_BreakIf</code> is used</li></ul></div>
<div class='item'><a name='sgs-IsFreedString32-function'></a><hr><h2>sgs_IsFreedString32 [function]</h2><h3>SGSBOOL sgs_IsFreedString32( sgs_String32* S )</h3><h4>returns whether the specified temporary string object is freed from all contexts</h4><ul><li>for usage with custom error outputs / assertion systems</li></ul></div>
<div class='item'><a name='Interface-implementation'></a><hr><h2>Interface implementation</h2></div>
<div class='item'><a name='C-Functions'></a><hr><h2>C Functions</h2><p>
A C function has the type <code>int CFunc( sgs_Context* )</code>. It receives the context that called it and must return the number of return values pushed on stack.
</p><h4>Conventions</h4><p>
There are no forced courses of action beyond this point. However, to simplify development, some conventions were established and are used throughout the standard library and are suggested to follow.
</p><h5>General structure</h5><ul><li>the usage of SGS_CTX in argument list is suggested to enable the use of certain macros that assume the availability of <code>sgs_Context* C</code>
</li><li>there are no restrictions on function names, however it helps to mark the scripting engine functions with a common prefix and if they wrap a native function, including the name of the wrapped function is suggested</li></ul><h5>Argument loading</h5><ul><li>prefer using <a href="#sgs-LoadArgsExt-VA-function">sgs_LoadArgs</a>, followed by <a href="#sgs-LoadArgsExt-VA-function">sgs_LoadArgsExt</a>, followed by the sgs_Parse***/sgs_Is***/sgs_ItemType(Ext)/... functions together with ArgError function family for error handling</li></ul><h5>Error handling</h5><ul><li>it is preferred to do most of it at the beginning, before custom allocations (VM stack doesn&#39;t count here), where it is possible to just <code>return sgs_Msg( C, SGS_WARNING, &quot;Error message&quot; )</code>
</li><li>SGS_WARNING is for non-fatal errors, SGS_ERROR is for errors that make it impossible to continue (severe, undoubted logical errors fall into this category)
</li><li>on error, functions should return nothing or null</li></ul><p>
A typical function
</p><pre>int sgsfunc_sample( SGS_CTX )
{
    sgs_Int num;
    char* str;
    char* buf;
    sgs_SizeVal bufsize;
    
    if( !sgs_LoadArgs( C, &quot;ism&quot;, &amp;num, &amp;str, &amp;buf, &amp;bufsize ) )
        return 0;
    
    if( bufsize == 0 )
        return sgs_Msg( C, SGS_WARNING, &quot;buffer cannot be empty&quot; );
    // sgs_Msg always returns 0
    
    // .. do something with the passed arguments ..
    
    // anything can be returned ..
    // .. but in this case, we want to say ..
    // .. that the action was successful
    sgs_PushBool( C, 1 );
    return 1;
}</pre></div>
<div class='item'><a name='Object-interface'></a><hr><h2>Object interface</h2><p>
Every interface function has the type <code>int ObjCallback ( sgs_Context* C, sgs_VarObj* data, ... )</code>. Not every of them has to be implemented (none of them are required) but for all non-pointer objects it helps to have at least one of them.
</p><p>
Interface is a structure that contains of an array and 10 function pointers in the following order: destruct, gcmark, getindex, setindex, convert, serialize, dump, getnext, call, expr. This is how interfaces are usually defined in code:
</p><pre>sgs_ObjInterface object_interface[1] =
{{
    &quot;object_type_name&quot;,
    object_destruct, NULL,  /* destruct, gcmark */
    object_getindex, NULL,  /* getindex, setindex */
    NULL, NULL, NULL, NULL, /* convert, serialize, dump, getnext */
    NULL, NULL              /* call, expr */
}};</pre><p>
The interface is defined as an array with size=1 to later be able to use it in code without prepending &quot;&amp;&quot; to the name.
</p><h4>DESTRUCT - destruction callback</h4><h5>When called:</h5><ul><li>Before the object is about to be destroyed.
</li><li>On <a href="#sgs-ObjCallDtor-function">sgs_ObjCallDtor</a></li></ul><h5>Additional arguments:</h5><p>
None.
</p><h5>Stack frame:</h5><p>
Empty.
</p><h5>Return values:</h5><p>
Non-negative value if successful, negative on error.
</p><h5>Additional notes:</h5><p>
It is important to minimize the possibility of failure here. The system cannot help in any way if memory or ownership states are corrupted.
</p><h4>GETINDEX - index/property retrieval callback</h4><h5>When called:</h5><ul><li>On A[B] (index) and A.B (property) reads in SGScript.
</li><li>Index/Property/Path function families in the C API.</li></ul><h5>Additional arguments:</h5><ul><li>sgs_Variable* key -- key variable to be used to find a sub-item
</li><li>int isprop -- (0/1) whether this is a property read (1) or index read (0)</li></ul><h5>Stack frame:</h5><p>
Empty at beginning. Expected to have at least one item on stack after a successful index/property read. The topmost one is used.
</p><h5>Return values:</h5><ul><li>Non-negative value if successful, negative on error.
</li><li>Use SGS_ENOTFND if the specified index/property was not found.</li></ul><h5>Additional notes:</h5><p>
It is safe to use conversion functions on the key variable.
</p><h4>SETINDEX - index/property setting callback</h4><h5>When called:</h5><ul><li>On A[B] (index) and A.B (property) writes in SGScript.
</li><li>Index/Property/Path function families in the C API.</li></ul><h5>Additional arguments:</h5><ul><li>sgs_Variable* key -- key variable to be used to find a sub-item
</li><li>sgs_Variable* value -- value variable to be used in setting the value of the sub-item
</li><li>int isprop -- (0/1) whether this is a property read (1) or index read (0)</li></ul><h5>Stack frame:</h5><p>
Empty.
</p><h5>Return values:</h5><ul><li>Non-negative value if successful, negative on error.
</li><li>Use SGS_ENOTFND if the specified index/property was not found.
</li><li>Use SGS_EINVAL if the given value could not be used.</li></ul><h5>Additional notes:</h5><p>
It is safe to use conversion functions on both variables.
</p><h4>CONVERT - conversion callback</h4><h5>When called:</h5><p>
Depending on the argument, it is called by different sources:
</p><ul><li>type conversion: to*** function families and other conversion triggers (like operators) in SGScript and the Get/To/Parse function families in the C API.
</li><li>SGS_CONVOP_CLONE: called on <a href="#clone-function">clone</a> / <a href="#sgs-CloneItem-function">sgs_Clone</a>
</li><li>SGS_CONVOP_TYPEOF: called on <a href="#typeof-function">typeof</a> / <a href="#sgs-TypeOf-function">sgs_TypeOf</a>
</li><li>SGS_CONVOP_TOITER: called on foreach / <a href="#sgs-PushIterator-P-functions">sgs_PushIterator(P)</a> / <a href="#sgs-GetIterator-P-functions">sgs_GetIterator(P)</a></li></ul><h5>Additional arguments:</h5><ul><li>int type -- one of SGS_VT_[BOOL|INT|REAL|STRING|PTR] or SGS_CONVOP_CLONE / SGS_CONVOP_TYPEOF / SGS_CONVOP_TOITER</li></ul><h5>Stack frame:</h5><p>
Empty at beginning. Expected to have at least one item on stack after a successful conversion. The topmost one is used.
</p><p>
Depending on the argument, it requires different variable types on stack:
</p><ul><li>type conversions require a value of the right type.
</li><li>SGS_CONVOP_CLONE should return an exact copy of the same object
</li><li>SGS_CONVOP_TYPEOF should return a string containing the type name
</li><li>SGS_CONVOP_TOITER should return an object with a GETNEXT callback</li></ul><h5>Return values:</h5><ul><li>Non-negative value if successful, negative on error.
</li><li>Use SGS_ENOTSUP if specified conversion is not supported.</li></ul><h5>Additional notes:</h5><ul><li>It should be safe to give the wrong variable type but errors may not be triggered in such cases.</li></ul><h4>SERIALIZE - serialization callback</h4><h5>When called:</h5><ul><li><a href="#serialize-function">serialize</a> in SGScript.
</li><li><a href="#sgs-Serialize-function">sgs_Serialize</a> in the C API.</li></ul><h5>Additional arguments:</h5><p>
None.
</p><h5>Stack frame:</h5><p>
Empty.
</p><h5>Return values:</h5><ul><li>Non-negative value if successful, negative on error.</li></ul><h5>Additional notes:</h5><p>
Callback requires no data but expects that <a href="#sgs-Serialize-function">sgs_Serialize</a> / <a href="#sgs-SerializeObject-function">sgs_SerializeObject</a> is successfully called once. In the case of sgs_SerializeObject, the necessary number (equal to argument count, passed to the function) of sgs_Serialize calls must be made before it.
</p><h4>DUMP - debug dump callback</h4><h5>When called:</h5><ul><li><a href="#printvar-function">printvar</a>, <a href="#dumpvar-function">dumpvar</a>, <a href="#printvar-ext-function">printvar_ext</a>, <a href="#dumpvar-ext-function">dumpvar_ext</a> in SGScript.
</li><li><a href="#sgs-DumpVar-function">sgs_DumpVar</a> in the C API.</li></ul><h5>Additional arguments:</h5><ul><li>int maxdepth -- remaining recursion depth of dump to be passed on to <a href="#sgs-DumpVar-function">sgs_DumpVar</a> calls.</li></ul><h5>Stack frame:</h5><p>
Empty at beginning. Expected to have at least one item on stack after a successful conversion. The topmost one is used.
</p><h5>Return values:</h5><ul><li>Non-negative value if successful, negative on error.</li></ul><h5>Additional notes:</h5><ul><li>Callback expects a string variable on the top of the stack.
</li><li><a href="#sgs-DumpVar-function">sgs_DumpVar</a> with maxdepth &lt;= 0 returns &quot;...&quot;, so it is not necessary to handle such cases beyond passing the parameter.</li></ul><h4>GCMARK - garbage collector marking callback</h4><h5>When called:</h5><ul><li><a href="#gc-collect-function">gc_collect</a> in SGScript.
</li><li><a href="#sgs-GCMark-Array-function">sgs_GCMark</a> / <a href="#sgs-GCExecute-function">sgs_GCExecute</a> in the C API.</li></ul><h5>Additional arguments:</h5><p>
None.
</p><h5>Stack frame:</h5><p>
Empty.
</p><h5>Return values:</h5><ul><li>Non-negative value if successful, negative on error.</li></ul><h5>Additional notes:</h5><ul><li>Callback expects that sgs_GCMark is called on all of the owned variables.
</li><li>It is important to minimize the possibility of failure here. The system cannot help in any way if memory or ownership states are corrupted.</li></ul><h4>GETNEXT - iterator control callback</h4><h5>When called:</h5><ul><li>foreach in SGScript.
</li><li><a href="#sgs-IterAdvance-P-functions">sgs_IterAdvance(P)</a> / <a href="#sgs-IterPushData-P-functions">sgs_IterPushData(P)</a> / <a href="#sgs-IterGetData-P-functions">sgs_IterGetData(P)</a></li></ul><h5>Additional arguments:</h5><ul><li>int act -- specifies the actions that should be taken in this call.
<ul><li>if argument == 0, iterator&#39;s position must be increased by one step and the return value must contain whether iterator has not reached end (positive value if so, otherwise - 0) or an error if callback has failed
</li><li>otherwise, callback must push the data required (if SGS_GETNEXT_KEY is set, the key, and if SGS_GETNEXT_VALUE is set - the value, in exactly that order)</li></ul></li></ul><h5>Stack frame:</h5><p>
Empty at beginning. Expects at least one (if either flag is set, but not both) or two (if both flags are set) variables on success. Key first, value second.
</p><h5>Return values:</h5><ul><li>Non-negative value if successful, negative on error.
</li><li>if argument == 0, must return whether iterator has not reached end (positive value if so, otherwise - 0)</li></ul><h5>Additional notes:</h5><p>
None.
</p><h4>CALL - the &quot;function call&quot; callback</h4><h5>When called:</h5><ul><li>when an object is used like a function
<ul><li><code>object_variable( .. )</code> in SGScript
</li><li>Call function family in the C API</li></ul></li></ul><h5>Additional arguments:</h5><p>
None.
</p><h5>Stack frame:</h5><p>
Contains all the same things as any C function call would: optional <code>this</code> variable and optional argument list. Expects at least the returned number of items after the call to be used as return values.
</p><h5>Return values:</h5><ul><li>Non-negative value if successful, negative on error.
</li><li>On success, the number returned is the number of variables returned by the function.</li></ul><h5>Additional notes:</h5><p>
None.
</p><h4>EXPR - expression callback</h4><h4>When called:</h4><ul><li>On arithmetic operations with the object as one or both operands in SGScript.
</li><li>On <a href="#sgs-ArithOp-function">sgs_ArithOp</a> in the C API.</li></ul><h5>Additional arguments:</h5><ul><li>sgs_Variable* A - the first (left side) operand or the only one in case of SGS_EOP_NEGATE
</li><li>sgs_Variable* B - the second (right side) operand or NULL in case of SGS_EOP_NEGATE
</li><li>int op - operation type, one of SGS_EOP_[ADD|SUB|MUL|DIV|MOD|COMPARE|NEGATE]</li></ul><h5>Stack frame:</h5><p>
Empty at beginning. Expects at least one variable on success (the topmost one will be used).
</p><h5>Return values:</h5><ul><li>Non-negative value if successful, negative on error.</li></ul><h5>Additional notes:</h5><ul><li>SGS_EOP_COMPARE expects int/real value: &gt;0 if A &gt; B, &lt;0 if A &lt; B, =0 if A = B</li></ul><p>
The full list of operators triggering the operations:
</p><ul><li>SGS_EOP_ADD: binary +, +=
</li><li>SGS_EOP_SUB: binary -, -=
</li><li>SGS_EOP_MUL: *, *=
</li><li>SGS_EOP_DIV: /, /=
</li><li>SGS_EOP_MOD: %, %=
</li><li>SGS_EOP_COMPARE: &lt;, &lt;=, &gt;, &gt;=, ==, !=, ===, !==
</li><li>SGS_EOP_NEGATE: unary -</li></ul></div>
<div class='item'><a name='Interaction-with-the-environment'></a><hr><h2>Interaction with the environment</h2><p>
Most operations are directed towards the scripting engine, that is - environment makes a function call and scripting engine handles it. For everything else, there are callbacks.
</p><h4>Memory allocation</h4><ul><li>sgs_MemFunc must be specified in creation of the scripting engine context
</li><li>sgs_MemFunc (re)allocates and frees memory
</li><li>unlike realloc, if size = 0, this function must return NULL
</li><li><a href="#sgs-DefaultMemFunc-function">sgs_DefaultMemFunc</a> is the sample implementation
</li><li>the expected behavior is same as for <a href="#sgs-Memory-function">sgs_Memory</a></li></ul><h4>Output</h4><ul><li>sgs_MsgFunc and sgs_OutputFunc are responsible for piping the outputs to their destinations
</li><li>they can be set at any moment after the creation of the scripting engine context
</li><li>sgs_MsgFunc takes the following arguments:
<ul><li>void* data - the user data pointer
</li><li>sgs_Context* C - the scripting engine context
</li><li>int type - the debug type (SGS_INFO, SGS_WARNING etc.)
</li><li>const char* message - the debug message
</li><li><a href="#sgs-StdMsgFunc-NoAbort-functions">sgs_StdMsgFunc(_NoAbort)</a> are the sample implementations
</li></ul><li>sgs_OutputFunc takes the following arguments:
<ul><li>void* data - the user data pointer
</li><li>sgs_Context* C - the scripting engine context
</li><li>const void* ptr - the data to write
</li><li>sgs_SizeVal size - the size of data to write
</li><li><a href="#sgs-StdOutputFunc-function">sgs_StdOutputFunc</a> is the sample implementation</li></ul></li></ul><h4>Execution notifications</h4><ul><li>sgs_HookFunc must be set to retrieve events of that kind
</li><li>it can be set at any moment after the creation of the scripting engine context
</li><li>sgs_HookFunc takes the following arguments:
<ul><li>void* data - the user data pointer
</li><li>sgs_Context* C - the scripting engine context
</li><li>int event - the event that occured, can be one of these values:
<ul><li>SGS_HOOK_ENTER - function was entered
</li><li>SGS_HOOK_EXIT - function was exited
</li><li>SGS_HOOK_STEP - instruction is about to be executed</li></ul></li></ul></li></ul></div>
<div class='item'><a name='Commonly-required-advanced-tasks'></a><hr><h2>Commonly required advanced tasks</h2><h4>Method handling</h4><ul><li>the preferred way to handle methods with a specific object type for `this`:</li></ul><pre>ObjectDataStruct* data;
if( !SGS_PARSE_METHOD( C, Object_interface_pointer, data, Object_name, Method_name ) )
    return 0;</pre><ul><li>the OLD way, version 1:</li></ul><pre>sgs_FuncName( C, &quot;&lt;object&gt;.&lt;method&gt;&quot; );
if( !sgs_Method( C ) || !sgs_IsObject( C, 0, Object_interface_pointer ) )
    return sgs_ArgErrorExt( C, 0, 1, &quot;&lt;object&gt;&quot;, &quot;&quot; );
ObjectDataStruct* data = (ObjectDataStruct*) sgs_GetObjectData( C, 0 );
sgs_HideThis( C );</pre><ul><li>the OLD way, version 2: Method + function handling (function that can be called as a method too)</li></ul><pre>int method_call = sgs_Method( C );
sgs_FuncName( C, method_call ? &quot;&lt;object&gt;.&lt;method&gt;&quot; : &quot;&lt;object_function&gt;&quot; );
if( !sgs_IsObject( C, 0, Object_interface_pointer ) )
    return sgs_ArgErrorExt( C, 0, method_call, &quot;&lt;object&gt;&quot;, &quot;&quot; );
ObjectDataStruct* data = (ObjectDataStruct*) sgs_GetObjectData( C, 0 );
sgs_ForceHideThis( C );</pre><ul><li>the reason why the first method is preferred to others is: it&#39;s shorter, does pretty much the same thing and resolves to <a href="#sgs-ParseMethod-function">sgs_ParseMethod</a>, which allows sharing more code and rebuilding the <a href="#SGS-PARSE-METHOD-function-alias">SGS_PARSE_METHOD</a> macro abstraction, if necessary</li></ul></div>
<div class='item'><a name='Standard-library-reference'></a><hr><h2>Standard library reference</h2></div>
<div class='item'><a name='Core-library'></a><hr><h2>Core library</h2><p>
This library is loaded on initialization and contains the functions and constants necessary to do primary actions:
</p><ul><li>execution of additional scripts
</li><li>creating and using array, class, dict, map, closure
</li><li>converting between variables
</li><li>serialization / deserialization
</li><li>operation control
</li><li>error handling and throwing
</li><li>global environment modification
</li><li>standard input / output
</li><li>data debugging</li></ul><h4>Functions:</h4><ul><li>containers
<ul><li><a href="#array-function">array</a> - returns an array containing the specified variables
</li><li><a href="#dict-function">dict</a> - returns a key-value map object (string keys) containing the specified variables
</li><li><a href="#map-function">map</a> - returns a key-value map object (many key types) containing the specified variables
</li><li><a href="#class-function">class</a> - returns an index fallback / overloading object, linking both specified variables
</li><li><a href="#array-filter-function">array_filter</a> - returns an array that is filtered with a truth test or the specified function
</li><li><a href="#array-process-function">array_process</a> - convert all array elements by a function
</li><li><a href="#dict-filter-function">dict_filter</a> - returns a dict object that is filtered with a truth test or the specified function
</li><li><a href="#dict-process-function">dict_process</a> - convert all dictionary elements by a function
</li><li><a href="#dict-size-function">dict_size</a> - returns the number of items in a dict
</li><li><a href="#map-size-function">map_size</a> - returns the number of items in a map
</li><li><a href="#isset-function">isset</a> - checks if the specified property is available
</li><li><a href="#unset-function">unset</a> - unsets the specified property (only for dict/map objects)
</li><li><a href="#clone-function">clone</a> - returns the cloned variable or the same if immutable
</li><li><a href="#get-keys-function">get_keys</a> - returns an array of keys from an iterable
</li><li><a href="#get-values-function">get_values</a> - returns an array of values from an iterable
</li><li><a href="#get-concat-function">get_concat</a> - returns an array with all values from all iterables concatenated together in order
</li><li><a href="#get-merged-function">get_merged</a> - returns a dict with all mappings merged
</li><li><a href="#get-merged-map-function">get_merged_map</a> - returns a map with all mappings merged
</li></ul><li>type info and conversion
<ul><li><a href="#tobool-function">tobool</a> - returns a variable, converted to boolean
</li><li><a href="#toint-function">toint</a> - returns a variable, converted to an integer
</li><li><a href="#toreal-function">toreal</a> - returns a variable, converted to a real value
</li><li><a href="#tostring-function">tostring</a> - returns a variable, converted to a string
</li><li><a href="#toptr-function">toptr</a> - returns a variable, converted to pointer
</li><li><a href="#parseint-function">parseint</a> - try to parse a variable as integer, return the value or null on failure
</li><li><a href="#parsereal-function">parsereal</a> - try to parse a variable as string, return the value or null on failure
</li><li><a href="#typeof-function">typeof</a> - returns the type string of a variable
</li><li><a href="#typeid-function">typeid</a> - returns type ID of a variable
</li><li><a href="#is-numeric-function">is_numeric</a> - returns if variable is a numeric type
</li><li><a href="#is-callable-function">is_callable</a> - returns if variable can be called as a function
</li></ul><li>input/output
<ul><li><a href="#print-println-printlns-functions">print, println, printlns</a> - write variables to output callback/stream
</li><li><a href="#printvar-function">printvar</a> - write variable dumps to output callback/stream
</li><li><a href="#printvar-ext-function">printvar_ext</a> - write variable dump to output callback/stream, optionally specifying max. recursion depth
</li><li><a href="#read-stdin-function">read_stdin</a> - attempt to read from standard input file (stdin)
</li></ul><li>operating system
<ul><li><a href="#ftime-function">ftime</a> - returns an always increasing time value, in seconds, as a real value
</li></ul><li>utilities
<ul><li><a href="#rand-function">rand</a> - returns a random integer between 0 and RAND_MAX
</li><li><a href="#randf-function">randf</a> - returns a random real value between 0 and 1
</li><li><a href="#srand-function">srand</a> - reseed random number generator
</li></ul><li>SGS-specific utilities
<ul><li><a href="#va-get-args-function">va_get_args</a> - returns an array of all arguments passed to calling function
</li><li><a href="#va-arg-count-function">va_arg_count</a> - returns the number of all arguments passed to calling function
</li><li><a href="#sys-call-function">sys_call</a> - call a function/callable dynamically (function and <code>this</code> specified at runtime)
</li><li><a href="#sys-apply-function">sys_apply</a> - call a function/callable even more dynamically (argument count also specified at runtime)
</li><li><a href="#pcall-function">pcall</a> - do a protected call by trapping all internal messages in the specified callback
</li><li><a href="#assert-function">assert</a> - emit an error if a condition does not evaluate to <code>true</code>
</li><li><a href="#eval-function">eval</a> - compile and run script code, retrieve return values
</li><li><a href="#eval-file-function">eval_file</a> - compile and rune script file, retrieve return values
</li><li><a href="#compile-sgs-function">compile_sgs</a> - compile script code
</li><li><a href="#include-library-function">include_library</a> - load a built-in library
</li><li><a href="#include-file-function">include_file</a> - load a script file
</li><li><a href="#include-shared-function">include_shared</a> - load a dynamically linked library / shared object (.DLL/.SO)
</li><li><a href="#import-cfunc-function">import_cfunc</a> - load a C function from .DLL/.SO
</li><li><a href="#include-function">include</a> - load many types of files
</li><li><a href="#sys-curfile-function">sys_curfile</a> - returns the origin file of the calling function
</li><li><a href="#sys-curfiledir-function">sys_curfiledir</a> - returns the directory of the origin file of the calling function
</li><li><a href="#sys-msg-function">sys_msg</a> - emit a system message
</li><li><a href="#INFO-function">INFO</a> - emit an INFO message
</li><li><a href="#WARNING-function">WARNING</a> - emit a WARNING message
</li><li><a href="#ERROR-function">ERROR</a> - emit an ERROR message
</li><li><a href="#sys-abort-function">sys_abort</a> - stop the execution of the calling SGS function
</li><li><a href="#app-abort-function">app_abort</a> - abort execution of application (exit application immediately with an error)
</li><li><a href="#app-exit-function">app_exit</a> - exit application immediately
</li><li><a href="#sys-replevel-function">sys_replevel</a> - change the minimum message reporting level
</li><li><a href="#sys-stat-function">sys_stat</a> - write info about system state
</li><li><a href="#errno-function">errno</a> - return current errno value as number or string
</li><li><a href="#errno-string-function">errno_string</a> - return specified or current errno value as string
</li><li><a href="#errno-value-function">errno_value</a> - return the errno value corresponding to the name
</li><li><a href="#dumpvar-function">dumpvar</a> - returns the dump string of variables
</li><li><a href="#dumpvar-ext-function">dumpvar_ext</a> - returns the dump string of a variable, optionally specifying max. recursion depth
</li><li><a href="#gc-collect-function">gc_collect</a> - run the garbage collector to remove inaccessible objects
</li><li><a href="#serialize-function">serialize</a> - returns a byte buffer containing info necessary to later recreate variable structure
</li><li><a href="#unserialize-function">unserialize</a> - recreate variable structure from a byte buffer</li></ul></li></ul><h4>Objects and their methods:</h4><ul><li><a href="#array-object">array</a>
<ul><li><a href="#array-push-method">push</a>
</li><li><a href="#array-pop-method">pop</a>
</li><li><a href="#array-shift-method">shift</a>
</li><li><a href="#array-unshift-method">unshift</a>
</li><li><a href="#array-insert-method">insert</a>
</li><li><a href="#array-erase-method">erase</a>
</li><li><a href="#array-part-method">part</a>
</li><li><a href="#array-clear-method">clear</a>
</li><li><a href="#array-reverse-method">reverse</a>
</li><li><a href="#array-resize-method">resize</a>
</li><li><a href="#array-reserve-method">reserve</a>
</li><li><a href="#array-sort-method">sort</a>
</li><li><a href="#array-sort-custom-method">sort_custom</a>
</li><li><a href="#array-sort-mapped-method">sort_mapped</a>
</li><li><a href="#array-find-method">find</a>
</li><li><a href="#array-remove-method">remove</a>
</li><li><a href="#array-unique-method">unique</a>
</li><li><a href="#array-random-method">random</a>
</li><li><a href="#array-shuffle-method">shuffle</a>
</li></ul><li><a href="#dict-object">dict</a>
</li><li><a href="#map-object">map</a>
</li><li><a href="#class-object">class</a></li></ul><h4>Constants:</h4><ul><li><a href="#SGS-constants">SGS_***</a> - error levels
</li><li><a href="#VT-constants">VT_***</a> - variable type IDs
</li><li><a href="#RAND-MAX-constant">RAND_MAX</a> - maximum value that can be returned by <a href="#rand-function">rand</a></li></ul><h4>Other:</h4><ul><li><a href="#G-superglobal">_G</a> - environment superglobal, a dict containing all global variable names and values; can be changed</li></ul></div>
<div class='item'><a name='array-function'></a><hr><h2>array [function]</h2><h3>array( ... )</h3><h4>returns an <a href="#array-object">array</a>, containing the arguments</h4><ul><li>similar to the array literal, though somewhat limited</li></ul><pre>array( &quot;5&quot;, 6, 7.0 ) // same as [&quot;5&quot;,6,7.0]</pre></div>
<div class='item'><a name='dict-function'></a><hr><h2>dict [function]</h2><h3>dict( [key, value, ...] )</h3><h4>returns a &#39;<a href="#dict-object">dict</a>&#39; (dictionary/hash table) object, containing the even arguments mapped to respective previous arguments</h4><ul><li>if no arguments are passed, an empty dictionary is returned
</li><li>if an even number of arguments is passed, function returns null and emits a warning
</li><li>all even arguments must be strings or convertible to strings</li></ul><pre>dict( &quot;name&quot;, &quot;John&quot;, &quot;phone&quot;, 1234567890 ); // same as { name = &quot;John&quot;, phone = 1234567890 }</pre></div>
<div class='item'><a name='map-function'></a><hr><h2>map [function]</h2><h3>map( [key, value, ...] )</h3><h4>returns a &#39;<a href="#map-object">map</a>&#39; (map/hash table) object, containing the even arguments mapped to respective previous arguments</h4><ul><li>if no arguments are passed, an empty map is returned
</li><li>if an even number of arguments is passed, function returns null and emits a warning</li></ul><pre>map( &quot;John&quot;, &quot;name&quot;, 1234567890, &quot;phone&quot; ); // useful for mapping additional data to variables or making sets</pre></div>
<div class='item'><a name='class-function'></a><hr><h2>class [function]</h2><h3>class( first, second )</h3><h4>returns a <a href="#class-object">class</a> object with <code>first</code> set as the primary data source and <code>second</code> set as the secondary/backup data source</h4><ul><li>both arguments accept all kinds of variables but it&#39;s generally preferred to use only dicts / maps / special objects
</li><li>refer to <a href="#Classes">Classes</a> for more information on how class objects work and how to use them</li></ul><pre>someCommonInterface = { printdata = function(){ print( this.data ); } };
c = class( { data = &quot;5&quot; }, someCommonInterface );
c.data = &quot;6&quot;;
c.printdata(); // prints 6</pre></div>
<div class='item'><a name='array-filter-function'></a><hr><h2>array_filter [function]</h2><h3>array_filter( array[, callable] )</h3><h4>return an array with the items that convert to boolean &#39;true&#39;, optionally preprocessed by a callable</h4><ul><li>two arguments are passed to the callable: value, index</li></ul><pre>array_filter([ 0, 1, 2, 3 ]); // returns [1,2,3]</pre></div>
<div class='item'><a name='array-process-function'></a><hr><h2>array_process [function]</h2><h3>array_process( array, callable )</h3><h4>return an array with the items passed through a callable</h4><ul><li>two arguments are passed to the callable: value, index</li></ul></div>
<div class='item'><a name='dict-filter-function'></a><hr><h2>dict_filter [function]</h2><h3>dict_filter( dict[, callable] )</h3><h4>return a dict with the items that convert to boolean &#39;true&#39;, optionally preprocessed by a callable</h4><ul><li>two arguments are passed to the callable: value, key</li></ul><pre>dict_filter({ a = 0, b = 1 }); // returns {b=1}</pre></div>
<div class='item'><a name='dict-process-function'></a><hr><h2>dict_process [function]</h2><h3>dict_process( dict, callable )</h3><h4>return a dict with the items passed through a callable</h4><ul><li>two arguments are passed to the callable: value, key</li></ul></div>
<div class='item'><a name='dict-size-function'></a><hr><h2>dict_size [function]</h2><h3>dict_size( dict )</h3><h4>return the number of entries in the dict object</h4><pre>x = { a = 5, b = 123 };
dict_size( x ); // returns 2</pre></div>
<div class='item'><a name='map-size-function'></a><hr><h2>map_size [function]</h2><h3>map_size( dict )</h3><h4>return the number of entries in the map object</h4><pre>x = map( 5, &quot;a&quot;, 123, &quot;b&quot; );
map_size( x ); // returns 2</pre></div>
<div class='item'><a name='isset-function'></a><hr><h2>isset [function]</h2><h3>isset( var, string key )</h3><h4>returns whether a property named <code>key</code> is accessible (exists) in variable <code>var</code></h4><pre>x = { a = 5 };
isset( x, &quot;a&quot; ); // returns &#39;true&#39;
isset( x, &quot;b&quot; ); // returns &#39;false&#39;
isset( print, &quot;call&quot; ); // returns &#39;true&#39; -- works with built-in special properties too</pre></div>
<div class='item'><a name='unset-function'></a><hr><h2>unset [function]</h2><h3>unset( dict|map var, (string) key )</h3><h4>removes an entry named <code>key</code> from the dictionary <code>var</code></h4><ul><li><code>key</code> is only required to be of <code>string</code> type if a <code>dict</code> is passed</li></ul></div>
<div class='item'><a name='clone-function'></a><hr><h2>clone [function]</h2><h3>clone( var )</h3><h4>creates a one-reference copy of the variable <code>var</code> or returns null and emits a warning on failure</h4><ul><li>variables that are passed by value (null, bool, int, real, cfunc) or strings/functions are returned as-is, since for value types all copies are same and strings/functions are immutable</li></ul><pre>x = { a = 5 };
y = clone( x );
z = x;
x.a = 6;
print( y.a ); // prints &quot;5&quot;
print( z.a ); // prints &quot;6&quot;</pre></div>
<div class='item'><a name='get-keys-function'></a><hr><h2>get_keys [function]</h2><h3>get_keys( iterable var )</h3><h4>returns an array of keys found in the iterable object <code>var</code> or returns null and emits a warning on failure</h4><ul><li><code>var</code> must be an iterable object (has interface OP_CONVERT defined and successfully handles a CONVOP_TOITER request) - such objects are <code>array</code>, <code>dict</code>, <code>map</code> and <code>io_dir</code></li></ul><pre>get_keys( [5,7,0] ); // returns [0,1,2]
get_keys( {b=5,a=2} ); // returns [&quot;b&quot;,&quot;a&quot;]</pre></div>
<div class='item'><a name='get-values-function'></a><hr><h2>get_values [function]</h2><h3>get_values( iterable var )</h3><h4>returns an array of values found in the iterable object <code>var</code> or returns null and emits a warning on failure</h4><ul><li><code>var</code> must be an iterable object (has interface OP_CONVERT defined and successfully handles a CONVOP_TOITER request) - such objects are <code>array</code>, <code>dict</code>, <code>map</code> and <code>io_dir</code></li></ul><pre>get_values( [5,7,0] ); // returns [5,7,0]
get_values( {b=5,a=2} ); // returns [5,2]</pre></div>
<div class='item'><a name='get-concat-function'></a><hr><h2>get_concat [function]</h2><h3>get_concat( iterable var, iterable var1, ... )</h3><h4>returns an array of values found in all iterable objects passed to the function or returns null and emits a warning on failure</h4><pre>get_concat( [1,2], {a=&quot;5&quot;,b=8} ); // returns [1,2,&quot;5&quot;,8]</pre></div>
<div class='item'><a name='get-merged-function'></a><hr><h2>get_merged [function]</h2><h3>get_merged( iterable var, iterable var1, ... )</h3><h4>returns a dict of all key-value pairs found in all iterable objects passed to the function or returns null and emits a warning on failure</h4><pre>get_merged( [1,2], [3], {a=&quot;4&quot;} ); // return {0=3,1=2,a=&quot;4&quot;}</pre></div>
<div class='item'><a name='get-merged-map-function'></a><hr><h2>get_merged_map [function]</h2><h3>get_merged_map( iterable var, iterable var1, ... )</h3><h4>returns a map of all key-value pairs found in all iterable objects passed to the function or returns null and emits a warning on failure</h4><pre>get_merged_map( [1,2], map(5,6), {a=&quot;4&quot;} ); // return {0=3,1=2,int(5)=6,a=&quot;4&quot;}</pre></div>
<div class='item'><a name='tobool-function'></a><hr><h2>tobool [function]</h2><h3>tobool( var )</h3><h4>returns a boolean, generated from variable <code>var</code> using the <a href="#Conversion-rules">Conversion rules</a></h4><ul><li>this function is equivalent to <a href="#sgs-Get-functions">sgs_GetBool</a> / <a href="#sgs-To-functions">sgs_ToBool</a> in the C API</li></ul><pre>tobool( 5 ); // returns &#39;true&#39;
tobool( &quot;&quot; ); // returns &#39;false&#39;</pre></div>
<div class='item'><a name='toint-function'></a><hr><h2>toint [function]</h2><h3>toint( var )</h3><h4>returns an integer, generated from variable <code>var</code> using the <a href="#Conversion-rules">Conversion rules</a></h4><ul><li>this function is equivalent to <a href="#sgs-Get-functions">sgs_GetInt</a> / <a href="#sgs-To-functions">sgs_ToInt</a> in the C API</li></ul><pre>toint( 5.4 ); // returns 5
toint( &quot;0xff&quot; ); // returns 255</pre></div>
<div class='item'><a name='toreal-function'></a><hr><h2>toreal [function]</h2><h3>toreal( var )</h3><h4>returns a real value, generated from variable <code>var</code> using the <a href="#Conversion-rules">Conversion rules</a></h4><ul><li>this function is equivalent to <a href="#sgs-Get-functions">sgs_GetReal</a> / <a href="#sgs-To-functions">sgs_ToReal</a> in the C API</li></ul><pre>toreal( 5 ); // returns 5.0
toreal( &quot;3e+2&quot; ); // returns 300.0
toreal( &quot;0xff&quot; ); // returns 255.0</pre></div>
<div class='item'><a name='tostring-function'></a><hr><h2>tostring [function]</h2><h3>tostring( var )</h3><h4>returns a string value, generated from variable <code>var</code> using the <a href="#Conversion-rules">Conversion rules</a></h4><ul><li>this function is equivalent to <a href="#sgs-To-functions">sgs_ToString</a> in the C API</li></ul><pre>tostring( 5 ); // returns &quot;5&quot;
tostring( { &quot;a&quot; = &quot;b&quot; } ); // returns &quot;{a=b}&quot;</pre></div>
<div class='item'><a name='toptr-function'></a><hr><h2>toptr [function]</h2><h3>toptr( var )</h3><h4>returns a pointer value, generated from variable <code>var</code> using the <a href="#Conversion-rules">Conversion rules</a></h4><ul><li>this function is equivalent to <a href="#sgs-Get-functions">sgs_GetPtr</a> / <a href="#sgs-To-functions">sgs_ToPtr</a> in the C API</li></ul><pre>toptr( 5 ); // returns 5
toptr( &quot;3e+2&quot; ); // returns address of the string
toptr( [] ); // returns address of array data</pre></div>
<div class='item'><a name='parseint-function'></a><hr><h2>parseint [function]</h2><h3>parseint( var )</h3><h4>returns an integer, generated from variable <code>var</code> using the <a href="#Conversion-rules">Conversion rules</a> or returns <code>null</code> on failure</h4><ul><li>this function is equivalent to <a href="#sgs-Parse-functions">sgs_ParseInt</a> in the C API</li></ul><pre>parseint( 5.4 ); // returns 5
parseint( &quot;0xff&quot; ); // returns 255
parseint( parseint ); // returns null</pre></div>
<div class='item'><a name='parsereal-function'></a><hr><h2>parsereal [function]</h2><h3>parsereal( var )</h3><h4>returns a real value, generated from variable <code>var</code> using the <a href="#Conversion-rules">Conversion rules</a> or returns <code>null</code> on failure</h4><ul><li>this function is equivalent to <a href="#sgs-Parse-functions">sgs_ParseReal</a> in the C API</li></ul><pre>parsereal( 5 ); // returns 5.0
parsereal( &quot;3e+2&quot; ); // returns 300.0
parsereal( &quot;0xff&quot; ); // returns 255.0
parsereal( parsereal ); // returns null</pre></div>
<div class='item'><a name='typeof-function'></a><hr><h2>typeof [function]</h2><h3>typeof( var )</h3><h4>returns the type name of variable <code>var</code>, as string</h4><ul><li>this function is equivalent to <a href="#sgs-TypeOf-function">sgs_TypeOf</a> in the C API</li></ul><pre>typeof( 5 ); // returns &quot;real&quot;
typeof( [] ); // returns &quot;array&quot;</pre></div>
<div class='item'><a name='typeid-function'></a><hr><h2>typeid [function]</h2><h3>typeid( var )</h3><h4>returns the first 4 bits of the variable <code>var</code> type flags, as <code>int</code></h4><ul><li>returns one of the values mapped to VT_NULL/VT_BOOL/VT_INT/VT_REAL/VT_STRING/VT_FUNC/VT_CFUNC/VT_OBJECT/VT_PTR
</li><li>this function is equivalent to <a href="#sgs-ItemType-function">sgs_ItemType</a> in the C API</li></ul><pre>typeid( 5 ) == VT_INT; // returns &#39;true&#39;
typeid( [] ); // returns 7 / VT_OBJECT</pre></div>
<div class='item'><a name='is-numeric-function'></a><hr><h2>is_numeric [function]</h2><h3>is_numeric( var )</h3><h4>returns whether the variable <code>var</code> is numeric - one of bool/int/real or a numeric string</h4><ul><li>all types that can always be converted to numbers are considered numeric, with two exceptions:
<ul><li>convertible objects are not numeric since validation requires an interface call and unnecessary interface calls cannot be made
</li><li>null value is considered to be the lack of a better value, thus it cannot be considered valid, even though it always maps implicitly to the integer 0</li></ul></li></ul><pre>is_numeric( 12.124 ); // returns true
is_numeric( &quot;what&quot; ); // returns false</pre></div>
<div class='item'><a name='is-callable-function'></a><hr><h2>is_callable [function]</h2><h3>is_callable( var )</h3><h4>returns whether the variable <code>var</code> is callable - a function (func/cfunc) or an object with OP_CALL defined</h4><ul><li>this function is equivalent to <a href="#sgs-IsCallable-P-functions">sgs_IsCallable</a> in the C API</li></ul><pre>is_callable( print ); // returns &#39;true&#39;
is_callable( function(){} ); // returns &#39;true&#39;
is_callable( 5 ); // returns &#39;false&#39;</pre></div>
<div class='item'><a name='print-println-printlns-functions'></a><hr><h2>print, println, printlns [functions]</h2><h3>print( ... ), println( ... ), printlns( ... ),</h3><h4>passes all arguments, converted to strings, to the output callback</h4><ul><li>print passes arguments without modifications
</li><li>println passes a newline character after all variables
</li><li>printlns passes a newline character after each variable</li></ul><pre>print( 5, &quot;x&quot; ); // prints &quot;5x&quot;
println( 5, &quot;x&quot; ); // prints &quot;5x\n&quot;
printlns( 5, &quot;x&quot; ); // prints &quot;5\nx\n&quot;</pre></div>
<div class='item'><a name='printvar-ext-function'></a><hr><h2>printvar_ext [function]</h2><h3>printvar_ext( var, int maxdepth = 5 )</h3><h4>passes a dump of the variable (informative string version) to the output callback, allowing to optionally specify the maximum depth of the dump (how deep it is allowed to look for sub-variables)</h4><pre>printvar_ext( 5 ); // prints &quot;real (5)&quot;
printvar_ext( &quot;wat&quot; ); // prints &quot;string [3] &quot;wat&quot;&quot;
printvar_ext( [{a=[{}]}], 2 ); /* prints:
object (003C5F90) [0] array (1)
[
  object (003C60A8) [1] dict (1)
  {
    ...
  }
]
*/</pre></div>
<div class='item'><a name='printvar-function'></a><hr><h2>printvar [function]</h2><h3>printvar( var, ... )</h3><h4>same as a list of printvar(var); calls for each argument</h4><ul><li>refer to <a href="#printvar-ext-function">printvar_ext</a> for more info</li></ul></div>
<div class='item'><a name='read-stdin-function'></a><hr><h2>read_stdin [function]</h2><h3>read_stdin( bool all = false )</h3><h4>reads from the standard input</h4><ul><li>if <code>all</code> is set to &#39;true&#39;, all standard input is read up to EOF (useful for piped input)
</li><li>if <code>all</code> is set to &#39;false&#39; or not set at all, input is read up to (and excluding) the next newline character</li></ul><pre>print &quot;Name: &quot;; name = read_stdin(); // waits for user input
process( read_stdin(true) ); // loads all piped input</pre></div>
<div class='item'><a name='ftime-function'></a><hr><h2>ftime [function]</h2><h3>ftime()</h3><h4>returns a value that is increased by a total of 1 each second (time), as real</h4><ul><li>guaranteed to offer sub-second precision unless stated otherwise for any specific platform</li></ul><pre>start = ftime();
do_something_big();
println( &quot;That took &quot; $ ftime() - start $ &quot; seconds.&quot; );</pre></div>
<div class='item'><a name='rand-function'></a><hr><h2>rand [function]</h2><h3>rand()</h3><h4>returns a random &#39;int&#39; value in the range [0;RAND_MAX] - from 0, inclusive, to RAND_MAX, inclusive</h4></div>
<div class='item'><a name='randf-function'></a><hr><h2>randf [function]</h2><h3>randf()</h3><h4>returns a random &#39;real&#39; value in the range [0;1] - from 0, inclusive, to 1, inclusive</h4></div>
<div class='item'><a name='srand-function'></a><hr><h2>srand [function]</h2><h3>srand( int seed )</h3><h4>specify a different seed value for the built-in pseudo-random number generator</h4><pre>srand( 5 ); // restart the generator with the value specified
srand( ftime() ); // restart the generator depending on the second the code was executed</pre></div>
<div class='item'><a name='va-get-args-function'></a><hr><h2>va_get_args [function]</h2><h3>va_get_args()</h3><h4>return an array containing all arguments passed to the calling function</h4></div>
<div class='item'><a name='va-arg-count-function'></a><hr><h2>va_arg_count [function]</h2><h3>va_arg_count()</h3><h4>return the number of arguments passed to the calling function</h4></div>
<div class='item'><a name='sys-call-function'></a><hr><h2>sys_call [function]</h2><h3>sys_call( func, this[, args..] )</h3><h4>calls the specified function with the specified <code>this</code> value and argument list</h4><p>
<em class='notice-bgr'>if argument count is only known at runtime, see <a href="#sys-apply-function">sys_apply</a></em>
</p><ul><li>C functions, SGS functions, closure objects and real closures have this function under the &quot;call&quot; property</li></ul></div>
<div class='item'><a name='sys-apply-function'></a><hr><h2>sys_apply [function]</h2><h3>sys_apply( func, this, args )</h3><h4>calls the specified function with the specified <code>this</code> value and argument array</h4><p>
<em class='notice-bgr'>if argument count is known at compile time, prefer <a href="#sys-call-function">sys_call</a> to this function</em>
</p><ul><li>C functions, SGS functions, closure objects and real closures have this function under the &quot;apply&quot; property</li></ul></div>
<div class='item'><a name='pcall-function'></a><hr><h2>pcall [function]</h2><h3>pcall( callable func[, callable errh ])</h3><h4>calls the callable <code>func</code>, hiding internal errors from the caller or optionally passing them to callable <code>errh</code></h4><ul><li><code>errh</code> error handler is called with two arguments - <code>int error_type, string message</code> - and expected to return 0-1 arguments ([int])
</li><li>error handler must return 0/null/nothing if the error has been successfully processed or the new error type otherwise
<ul><li>errors thrown inside the handler will not be caught so any error can be transformed to any other
</li><li>an empty function behaves the same way as <code>pcall</code> without function</li></ul></li></ul><pre>include &quot;string&quot;;

function handler( type, msg )
{
    if( string_find( msg, &quot;not found&quot; ) !== null )
        sys_msg( type, &quot;nooooooooooo&quot; );
}

function handler2( type, msg )
{
    if( string_find( msg, &quot;not found&quot; ) !== null )
        return SGS_ERROR;
}

pcall(function(){ print x; }); // nothing
pcall(function(){ print x; }, handler ); // renamed warning
pcall(function(){ print x; }, handler2 ); // changed type to error</pre></div>
<div class='item'><a name='assert-function'></a><hr><h2>assert [function]</h2><h3>assert( var condition[, string message] )</h3><h4>if condition evaluates to &#39;false&#39;, emits an error &quot;assertion failed&quot; or if message is defined, &quot;assertion failed: &lt;message&gt;&quot;</h4><pre>assert( text, &quot;text was not defined&quot; );</pre></div>
<div class='item'><a name='eval-function'></a><hr><h2>eval [function]</h2><h3>eval( string code )</h3><h4>returns the result of evaluating the passed <code>code</code> string as SGScript code</h4><ul><li>this function is equivalent to <a href="#sgs-EvalBuffer-function">sgs_EvalBuffer</a> / <a href="#sgs-EvalString-function-alias">sgs_EvalString</a> in the C API</li></ul><pre>eval(&quot;print 5;&quot;); // prints 5</pre></div>
<div class='item'><a name='eval-file-function'></a><hr><h2>eval_file [function]</h2><h3>eval_file( string filename )</h3><h4>returns the result of evaluating the file pointed to by <code>filename</code> as SGScript code</h4><ul><li>this function is equivalent to <a href="#sgs-EvalFile-function">sgs_EvalFile</a> in the C API</li></ul><pre>eval_file(&quot;myfile.sgs&quot;); // ???</pre></div>
<div class='item'><a name='compile-sgs-function'></a><hr><h2>compile_sgs [function]</h2><h3>compile_sgs( string code )</h3><h4>returns the generated bytecode or null + error info</h4><ul><li>this function is equivalent to <a href="#sgs-Compile-function">sgs_Compile</a> in the C API</li></ul><pre>compile_sgs( io_file_read( &quot;myfile.sgs&quot; ) ); // ???</pre></div>
<div class='item'><a name='include-library-function'></a><hr><h2>include_library [function]</h2><h3>include_library( string lib[, bool override ] )</h3><h4>loads the global variables of the specific library <code>lib</code> in the state, returns success, as <code>bool</code>, emits a warning on failure</h4><ul><li>lib must be one of &#39;fmt&#39;, &#39;io&#39;, &#39;math&#39;, &#39;os&#39;, &#39;string&#39;
</li><li>if <code>override</code> is specified, library will be reloaded even if it was already loaded before
</li><li>this function is equivalent to the sgs_LoadLib_* functions in the C API</li></ul><pre>printvar( sin ); // warning, null
include_library( &quot;math&quot; );
printvar( sin ); // C function</pre></div>
<div class='item'><a name='include-file-function'></a><hr><h2>include_file [function]</h2><h3>include_file( string file[, bool override ] )</h3><h4>executes the file pointed to by <code>file</code>, returns success, as <code>bool</code>, emits a warning on failure</h4><ul><li>this function does NOT check include paths (SGS_PATH)
</li><li>if <code>override</code> is specified, file will be reloaded even if it was already loaded before
</li><li>this function is equivalent to <a href="#sgs-ExecFile-function-alias">sgs_ExecFile</a> in the C API</li></ul><pre>include_file( &quot;something.sgs&quot; ); // loads something
include_file( &quot;something.sgs&quot; ); // does not load it again
include_file( &quot;something.sgs&quot;, true ); // loads it again</pre></div>
<div class='item'><a name='include-shared-function'></a><hr><h2>include_shared [function]</h2><h3>include_shared( string file[, bool override ] )</h3><h4>runs the shared library pointed to by <code>file</code>, returns success, as <code>bool</code>, emits a warning on failure</h4><ul><li><code>file</code> must be available according to the platform-specific rules of dynamic libraries (shared objects)
</li><li>the library must contain a &#39;sgscript_main&#39; function that will be called on initialization
</li><li>if <code>override</code> is specified, file will be reloaded even if it was already loaded before</li></ul><pre>include_shared( &quot;sgsjson.dll&quot; ); // load the JSON library DLL on Windows</pre></div>
<div class='item'><a name='include-function'></a><hr><h2>include [function]</h2><h3>include( string file[, bool override ] )</h3><h4>tries to load a library or a file according to the include path</h4><ul><li>the order of actions:
<ul><li>first, a library load is attempted
</li><li>on failure, a file is looked for by every entry of the sys_include_path variable (? - the file replacement symbol, | - file directory replacement symbol, ; - separator)
</li><li>if file is not found, everything stops
</li><li>if file is found, first - a library load is attempted, on failure - bytecode &amp; source code loading
</li></ul><li>this function is also available as a replicating statement &#39;include&#39; (ex. &#39;include &quot;fmt&quot;, &quot;io&quot;;&#39; works the same way as include(&quot;fmt&quot;); include(&quot;io&quot;);)</li></ul></div>
<div class='item'><a name='import-cfunc-function'></a><hr><h2>import_cfunc [function]</h2><h3>import_cfunc( string file, string funcname )</h3><h4>retrieves the <code>funcname</code> function of the shared library <code>file</code>, returns success, as <code>bool</code>, emits a warning on failure</h4><p>
<em class='notice-bgr'>Do not call &#39;sgscript_main&#39; using this function! That function has different return value semantics so at best, something will work, a warning could be emitted and the worst case is that something will crash.</em>
</p><ul><li><code>file</code> must be available according to the platform-specific rules of dynamic libraries (shared objects)</li></ul><pre>import_cfunc( &quot;mydll.dll&quot;, &quot;someSGScriptFunc&quot; )();</pre></div>
<div class='item'><a name='sys-curfile-function'></a><hr><h2>sys_curfile [function]</h2><h3>sys_curfile()</h3><h4>returns the path of the file (as passed on load) that contains the currently executed code or <code>null</code> if the file cannot be determined (eval, C functions)</h4><pre>// a.sgs
print( sys_curfile() ); // prints &quot;a.sgs&quot;
// b.sgs
include &quot;a.sgs&quot;;</pre></div>
<div class='item'><a name='sys-curfiledir-function'></a><hr><h2>sys_curfiledir [function]</h2><h3>sys_curfiledir()</h3><h4>returns the directory path of the file (as passed on load) that contains the currently executed code or <code>null</code> if the file cannot be determined (eval, C functions)</h4><pre>// ext/a.sgs
print( sys_curfiledir() ); // prints &quot;ext&quot;
// a.sgs
print( sys_curfiledir() ); // prints &quot;.&quot;
// b.sgs
include &quot;ext/a.sgs&quot;, &quot;a.sgs&quot;;</pre></div>
<div class='item'><a name='sys-msg-function'></a><hr><h2>sys_msg [function]</h2><h3>sys_msg( int code, string message )</h3><h4>passes a message to the internal messaging system (one that&#39;s commonly used to report errors and warnings)</h4><p>
<em class='notice-bgr'>Different codes can be handled differently by the system. By default, SGS_ERROR code will stop execution and return to C code as soon as possible.</em>
</p><ul><li><code>code</code> is the code to use to pass the message (ex. SGS_INFO, SGS_WARNING, SGS_ERROR)</li></ul></div>
<div class='item'><a name='INFO-function'></a><hr><h2>INFO [function]</h2><h3>INFO( string message )</h3><h4>passes a message to the internal messaging system</h4><ul><li>the name of this function is written in all caps to avoid shadowing by a common variable name
</li><li>works exactly like <code>sys_msg( SGS_INFO, message )</code></li></ul></div>
<div class='item'><a name='WARNING-function'></a><hr><h2>WARNING [function]</h2><h3>WARNING( string message )</h3><h4>passes a message to the internal messaging system</h4><ul><li>the name of this function is written in all caps for consistency with the other two
</li><li>works exactly like <code>sys_msg( SGS_INFO, message )</code></li></ul></div>
<div class='item'><a name='ERROR-function'></a><hr><h2>ERROR [function]</h2><h3>ERROR( string message )</h3><h4>passes a message to the internal messaging system</h4><p>
<em class='notice-bgr'>By default, SGS_ERROR code (the one this function uses internally) will stop execution and return to C code as soon as possible.</em>
</p><ul><li>the name of this function is written in all caps to avoid shadowing by a common variable name
</li><li>works exactly like <code>sys_msg( SGS_INFO, message )</code></li></ul></div>
<div class='item'><a name='sys-abort-function'></a><hr><h2>sys_abort [function]</h2><h3>sys_abort()</h3><h4>stops execution and returns to C code as soon as possible</h4><ul><li>this function is equivalent to <a href="#sgs-Abort-function">sgs_Abort</a> in the C API</li></ul><pre>sys_abort();
print( 5 ); // this line is not reached</pre></div>
<div class='item'><a name='app-abort-function'></a><hr><h2>app_abort [function]</h2><h3>app_abort()</h3><h4>calls the abort() function of the C standard library (crashes the application)</h4></div>
<div class='item'><a name='app-exit-function'></a><hr><h2>app_exit [function]</h2><h3>app_exit( code = 0 )</h3><h4>calls the exit() function of the C standard library (exits the application)</h4></div>
<div class='item'><a name='sys-replevel-function'></a><hr><h2>sys_replevel [function]</h2><h3>sys_replevel([ level ])</h3><h4>returns the current reported error level and optionally sets a new one</h4><p>
<em class='notice-bgr'>The effects of this function are not reverted automatically at any moment (unless implemented manually with hooks).</em>
</p><pre>old_level = sys_replevel( SGS_ERROR ); // report only errors or worse
magic = calculate_magic(); // any warnings are never processed at this point
sys_replevel( old_level ); // restore the old reported level</pre></div>
<div class='item'><a name='sys-stat-function'></a><hr><h2>sys_stat [function]</h2><h3>sys_stat( code )</h3><h4>prints info about virtual machine state, everything is implementation-defined</h4><ul><li>accepted codes are the same as for <a href="#sgs-Stat-function">sgs_Stat</a>, which this function is equivalent to</li></ul><pre>sys_stat( 11 ); // dumps all globals</pre></div>
<div class='item'><a name='errno-function'></a><hr><h2>errno [function]</h2><h3>errno( as_string = false )</h3><h4>returns the last relevant error number for the C standard library, as an integer or a string if <code>as_string</code> is set</h4><ul><li>last relevant error number is defined by <a href="#sgs-Errno-function-alias">sgs_Errno</a> / <a href="#sgs-SetErrno-function-alias">sgs_SetErrno</a> C API functions</li></ul><pre>data = io_file_read( &quot;doesnotexist&quot; ); // file that does not exist
print errno(); // prints 2
print errno(true); // prints &quot;No such file or directory&quot; on Windows</pre></div>
<div class='item'><a name='errno-string-function'></a><hr><h2>errno_string [function]</h2><h3>errno_string( int code )</h3><h4>returns the error string for the given code</h4><ul><li>errno_string(errno()) is equivalent to errno(true)</li></ul><pre>print errno_string(2); // prints &quot;No such file or directory&quot; on Windows</pre></div>
<div class='item'><a name='errno-value-function'></a><hr><h2>errno_value [function]</h2><h3>errno_value( string key )</h3><h4>returns the number for the error key (for &quot;ENOENT&quot; it would return 2)</h4><ul><li>this function might be a bit slow considering that it currently does not use any extended lookup systems, such as hash tables</li></ul><pre>data = io_file_read( &quot;doesnotexist&quot; );
if( errno() == error_string(&quot;ENOENT&quot;) )
    println( &quot;file does not exist&quot; );</pre></div>
<div class='item'><a name='dumpvar-ext-function'></a><hr><h2>dumpvar_ext [function]</h2><h3>dumpvar_ext( var, int depth = 5 )</h3><h4>similar to <a href="#printvar-ext-function">printvar_ext()</a> but returns the dump instead of printing it</h4><ul><li>this function is equivalent to <a href="#sgs-DumpVar-function">sgs_DumpVar</a> in the C API</li></ul><pre>sys_error( SGS_INFO, &quot;Extended variable info:\n&quot; $ dumpvar(data) );</pre></div>
<div class='item'><a name='dumpvar-function'></a><hr><h2>dumpvar [function]</h2><h3>dumpvar( ... )</h3><h4>similar to <a href="#printvar-function">printvar()</a> but returns the dumps, concatenated, instead of printing them</h4></div>
<div class='item'><a name='gc-collect-function'></a><hr><h2>gc_collect [function]</h2><h3>gc_collect()</h3><h4>runs the garbage collector on the virtual machine, waiting until it has finished</h4><ul><li>returns the reduction in objects or false on failure</li></ul><pre>a = [];
a.push(a); // creates a circular dependency
a = null; // a is not actually freed
gc_collect(); // a is freed now</pre></div>
<div class='item'><a name='serialize-function'></a><hr><h2>serialize [function]</h2><h3>serialize( var )</h3><h4>converts the variable to a byte buffer (string), containing the serialized data that can be recreated with <a href="#unserialize-function">unserialize()</a> or returns null and emits a warning on failure</h4><ul><li>C functions and objects without OP_SERIALIZE implemented cannot be serialized</li></ul><pre>data = serialize({ name = &quot;A&quot;, info = &quot;B&quot; });
print data; // prints random-looking, yet deterministic garbage
print unserialize(data); // prints {name=A,info=B}</pre></div>
<div class='item'><a name='unserialize-function'></a><hr><h2>unserialize [function]</h2><h3>unserialize( string data )</h3><h4>recreates a variable from the buffer with serialized data or returns null and emits a warning on failure</h4><ul><li>this function will internally call global object creation functions specified in the data, so they must be defined and the state could change in the process
</li><li>for more info on serialization in SGScript, refer to <a href="#Serialization-in-SGScript">Serialization in SGScript</a></li></ul><pre>data = serialize({ name = &quot;A&quot;, info = &quot;B&quot; });
print data; // prints random-looking, yet deterministic garbage
print unserialize(data); // prints {name=A,info=B}</pre></div>
<div class='item'><a name='SGS-constants'></a><hr><h2>SGS_*** [constants]</h2><h3>SGS_INFO, SGS_WARNING, SGS_ERROR</h3><h4>defined to the values of the C macros, respectively 100, 200 and 300</h4></div>
<div class='item'><a name='VT-constants'></a><hr><h2>VT_*** [constants]</h2><h3>VT_NULL, VT_BOOL, VT_INT, VT_REAL, VT_STRING, VT_FUNC, VT_CFUNC, VT_OBJECT, VT_PTR</h3><h4>these constants are defined to the values of the C macros (with the prefix &quot;SGS_VT_&quot; in C) and can be compared with the values returned in <a href="#typeid-function">typeid()</a></h4></div>
<div class='item'><a name='RAND-MAX-constant'></a><hr><h2>RAND_MAX [constant]</h2><h3>RAND_MAX</h3><h4>the maximum number that can be returned by <a href="#rand-function">rand()</a></h4></div>
<div class='item'><a name='G-superglobal'></a><hr><h2>_G [superglobal]</h2><h3>A hard-coded global value that points to the global dictionary. Can be used to access non-identifier globals and change the global dictionary.</h3><pre>_G[&quot;$diff&quot;] = 5; // no way to access this via usual globals
_G = {}; // global value dictionary is changed, previous functions are lost unless stored somewhere</pre></div>
<div class='item'><a name='array-object'></a><hr><h2>array [object]</h2><ul><li>read-only properties
<ul><li>[int] size
</li><li>[int] capacity
</li><li>[var] first (valid if array is not empty, otherwise a warning is thrown and &#39;null&#39; is returned)
</li><li>[var] last (similar to &#39;first&#39;)
</li><li>[cfunc] <a href="#array-push-method">push</a>
</li><li>[cfunc] <a href="#array-pop-method">pop</a>
</li><li>[cfunc] <a href="#array-shift-method">shift</a>
</li><li>[cfunc] <a href="#array-unshift-method">unshift</a>
</li><li>[cfunc] <a href="#array-insert-method">insert</a>
</li><li>[cfunc] <a href="#array-erase-method">erase</a>
</li><li>[cfunc] <a href="#array-part-method">part</a>
</li><li>[cfunc] <a href="#array-clear-method">clear</a>
</li><li>[cfunc] <a href="#array-reverse-method">reverse</a>
</li><li>[cfunc] <a href="#array-resize-method">resize</a>
</li><li>[cfunc] <a href="#array-reserve-method">reserve</a>
</li><li>[cfunc] <a href="#array-sort-method">sort</a>
</li><li>[cfunc] <a href="#array-sort-custom-method">sort_custom</a>
</li><li>[cfunc] <a href="#array-sort-mapped-method">sort_mapped</a>
</li><li>[cfunc] <a href="#array-find-method">find</a>
</li><li>[cfunc] <a href="#array-remove-method">remove</a>
</li><li>[cfunc] <a href="#array-unique-method">unique</a>
</li><li>[cfunc] <a href="#array-random-method">random</a>
</li><li>[cfunc] <a href="#array-shuffle-method">shuffle</a>
</li></ul><li>other features:
<ul><li>read/write integer index
</li><li>full content dump
</li><li>tostring = quick content dump
</li><li>tobool = size != 0
</li><li>iterator
</li><li>cloning
</li><li>serialization
</li><li>GC-safe</li></ul></li></ul></div>
<div class='item'><a name='array-push-method'></a><hr><h2>array.push [method]</h2><h3>array.push( ... )</h3><h4>appends the variables passed to the end of array in the same order, returns the array for chaining</h4><pre>a = [ 5 ];
a.push( 6, 7 ).push( 8 ); // a = [5,6,7,8]</pre></div>
<div class='item'><a name='array-pop-method'></a><hr><h2>array.pop [method]</h2><h3>array.pop()</h3><h4>removes one item from the end of array or emits a warning if there are no items in the array, returns the removed item</h4><pre>a = [ 5 ];
a.pop(); // array is empty now
a.pop(); // warning: &quot;array is empty, cannot pop&quot;</pre></div>
<div class='item'><a name='array-shift-method'></a><hr><h2>array.shift [method]</h2><h3>array.shift()</h3><h4>removes one item from the beginning of array or emits a warning if there are no items in the array, returns the removed item</h4><pre>a = [ 5, 6 ];
a.shift(); // a = [6], returned 5</pre></div>
<div class='item'><a name='array-unshift-method'></a><hr><h2>array.unshift [method]</h2><h3>array.unshift( ... )</h3><h4>prepends the variables passed to the beginning of array in the same order, returns the array for chaining</h4><pre>a = [ 5 ];
a.unshift( 6, 7 ); // a = [6,7,5] now</pre></div>
<div class='item'><a name='array-insert-method'></a><hr><h2>array.insert [method]</h2><h3>array.insert( int pos, ... )</h3><h4>inserts the variables passed (all arguments after first) to the position specified in the array or emits a warning on failure (index out of bounds), returns the array for chaining</h4><ul><li><code>pos</code> accepts both positive and negative values, the meaning is &quot;which value to insert before&quot;
<ul><li>negative values are converted to positive ones by adding (&lt;size&gt; + 1) to them
</li><li>beginning of array can be inserted to using position 0 or (- &lt;size&gt; - 1)
</li><li>end of array can be inserted to using position &lt;size&gt; or -1</li></ul></li></ul><pre>a = [ 5, 7 ];
a.insert( 1, 6 ); // inserts 6 at position 1 (before item with index 1)
a.insert( -1, 8 ); // appends to the end of array, a = [5,6,7,8] now</pre></div>
<div class='item'><a name='array-erase-method'></a><hr><h2>array.erase [method]</h2><h3>array.erase( int[, int] )</h3><h4>erases item or a range of items from the array, depending on the arguments passed or emits a warning on failure, returns the array for chaining</h4><ul><li>both arguments have same index processing rules as <a href="#array-object">array</a>.insert(), but with one difference - if both arguments are passed, after resolving (converting negative indices to positive ones, if there are any), first must be smaller than second</li></ul><pre>a = [ 5, 6, 7, 8 ];
a.erase( 1, 2 ); // erases all items between position 1 and 2, including; gives a = [5,8]
a.erase( 0 ); // a = [8]</pre></div>
<div class='item'><a name='array-part-method'></a><hr><h2>array.part [method]</h2><h3>array.part( int from[, int max ] )</h3><h4>returns a new array starting from index <code>from</code>, with the max. size <code>max</code></h4><ul><li>if <code>from</code> is negative, it is subtracted from the end of array
</li><li><code>max</code> cannot be negative, everything else is allowed</li></ul><pre>a = [ 5, 6, 7, 8 ];
a.part( 1, 2 ); // returns [6,7]
a.part( -5, 2 ); // returns [5]
a.part( 3 ); // returns [8]</pre></div>
<div class='item'><a name='array-clear-method'></a><hr><h2>array.clear [method]</h2><h3>array.clear()</h3><h4>erases all items from the array, returns the array for chaining</h4><pre>a = [ 1, &quot;asd&quot;, 8 ];
a.clear(); // a = []</pre></div>
<div class='item'><a name='array-reverse-method'></a><hr><h2>array.reverse [method]</h2><h3>array.reverse()</h3><h4>reverses the order of items in the original array, returns the original array for chaining</h4><pre>a = [ 1, 2, 3 ];
b = a;
a.reverse(); // a = [3,2,1]
print( b ); // prints [3,2,1]</pre></div>
<div class='item'><a name='array-resize-method'></a><hr><h2>array.resize [method]</h2><h3>array.resize( int size )</h3><h4>changes the size of the array, returns the array for chaining</h4><ul><li><code>size</code> must be larger than or equal to 0
</li><li>if previous size was less than passed to the method, null variables are appended
</li><li>if previous size was more than passed to the method, items are popped from the end of the array
</li><li>if size was not changed, nothing else will change</li></ul><pre>a = [ 5, 6, 7 ];
a.resize( 5 ); // a = [5,6,7,null,null]
a.resize( 2 ); // a = [5,6]</pre></div>
<div class='item'><a name='array-reserve-method'></a><hr><h2>array.reserve [method]</h2><h3>array.reserve( int capacity )</h3><h4>reserves the space for the requested number of elements in the array, returns the array for chaining</h4><ul><li><code>capacity</code> must be larger than or equal to 0
</li><li>if previous capacity was less than passed to the method, capacity will be increased to the requested amount
</li><li>if previous capacity was more than or equal to what was passed to the method, nothing will change</li></ul><pre>a = [ 5, 6, 7 ];
a.capacity( 1 ); // nothing happens
a.capacity( 5 ); // a.capacity = 5 and two variable additions can now happen without reallocations</pre></div>
<div class='item'><a name='array-sort-method'></a><hr><h2>array.sort [method]</h2><h3>array.sort([ bool reverse ])</h3><h4>sorts the array using the <a href="#sgs-Compare-function">sgs_Compare</a> C API function for comparisons, returns the array for chaining</h4><ul><li>if <code>reverse</code> is true, array is sorted in the reverse order</li></ul><pre>a = [ 6, 8, 7, 5 ];
a.sort(); // a = [5,6,7,8]</pre></div>
<div class='item'><a name='array-sort-custom-method'></a><hr><h2>array.sort_custom [method]</h2><h3>array.sort_custom( callable[, bool reverse ] )</h3><h4>sorts the array using the callable for comparisons, returns the array for chaining</h4><p>
<em class='notice-bgr'>This function is considerably slower than <a href="#array-object">array</a>.sort or <a href="#array-object">array</a>.sort_mapped so prefer those if performance matters.</em>
</p><ul><li>callable must return a number, specifying the relative order of the two passed arguments: less than 0 if first variable should be placed before second, greater than 0 if first variable should be placed after second, or 0 if it doesn&#39;t matter
</li><li>if <code>reverse</code> is true, array is sorted in the reverse order</li></ul><pre>a = [ 6, 8, 7, 5 ];
// this code will sort numbers into odd/even ones and in ascending order
a.sort_custom( function(a,b){return a-b+(b%2-a%2)*1000; } ); // a = [5,7,6,8]</pre></div>
<div class='item'><a name='array-sort-mapped-method'></a><hr><h2>array.sort_mapped [method]</h2><h3>array.sort_mapped( array map[, bool reverse ] );</h3><h4>sorts the array by sorting the passed array and applying the index map to the first one, returns the array for chaining</h4><ul><li>both arrays must have the same size, otherwise a warning is emitted
</li><li>all variables in the mapping array are interpreted as &#39;real&#39; values
</li><li>if <code>reverse</code> is true, array is sorted in the reverse order</li></ul><pre>a = [ 5, 6, 7, 8 ];
b = [ 3, 1, 4, 2 ];
a.sort_mapped( b ); // a = [6,8,5,7]</pre></div>
<div class='item'><a name='array-find-method'></a><hr><h2>array.find [method]</h2><h3>array.find( var item[, bool strict[, int from ]] )</h3><h4>attempts to find <code>item</code> in array, starting from 0 or the index passed with <code>from</code>, if it exists, using basic or strict equality comparisons (depending on `strict`), returning the index or &#39;null&#39; if item was not found</h4><ul><li>if strict comparisons are enabled, variable types are also checked for equality</li></ul><pre>a = [ 5, 6, 7, 8 ];
a.find( &quot;7&quot; ); // returns 2
a.find( &quot;7&quot;, true ); // returns null</pre></div>
<div class='item'><a name='array-remove-method'></a><hr><h2>array.remove [method]</h2><h3>array.remove( var item[, bool strict[, bool all[, int from ]]] )</h3><h4>attepts to find and remove first or all <code>item</code> variables in array (depending on `all`), according to the rules specified in <a href="#array-object">array</a>.find(), returning the number of removed items</h4><pre>a = [ 5, 2, 6, 7, 8, 2 ];
a.remove( &quot;7&quot; ); // returns 1; a = [5,2,6,8,2]
a.remove( &quot;6&quot;, true ); // returns 0; a remains unchanged
a.remove( 2, false, true ); // returns 2; a = [5,6,8]</pre></div>
<div class='item'><a name='array-unique-method'></a><hr><h2>array.unique [method]</h2><h3>array.unique( bool strconv = false )</h3><h4>returns an array without duplicates, where a duplicate is a strictly equal variable or a string conversion match</h4><ul><li>if <code>strconv</code> is true, items are converted to strings before comparison</li></ul><pre>a = [ 5, 3, 2, 3, 2, &quot;3&quot; ];
a.unique(); // returns [5,3,2,&quot;3&quot;]
a.unique( true ); // returns [5,3,2]</pre></div>
<div class='item'><a name='array-random-method'></a><hr><h2>array.random [method]</h2><h3>array.random( int num )</h3><h4>return <code>num</code> randomly chosen items from the array</h4><ul><li>to retrieve a part of the array in random order without duplicates, <a href="#array-object">array</a>.shuffle can be used
</li><li>items after RAND_MAX will currently not be returned</li></ul></div>
<div class='item'><a name='array-shuffle-method'></a><hr><h2>array.shuffle [method]</h2><h3>array.shuffle()</h3><h4>change the order of items in the array</h4></div>
<div class='item'><a name='dict-object'></a><hr><h2>dict [object]</h2><ul><li>features:
<ul><li>read/write string index
</li><li>read/write string properties and integer index-via-property
</li><li>full content dump
</li><li>tostring = quick content dump
</li><li>tobool = size != 0
</li><li>iterator
</li><li>cloning
</li><li>serialization
</li><li>GC-safe
</li><li>type identification (returns the string &quot;dict&quot;)</li></ul></li></ul></div>
<div class='item'><a name='map-object'></a><hr><h2>map [object]</h2><ul><li>features:
<ul><li>read/write index
</li><li>read/write properties
</li><li>full content dump
</li><li>tostring = quick content dump
</li><li>tobool = size != 0
</li><li>iterator
</li><li>cloning
</li><li>serialization
</li><li>GC-safe
</li><li>type identification (returns the string &quot;map&quot;)</li></ul></li></ul></div>
<div class='item'><a name='class-object'></a><hr><h2>class [object]</h2><ul><li>read/write properties
<ul><li>[var] _super
</li></ul><li>other features
<ul><li>read/write pass-through index
</li><li>read/write pass-through properties (except string &quot;_super&quot;)
</li><li>full content dump
</li><li>tobool = ENOTSUP, overridable via &quot;__tobool&quot;
</li><li>toint = ENOTSUP, overridable via &quot;__toint&quot;
</li><li>toreal = ENOTSUP, overridable via &quot;__toreal&quot;
</li><li>tostring = &quot;class&quot;, overridable via &quot;__tostring&quot;
</li><li>cloning, overridable via &quot;__clone&quot;
</li><li>type identification (returns the string &quot;class&quot;, overridable via &quot;__typeof&quot;)
</li><li>overridable arithmetic/comparison operations
</li><li>overridable object call
</li><li>serialization
</li><li>GC-safe</li></ul></li></ul></div>
<div class='item'><a name='Formatting-library-fmt'></a><hr><h2>Formatting library (&quot;fmt&quot;)</h2><p>
This library includes functions and objects for parsing binary and text buffers.
</p><ul><li>binary format -- <a href="#fmt-pack-function">fmt_pack</a>, <a href="#fmt-unpack-function">fmt_unpack</a>, <a href="#fmt-pack-count-function">fmt_pack_count</a>, <a href="#fmt-pack-size-function">fmt_pack_size</a>
</li><li>base64 format -- <a href="#fmt-base64-encode-function">fmt_base64_encode</a>, <a href="#fmt-base64-decode-function">fmt_base64_decode</a>
</li><li>text format -- <a href="#fmt-parser-object">fmt_parser</a>, <a href="#fmt-text-function">fmt_text</a>, <a href="#fmt-charcc-function">fmt_charcc</a></li></ul><h4>Functions:</h4><ul><li><a href="#fmt-pack-function">fmt_pack</a> - pack variables into a byte buffer, according to the format string
</li><li><a href="#fmt-unpack-function">fmt_unpack</a> - unpack byte buffer to an array of variables, according to the format string
</li><li><a href="#fmt-pack-count-function">fmt_pack_count</a> - returns the number of items found in a packing format string
</li><li><a href="#fmt-pack-size-function">fmt_pack_size</a> - returns the number of bytes found in a packing format string
</li><li><a href="#fmt-base64-encode-function">fmt_base64_encode</a> - encodes a byte buffer in base64 character buffer (A-Za-z0-9+/)
</li><li><a href="#fmt-base64-decode-function">fmt_base64_decode</a> - decodes a base64 character buffer (A-Za-z0-9+/) to a byte buffer
</li><li><a href="#fmt-text-function">fmt_text</a> - formats specified variables according to the format string
</li><li><a href="#fmt-parser-object">fmt_parser</a> - creates a text parser object with the specified stream reading function
</li><li><a href="#fmt-string-parser-function">fmt_string_parser</a> - creates a text parser object that reads from the specified string
</li><li><a href="#fmt-file-parser-function">fmt_file_parser</a> - creates a text parser object that reads from the specified file
</li><li><a href="#fmt-charcc-function">fmt_charcc</a> - checks if a character is in the character class</li></ul><h4>Objects and their methods:</h4><ul><li><a href="#fmt-parser-object">fmt_parser</a> - formatted text string-parsing object
</li><li><a href="#fmt-parser-read-method">read</a> - read the specified number of characters from the stream
</li><li><a href="#fmt-parser-getchar-method">getchar</a> - read one character from the stream
</li><li><a href="#fmt-parser-readcc-method">readcc</a> - read characters while they match the specified class
</li><li><a href="#fmt-parser-skipcc-method">skipcc</a> - skip characters while they match the specified class
</li><li><a href="#fmt-parser-read-real-method">read_real</a> - read with the real value character class, optionally return real
</li><li><a href="#fmt-parser-read-int-method">read_int</a> - read with the integer value character class, optionally return integer
</li><li><a href="#fmt-parser-read-binary-int-method">read_binary_int</a> - read with the binary integer character class, optionally return integer
</li><li><a href="#fmt-parser-read-octal-int-method">read_octal_int</a> - read with the octal integer character class, optionally return integer
</li><li><a href="#fmt-parser-read-decimal-int-method">read_decimal_int</a> - read with the decimal integer character class, optionally return integer
</li><li><a href="#fmt-parser-read-hex-int-method">read_hex_int</a> - read with the hexadecimal integer character class, optionally return integer
</li><li><a href="#fmt-parser-check-method">check</a> - check for presence of a string in stream</li></ul></div>
<div class='item'><a name='fmt-pack-function'></a><hr><h2>fmt_pack [function]</h2><h3>fmt_pack( string fmt, ... )</h3><h4>packs the given arguments using the format <code>fmt</code> and returns the byte buffer or returns null and emits a warning on failure</h4><ul><li>the format: character command list
<ul><li>0-9: add a digit to multiplier
</li><li>=/&lt;/&gt;/@: &quot;=&quot; sets host byte order, &quot;&lt;&quot; - little endian byte order, &quot;&gt;&quot; - big endian, &quot;@&quot; - inverted
</li><li>+/-: &quot;+&quot; - unsigned integers, &quot;-&quot; - signed integers
</li><li>c/w/l/q/p: integers (c - char, 1 byte, w - word, 2 bytes, l - long, 4 bytes, q - quad-word, 8 bytes, p - pointer/size, platform-specific size of 4/8 bytes, usually)
</li><li>f/d: floating-point numbers: &quot;f&quot; - single precision, &quot;d&quot; - double precision
</li><li>s: string, multiplier sets length instead of count, as with other items
</li><li>x: padding byte (does not get read or written, can be used to advance the pointer)
</li><li>space/tab/CR/LF: invisible to the parser
</li><li>everything else resets multiplier, does nothing
</li></ul><li>sign modifiers do nothing in fmt_pack, refer to <a href="#fmt-unpack-function">fmt_unpack()</a> for their usage info</li></ul><pre>printvar( fmt_pack( &quot;3cf&quot;, 0, 1, 2, 3 ) ); // prints &#39;string [7] &quot;\x00\x01\x02\x00\x00@@&quot;&#39;</pre></div>
<div class='item'><a name='fmt-unpack-function'></a><hr><h2>fmt_unpack [function]</h2><h3>fmt_unpack( string fmt, string data )</h3><h4>unpacks the byte buffer <code>data</code> using the format <code>fmt</code>, returns array of unpacked items</h4><ul><li>unpacks c/w/l/q/p to integers, f/d to floats, s to strings
</li><li>if signed numbers are expected (as set by the &quot;-&quot; modifier), the sign bit of the expected type is extended to the end of the native integer type, this makes the loaded integer signed
</li><li>refer to <a href="#fmt-pack-function">fmt_pack()</a> for more info about the format</li></ul><pre>print fmt_unpack( &quot;3ld&quot;, fmt_pack( &quot;3ld&quot;, 0, 1, 2, 3 ) ); // prints [0,1,2,3]</pre></div>
<div class='item'><a name='fmt-pack-count-function'></a><hr><h2>fmt_pack_count [function]</h2><h3>fmt_pack_count( string fmt )</h3><h4>calculates the number of items to be expected in an unpacked array / required to make a successful fmt_pack call</h4><ul><li>refer to <a href="#fmt-pack-function">fmt_pack()</a> for more info about the format</li></ul><pre>print fmt_pack_count( &quot;3ld&quot; ); // prints 4</pre></div>
<div class='item'><a name='fmt-pack-size-function'></a><hr><h2>fmt_pack_size [function]</h2><h3>fmt_pack_size( string fmt )</h3><h4>calculates the number of bytes generated by a successful fmt_pack call / required to successfully unpack data using the given format</h4><ul><li>refer to <a href="#fmt-pack-function">fmt_pack()</a> for more info about the format</li></ul><pre>print fmt_pack_size( &quot;3ld&quot; ); // prints 20</pre></div>
<div class='item'><a name='fmt-base64-encode-function'></a><hr><h2>fmt_base64_encode [function]</h2><h3>fmt_base64_encode( string data )</h3><h4>encodes data to produce base64 text data</h4><ul><li>encoding is done using the following table (shortened): &quot;A-Za-z0-9+/&quot;</li></ul><pre>print fmt_base64_encode( &quot;hello world&quot; ); // prints &quot;aGVsbG8gd29ybGQ=&quot;</pre></div>
<div class='item'><a name='fmt-base64-decode-function'></a><hr><h2>fmt_base64_decode [function]</h2><h3>fmt_base64_decode( string b64text )</h3><h4>decodes base64 text data</h4><ul><li>decoding is done using the table mentioned in <a href="#fmt-base64-encode-function">fmt_base64_encode()</a></li></ul><pre>fmt_base64_decode( fmt_base64_encode( &quot;hello world&quot; ) ) == &quot;hello world&quot; // returns true</pre></div>
<div class='item'><a name='fmt-text-function'></a><hr><h2>fmt_text [function]</h2><h3>fmt_text( string text, ... )</h3><h4>parses all format specifiers in <code>text</code> and returns the result</h4><p>
<em class='notice-bgr'>see <a href="#string-format-function">string_format</a> if you need position (argument index) specifications in the format string</em>
</p><ul><li>the general format of a format specifier is as follows: {fmt[size][.prec][r][p&lt;char&gt;]}
<ul><li>fmt: one-character output type (b-binary, o-octal, d-decimal, x/X-hexadecimal, f-floating-point, g/G-compact floating-point, e/E-scientific floating-point, s-valid string, c-always converted to string)
</li><li>size: minimum number of characters to print
</li><li>prec: precision of floating-point variables, string length limit
</li><li>r: add &quot;r&quot; to right-pad (left-justify)
</li><li>p&lt;char&gt;: add &quot;p&quot; and any character to set that character as the padding character (default: space/0x20)
</li></ul><li>if anything unexpected happens, this function will emit a warning and put &quot;#error#&quot; in the place of a format specifier</li></ul><pre>print fmt_text( &quot;{d} -&gt; {x}&quot;, 1337, 1337 ); // prints &quot;1337 -&gt; 539&quot;
print fmt_text( &quot;null: {d}, {s}, {c}&quot;, null, null, null ); // prints &quot;null: #error#, #error#, null&quot; and emits two warnings for item 1 and item 2
print fmt_text( &quot;pi: {f10.10r} {g10r} {E10r}&quot;, M_PI, M_PI, M_PI ); // &quot;pi: 3.1415926536 3.14159    3.141593E+000&quot;</pre></div>
<div class='item'><a name='fmt-parser-function'></a><hr><h2>fmt_parser [function]</h2><h3>fmt_parser( callable[, buffersize ] )</h3><h4>creates a <a href="#fmt-parser-object">fmt_parser</a> object, connected to the callable</h4><ul><li>the callable is a function that returns at most the number of bytes requested from the stream
<ul><li>if previous request reached end, subsequent requests must return &#39;null&#39;</li></ul></li></ul><pre>f = io_file( &quot;test.txt&quot;, FILE_READ );
// usually it is easier to use @fmt_file_parser instead of the next line of code
p = fmt_parser( function( num ) use( file ){ if( file.eof() ) return null; return file.read( num ); } );</pre></div>
<div class='item'><a name='fmt-string-parser-function'></a><hr><h2>fmt_string_parser [function]</h2><h3>fmt_string_parser( string, offset = 0[, buffersize ] )</h3><h4>creates a <a href="#fmt-parser-object">fmt_parser</a> object, connected to a string reader object, initialized to the given offset and buffer size</h4><pre>p = fmt_string_parser( &quot;this is a test&quot; );
p.readcc( &quot;a-z&quot; ); // returns &quot;this&quot;</pre></div>
<div class='item'><a name='fmt-file-parser-function'></a><hr><h2>fmt_file_parser [function]</h2><h3>fmt_file_parser( file[, buffersize ] )</h3><h4>creates a <a href="#fmt-parser-object">fmt_parser</a> object, connected to a file reader object, initialized to the given buffer size</h4><pre>p = fmt_file_parser( io_file( &quot;something.txt&quot;, FILE_READ ) );
p.readcc( &quot;a-z&quot; ); // returns something</pre></div>
<div class='item'><a name='fmt-charcc-function'></a><hr><h2>fmt_charcc [function]</h2><h3>fmt_charcc( string char, string class )</h3><h4>checks if the first character of string <code>char</code> is included in the character class <code>class</code></h4><ul><li>character class is a regex-like list of specific symbols and ranges (its low and high symbols separated by &quot;-&quot;), optionally prepended by &quot;^&quot; that inverts the scope of the class</li></ul><pre>fmt_charcc( &quot;.&quot;, &quot;a-zA-Z0-9&quot; ); // returns false
fmt_charcc( &quot;x&quot;, &quot;a-zA-Z0-9&quot; ); // returns true</pre></div>
<div class='item'><a name='fmt-parser-object'></a><hr><h2>fmt_parser [object]</h2><p>
* read-only properties
 - [bool] at_end
 - [bool] stream_offset
 - [cfunc] <a href="#fmt-parser-read-method">read</a>
 - [cfunc] <a href="#fmt-parser-getchar-method">getchar</a>
 - [cfunc] <a href="#fmt-parser-readcc-method">readcc</a>
 - [cfunc] <a href="#fmt-parser-skipcc-method">skipcc</a>
 - [cfunc] <a href="#fmt-parser-read-real-method">read_real</a>
 - [cfunc] <a href="#fmt-parser-read-int-method">read_int</a>
 - [cfunc] <a href="#fmt-parser-read-binary-int-method">read_binary_int</a>
 - [cfunc] <a href="#fmt-parser-read-octal-int-method">read_octal_int</a>
 - [cfunc] <a href="#fmt-parser-read-decimal-int-method">read_decimal_int</a>
 - [cfunc] <a href="#fmt-parser-read-hex-int-method">read_hex_int</a>
 - [cfunc] <a href="#fmt-parser-check-method">check</a>
* other features:
 - GC-safe
</p></div>
<div class='item'><a name='fmt-parser-read-method'></a><hr><h2>fmt_parser.read [method]</h2><h3>fmt_parser.read( int num )</h3><h4>reads at most <code>num</code> bytes from stream and returns them as string</h4><ul><li>if 0 bytes are returned, it&#39;s quite safe to assume that the function has reached the end of file but check the at_end property to be sure
</li><li>may return null and emit a warning on unexpected read errors</li></ul><pre>stream = fmt_string_parser( &quot;action&quot; );
stream.read( 5 ); // returns &quot;actio&quot;</pre></div>
<div class='item'><a name='fmt-parser-getchar-method'></a><hr><h2>fmt_parser.getchar [method]</h2><h3>fmt_parser.getchar( bool peek = false, bool as_int = false )</h3><h4>returns a character from stream</h4><ul><li>if <code>peek</code> is true, stream is not advanced (next read operation will also work on the same character)
</li><li>if <code>as_int</code> is true, character is returned as integer (as one-character string otherwise)
</li><li>may return null and emit a warning on unexpected read errors</li></ul><pre>stream = fmt_string_parser( &quot;action&quot; );
stream.read( true ); // returns &quot;a&quot;
stream.read( true, true ); // returns 97
stream.read(); // returns &quot;a&quot;
stream.read(); // returns &quot;c&quot;</pre></div>
<div class='item'><a name='fmt-parser-readcc-method'></a><hr><h2>fmt_parser.readcc [method]</h2><h3>fmt_parser.readcc( string class, int num = 2^31-1 (0x7fffffff) )</h3><h4>reads and returns at most <code>num</code> bytes that match the character class <code>class</code></h4><ul><li>returns null and emits a warning if the class is empty/only contains the inversion symbol &quot;^&quot;
</li><li>may return null and emit a warning on unexpected read errors</li></ul><pre>stream = fmt_string_parser( &quot;what is this&quot; );
stream.readcc( &quot;a-z&quot; ); // returns &quot;what&quot;
stream.readcc( &quot;^a-z&quot; ); // returns &quot; &quot;</pre></div>
<div class='item'><a name='fmt-parser-skipcc-method'></a><hr><h2>fmt_parser.skipcc [method]</h2><h3>fmt_parser.skipcc( string class, int num = 2^31-1 (0x7fffffff) )</h3><h4>skips at most <code>num</code> bytes that match the character class <code>class</code> and returns the number of bytes skipped</h4><ul><li>returns null and emits a warning if the class is empty/only contains the inversion symbol &quot;^&quot;
</li><li>may return null and emit a warning on unexpected read errors</li></ul><pre>stream = fmt_string_parser( &quot;what is this&quot; );
stream.skipcc( &quot;a-z&quot; ); // returns 4
stream.skipcc( &quot;^a-z&quot; ); // returns 1</pre></div>
<div class='item'><a name='fmt-parser-read-real-method'></a><hr><h2>fmt_parser.read_real [method]</h2><h3>fmt_parser.read_real( bool as_real = true )</h3><h4>returns characters read with the character class &quot;-+0-9.eE&quot;, optionally returned as a real value</h4></div>
<div class='item'><a name='fmt-parser-read-int-method'></a><hr><h2>fmt_parser.read_int [method]</h2><h3>fmt_parser.read_int( bool as_int = true )</h3><h4>returns characters read with the character class &quot;-+0-9A-Fa-fxob&quot;, optionally returned as an int value</h4></div>
<div class='item'><a name='fmt-parser-read-binary-int-method'></a><hr><h2>fmt_parser.read_binary_int [method]</h2><h3>fmt_parser.read_binary_int( bool as_int = true )</h3><h4>returns characters read with the character class &quot;0-1&quot;, optionally returned as an int value</h4></div>
<div class='item'><a name='fmt-parser-read-octal-int-method'></a><hr><h2>fmt_parser.read_octal_int [method]</h2><h3>fmt_parser.read_octal_int( bool as_int = true )</h3><h4>returns characters read with the character class &quot;0-7&quot;, optionally returned as an int value</h4></div>
<div class='item'><a name='fmt-parser-read-decimal-int-method'></a><hr><h2>fmt_parser.read_decimal_int [method]</h2><h3>fmt_parser.read_decimal_int( bool as_int = true )</h3><h4>returns characters read with the character class &quot;-+0-9&quot;, optionally returned as an int value</h4></div>
<div class='item'><a name='fmt-parser-read-hex-int-method'></a><hr><h2>fmt_parser.read_hex_int [method]</h2><h3>fmt_parser.read_hex_int( bool as_int = true )</h3><h4>returns characters read with the character class &quot;0-9a-fA-F&quot;, optionally returned as an int value</h4></div>
<div class='item'><a name='fmt-parser-check-method'></a><hr><h2>fmt_parser.check [method]</h2><h3>fmt_parser.check( string str, bool ci = false, bool partial = false )</h3><h4>returns whether the specified string was found at the current position</h4><ul><li><code>ci</code> makes matching case-insensitive
</li><li>if <code>partial</code> is true, function returns the number of characters successfully matched instead of whether everything has been matched</li></ul></div>
<div class='item'><a name='I-O-library-io'></a><hr><h2>I/O library (&quot;io&quot;)</h2><p>
This library contains the functions necessary to work with the file system (files and directories).
</p><h4>Functions:</h4><ul><li><a href="#io-setcwd-function">io_setcwd</a> - set the current working directory
</li><li><a href="#io-getcwd-function">io_getcwd</a> - returns the current working directory
</li><li><a href="#io-getexecpath-function">io_getexecpath</a> - returns the absolute executable path
</li><li><a href="#io-rename-function">io_rename</a> - rename or move a file system item
</li><li><a href="#io-file-exists-function">io_file_exists</a> - returns whether the specified file exists and is accessible
</li><li><a href="#io-dir-exists-function">io_dir_exists</a> - returns whether the specified directory exists and is accessible
</li><li><a href="#io-stat-function">io_stat</a> - returns information about a file system item
</li><li><a href="#io-dir-create-function">io_dir_create</a> - create a directory
</li><li><a href="#io-dir-delete-function">io_dir_delete</a> - remove a directory
</li><li><a href="#io-file-delete-function">io_file_delete</a> - deletes a file
</li><li><a href="#io-file-write-method">io_file_write</a> - writes byte buffer to file, creating or overwriting it, as necessary
</li><li><a href="#io-file-read-method">io_file_read</a> - reads byte buffer from a file
</li><li><a href="#io-file-object">io_file</a> - creates a <a href="#io-file-object">io_file</a> object, optionally opening it
</li><li><a href="#io-dir-function">io_dir</a> - creates a <a href="#io-dir-function">io_dir</a> directory iterator object, set to read a specific directory</li></ul><h4>Objects and their methods:</h4><ul><li><a href="#io-file-object">io_file</a> - file object
<ul><li><a href="#io-file-open-method">open</a> - open a file
</li><li><a href="#io-file-close-method">close</a> - close the currently open file (if any)
</li><li><a href="#io-file-read-method">read</a> - read from the open file
</li><li><a href="#io-file-write-method">write</a> - write to the open file
</li><li><a href="#io-file-seek-method">seek</a> - change read/write position in file
</li><li><a href="#io-file-flush-method">flush</a> - flush the write buffer
</li><li><a href="#io-file-setbuf-method">setbuf</a> - change the size and flush trigger of the write buffer or disables it
</li></ul><li><a href="#io-dir-function">io_dir</a> - directory iterator object, for use in &quot;foreach&quot;</li></ul><h4>Constants:</h4><ul><li><a href="#FILE-constants">FILE_***</a> - mode constants for <a href="#io-file-object">io_file</a>.open / <a href="#io-file-function">io_file [function]</a>
</li><li><a href="#SEEK-constants">SEEK_***</a> - mode constants for <a href="#io-file-object">io_file</a>.seek
</li><li><a href="#FST-constants">FST_***</a> - file system item type constants for <a href="#io-stat-function">io_stat</a></li></ul></div>
<div class='item'><a name='io-setcwd-function'></a><hr><h2>io_setcwd [function]</h2><h3>io_setcwd( string cwd )</h3><h4>sets the current working directory, returns bool/sets errno</h4></div>
<div class='item'><a name='io-getcwd-function'></a><hr><h2>io_getcwd [function]</h2><h3>io_getcwd()</h3><h4>returns the current working directory or null, if for some reason an error occured</h4><ul><li>in case of failure, function will set errno</li></ul></div>
<div class='item'><a name='io-getexecpath-function'></a><hr><h2>io_getexecpath [function]</h2><h3>io_getexecpath()</h3><h4>returns the path of the executable file the script is executed in</h4><ul><li>in case of failure, function will set errno</li></ul></div>
<div class='item'><a name='io-rename-function'></a><hr><h2>io_rename [function]</h2><h3>io_rename( string path, string newpath )</h3><h4>attempts to rename the file, returns bool/sets errno</h4><ul><li>wraps the C library function rename
</li><li>to avoid moving the file/directory, make sure both paths are of the same origin</li></ul></div>
<div class='item'><a name='io-file-exists-function'></a><hr><h2>io_file_exists [function]</h2><h3>io_file_exists( string file )</h3><h4>checks if file exists and is accessible by the process at the moment, returns true on success, false otherwise</h4><ul><li>uses the C library functions fopen/fclose</li></ul></div>
<div class='item'><a name='io-dir-exists-function'></a><hr><h2>io_dir_exists [function]</h2><h3>io_dir_exists( string dir )</h3><h4>checks if directory exists and is accessible by the process at the moment, returns true on success, false otherwise</h4><ul><li>uses the C library functions opendir,closedir where supported properly, Windows API Find*** functions otherwise</li></ul></div>
<div class='item'><a name='io-stat-function'></a><hr><h2>io_stat [function]</h2><h3>io_stat( string fsitem )</h3><h4>returns info about the file system item <code>fsitem</code>, as dict</h4><ul><li>the returned object contains the following properties:
<ul><li>atime: last access time
</li><li>ctime: creation time
</li><li>mtime: last modification time
</li><li>type: enum (one of FST_DIR/FST_FILE/FST_UNKNOWN)
</li><li>size: size of item
</li></ul><li>uses the C library function stat/_stat</li></ul></div>
<div class='item'><a name='io-dir-create-function'></a><hr><h2>io_dir_create [function]</h2><h3>io_dir_create( string path, int mode = 0o777 )</h3><h4>attempts to create a directory at the specified path, with the specified access mode <code>mode</code>, returns bool/sets errno</h4><ul><li><code>mode</code> is ignored on Windows
</li><li>uses the C library function mkdir/_mkdir</li></ul></div>
<div class='item'><a name='io-dir-delete-function'></a><hr><h2>io_dir_delete [function]</h2><h3>io_dir_delete( string path )</h3><h4>attempts to delete a directory at the specified path, returns bool/sets errno</h4><ul><li>uses the C library function rmdir/_rmdir</li></ul></div>
<div class='item'><a name='io-file-delete-function'></a><hr><h2>io_file_delete [function]</h2><h3>io_file_delete( string path )</h3><h4>attempts to delete a file at the specified path, returns bool/sets errno</h4><ul><li>uses the C library function remove</li></ul></div>
<div class='item'><a name='io-file-write-function'></a><hr><h2>io_file_write [function]</h2><h3>io_file_write( string path, string data )</h3><h4>writes the byte buffer <code>data</code> to the file pointed to by <code>path</code>, returns bool/sets errno</h4></div>
<div class='item'><a name='io-file-read-function'></a><hr><h2>io_file_read [function]</h2><h3>io_file_read( string path )</h3><h4>reads the byte buffer from file at <code>path</code>, returns buffer as string or null/sets errno</h4></div>
<div class='item'><a name='io-file-object'></a><hr><h2>io_file [object]</h2><ul><li>read-only properties
<ul><li>[int] offset
</li><li>[int] size
</li><li>[bool] error
</li><li>[bool] eof
</li><li>[cfunc] <a href="#io-file-open-method">open</a>
</li><li>[cfunc] <a href="#io-file-close-method">close</a>
</li><li>[cfunc] <a href="#io-file-read-method">read</a>
</li><li>[cfunc] <a href="#io-file-write-method">write</a>
</li><li>[cfunc] <a href="#io-file-seek-method">seek</a>
</li><li>[cfunc] <a href="#io-file-flush-method">flush</a>
</li><li>[cfunc] <a href="#io-file-setbuf-method">setbuf</a>
</li></ul><li>other features:
<ul><li>tobool = returns whether file is open or not
</li><li>GC-safe</li></ul></li></ul></div>
<div class='item'><a name='io-file-open-method'></a><hr><h2>io_file.open [method]</h2><h3>io_file.open( string name, int mode )</h3><h4>closes the previously open file if any, opens the file <code>name</code> for operation mode <code>mode</code>, returns bool/sets errno</h4><ul><li><code>mode</code> must be one of FILE_READ, FILE_WRITE or FILE_READ|FILE_WRITE
</li><li>file is always opened in binary mode</li></ul><pre>f = io_file();
f.open( &quot;file&quot; ); // returns true or false, sets errno accordingly</pre></div>
<div class='item'><a name='io-file-close-method'></a><hr><h2>io_file.close [method]</h2><h3>io_file.close()</h3><h4>closes the previously open file, if any, returns whether the file was open or not</h4><pre>f = io_file( &quot;file.txt&quot; );
f.close(); // returns true if the file existed
f.close(); // returns false</pre></div>
<div class='item'><a name='io-file-read-method'></a><hr><h2>io_file.read [method]</h2><h3>io_file.read( int num )</h3><h4>reads and returns at most <code>num</code> bytes from file, sets errno</h4></div>
<div class='item'><a name='io-file-write-method'></a><hr><h2>io_file.write [method]</h2><h3>io_file.write( string data )</h3><h4>writes the byte buffer <code>data</code> to the file, sets errno</h4></div>
<div class='item'><a name='io-file-seek-method'></a><hr><h2>io_file.seek [method]</h2><h3>io_file.seek( int off, int mode )</h3><h4>sets the offset in file, returns bool/sets errno</h4><ul><li><code>mode</code> must be one of SEEK_SET (sets as-is), SEEK_CUR (sets relative to current), SEEK_END (sets relative to end)</li></ul></div>
<div class='item'><a name='io-file-flush-method'></a><hr><h2>io_file.flush [method]</h2><h3>io_file.flush()</h3><h4>flushes a buffered file, returns bool</h4></div>
<div class='item'><a name='io-file-setbuf-method'></a><hr><h2>io_file.setbuf [method]</h2><h3>io_file.setbuf( int size )</h3><h4>sets the size of file buffer (0 to disable buffering), returns bool</h4><ul><li>buffering allows to avoid committing each write immediately to disk, resulting in a performance gain, however it may introduce issues if application is expected to fail at any moment, resulting in some data not being written in such cases</li></ul></div>
<div class='item'><a name='io-file-function'></a><hr><h2>io_file [function]</h2><h3>io_file([ string name, int mode ])</h3><h4>creates and returns a file, optionally allowing to open it on creation</h4><ul><li>see <a href="#io-file-object">io_file</a>.open() for more info on opening the file</li></ul></div>
<div class='item'><a name='io-dir-directory-iterator-object'></a><hr><h2>io_dir (directory_iterator) [object]</h2><ul><li>features:
<ul><li>tostring = &quot;directory_iterator&quot;
</li><li>iterator interface (key = whether real item, value = item name)
<ul><li>real items are all except &quot;.&quot; and &quot;..&quot;
</li></ul><li>returns self as iterator
</li><li>GC-safe
</li><li>type identification (returns the string &quot;directory_iterator&quot;)</li></ul></li></ul></div>
<div class='item'><a name='io-dir-function'></a><hr><h2>io_dir [function]</h2><h3>io_dir( string dir )</h3><h4>creates a directory iterator for the directory <code>dir</code>, sets errno, returns null and emits a warning on failure</h4></div>
<div class='item'><a name='FILE-constants'></a><hr><h2>FILE_*** [constants]</h2><h3>FILE_READ, FILE_WRITE</h3><h4>mode constants for <a href="#io-file-object">io_file</a>.open / <a href="#io-file-function">io_file [function]</a></h4></div>
<div class='item'><a name='SEEK-constants'></a><hr><h2>SEEK_*** [constants]</h2><h3>SEEK_SET, SEEK_CUR, SEEK_END</h3><h4>mode constants for <a href="#io-file-object">io_file</a>.seek</h4></div>
<div class='item'><a name='FST-constants'></a><hr><h2>FST_*** [constants]</h2><h3>FST_UNKNOWN, FST_FILE, FST_DIR</h3><h4>file system item type constants for <a href="#io-stat-function">io_stat</a></h4></div>
<div class='item'><a name='Math-library-math'></a><hr><h2>Math library (&quot;math&quot;)</h2><p>
This library contains the basic math functions for processing real values.
</p><h4>Functions:</h4><p>
 - <a href="#abs-function">abs</a> - returns the absolute value of x
 - <a href="#floor-function">floor</a> - returns rounded-down value of x
 - <a href="#ceil-function">ceil</a> - returns the rounded-up value of x
 - <a href="#round-function">round</a> - returns the rounded-to-nearest-integer value of x
 - <a href="#pow-function">pow</a> - returns x to the power of y
 - <a href="#sqrt-function">sqrt</a> - returns a square root of x
 - <a href="#log-function">log</a> - returns the logarithm (power) of x for base y
 - <a href="#sin-function">sin</a> - returns the sine of x
 - <a href="#cos-function">cos</a> - returns the cosine of x
 - <a href="#tan-function">tan</a> - returns the tangent of x
 - <a href="#asin-function">asin</a> - returns arcsine (angle for sine value) of x
 - <a href="#acos-function">acos</a> - returns arccosine (angle for cosine value) of x
 - <a href="#atan-function">atan</a> - returns arctangent (angle for tangent value) of x
 - <a href="#atan2-function">atan2</a> - returns arctangent of x and y, using both values to extend the range of returned value
 - <a href="#deg2rad-function">deg2rad</a> - returns x degrees as radians
 - <a href="#rad2deg-function">rad2deg</a> - returns x radians as degrees
</p><h4>Constants:</h4><ul><li><a href="#Main-types">M_***</a> - mathematical constants</li></ul></div>
<div class='item'><a name='abs-function'></a><hr><h2>abs [function]</h2><h3>abs( x )</h3><h4>returns the absolute value of <code>x</code>, as <code>real</code></h4><pre>abs( 2.2 ); // real (2.2)
abs( -3.1 ); // real (3.1)</pre></div>
<div class='item'><a name='floor-function'></a><hr><h2>floor [function]</h2><h3>floor( x )</h3><h4>returns the largest integer that is not bigger than <code>x</code>, as <code>real</code></h4><pre>floor( 3.4 ); // real (3)
floor( 3.8 ); // real (3)
floor( 4.2 ); // real (4)
floor( -3.1 ); // real (-4)</pre></div>
<div class='item'><a name='ceil-function'></a><hr><h2>ceil [function]</h2><h3>ceil( x )</h3><h4>returns the smallest integer that is not smaller than <code>x</code>, as <code>real</code></h4><pre>ceil( 3.4 ); // real (4)
ceil( 3.8 ); // real (4)
ceil( 4.2 ); // real (5)
ceil( -3.1 ); // real (-3)</pre></div>
<div class='item'><a name='round-function'></a><hr><h2>round [function]</h2><h3>round( x )</h3><h4>returns the closest integer to <code>x</code>, as <code>real</code></h4><pre>round( 3.4 ); // real (3)
round( 3.8 ); // real (4)
round( 4.2 ); // real (4)
round( -3.1 ); // real (-3)</pre></div>
<div class='item'><a name='pow-function'></a><hr><h2>pow [function]</h2><h3>pow( x, y )</h3><h4>returns <code>x</code> raised to the power <code>y</code>, as <code>real</code></h4><ul><li>If base (`x`) is negative and exponent (`y`) is not an integral value, or if base is zero and exponent is negative, function returns <code>null</code> and emits a warning message.</li></ul><pre>pow( 2, 5 ); // real (32)
pow( 9, 0.5 ); // real (3)
pow( -1, 0.5 ); // null; Warning: pow(): mathematical error</pre></div>
<div class='item'><a name='sqrt-function'></a><hr><h2>sqrt [function]</h2><h3>sqrt( x )</h3><h4>returns the square root of <code>x</code>, as <code>real</code></h4><ul><li>If <code>x</code> is negative, function returns <code>null</code> and emits a warning message.</li></ul><pre>sqrt( 16 ); // real (4)
sqrt( -1 ); // null; Warning: sqrt(): mathematical error</pre></div>
<div class='item'><a name='log-function'></a><hr><h2>log [function]</h2><h3>log( x, y )</h3><h4>returns the base-`y` logarithm of <code>x</code>, as <code>real</code></h4><ul><li>If <code>x &lt;= 0</code>  or  <code>b &lt;= 0</code>  or  <code>b = 1</code>, function returns <code>null</code> and emits a warning message.</li></ul><pre>log( 9, 3 ); // real (2)
log( -1, 3 ); // .. or ..
log( 3, 0 ); // .. or ..
log( 3, 1 ); // null; Warning: log(): mathematical error</pre></div>
<div class='item'><a name='sin-function'></a><hr><h2>sin [function]</h2><h3>sin( x )</h3><h4>returns the sine of angle <code>x</code> in radians, as <code>real</code></h4><pre>sin( 0 ); // real (0)
sin( M_PI / 2 ); // real (1)
sin( M_PI / 4 ); // real (0.707107)</pre></div>
<div class='item'><a name='cos-function'></a><hr><h2>cos [function]</h2><h3>cos( x )</h3><h4>returns the cosine of angle <code>x</code> in radians, as <code>real</code></h4><pre>sin( 0 ); // real (1)
sin( M_PI ); // real (-1)
sin( M_PI / 4 ); // real (0.707107)</pre></div>
<div class='item'><a name='tan-function'></a><hr><h2>tan [function]</h2><h3>tan( x )</h3><h4>returns the tangent of angle <code>x</code> in radians, as <code>real</code></h4><pre>tan( 0 ); // real (0)
tan( 1 ); // real (1.55741)
tan( M_PI / 4 ); // real (1)</pre></div>
<div class='item'><a name='asin-function'></a><hr><h2>asin [function]</h2><h3>asin( x )</h3><h4>returns the arcsine of <code>x</code> (angle in radians), as <code>real</code></h4><ul><li>If <code>x</code> is outside the [-1,1] range, function returns <code>null</code> and emits a warning message</li></ul><pre>asin( -1 ); // real (-1.5708)
asin( 0 ); // real (0)
asin( 2 ); // null; Warning: asin(): mathematical error</pre></div>
<div class='item'><a name='acos-function'></a><hr><h2>acos [function]</h2><h3>acos( x )</h3><h4>returns the arccosine of <code>x</code> (angle in radians), as <code>real</code></h4><ul><li>If <code>x</code> is outside the [-1,1] range, function returns <code>null</code> and emits a warning message</li></ul><pre>acos( -1 ); // real (3.14159)
acos( 0 ); // real (1.5708)
acos( 2 ); // null; Warning: acos(): mathematical error</pre></div>
<div class='item'><a name='atan-function'></a><hr><h2>atan [function]</h2><h3>atan( x )</h3><h4>returns the arctangent of <code>x</code> (angle in radians), as <code>real</code></h4><pre>atan( 0 ); // real (0)
atan( 1 ); // real (0.785398)
atan( 9999999 ); // real (1.5708)</pre></div>
<div class='item'><a name='atan2-function'></a><hr><h2>atan2 [function]</h2><h3>atan2( y, x )</h3><h4>returns the extended arctangent of y/x (angle in radians), as <code>real</code></h4><ul><li>Signs of <code>x</code> and <code>y</code> are used to determine the quadrant, thus <code>y</code> is expected to be the sine of the angle to be returned (the <code>y</code> coordinate of a point) and <code>x</code> - the cosine (the <code>x</code> coordinate).</li></ul><p>
<em class='notice-bgr'>Due to the common requirement to use this function to determine the angle between two somewhat random points (usually from a simulation), it will not emit a warning when both arguments are 0 - it will return 0 instead.</em>
</p><pre>atan2( 0, 1 ); // real (0)
atan2( 1, 0 ); // real (1.5708)
atan2( -1, -1 ); // real (-2.35619)
atan2( 0, 0 ); // real (0)</pre></div>
<div class='item'><a name='deg2rad-function'></a><hr><h2>deg2rad [function]</h2><h3>deg2rad( x )</h3><h4>returns angle, converted from degrees to radians, as <code>real</code></h4><pre>deg2rad( 0 ); // real (0)
deg2rad( 180 ); // real (3.14159)
deg2rad( -90 ); // real (-1.5708)</pre></div>
<div class='item'><a name='rad2deg-function'></a><hr><h2>rad2deg [function]</h2><h3>rad2deg( x )</h3><h4>returns angle, converted from radians to degrees, as <code>real</code></h4><pre>rad2deg( 0 ); // real (0)
rad2deg( M_PI ); // real (180)
rad2deg( -M_PI / 2 ); // real (-90)</pre></div>
<div class='item'><a name='M-constants'></a><hr><h2>M_*** [constants]</h2><h3>M_PI</h3><h4>the ratio of circumference of a circle to its diameter (pi)</h4><ul><li>the value of this constant is <code>3.14159265358979323846</code></li></ul><h3>M_E</h3><h4>the natural logarithmic base (e)</h4><ul><li>the value of this constant is <code>2.7182818284590452354</code></li></ul></div>
<div class='item'><a name='OS-library-os'></a><hr><h2>OS library (&quot;os&quot;)</h2><ul><li>environment variables
</li><li>time and date
</li><li>locale / regional settings</li></ul><h4>Functions:</h4><ul><li><a href="#os-gettype-function">os_gettype</a> - returns the name of closest known OS type match, defined at compile time
</li><li><a href="#os-command-function">os_command</a> - pass command to OS command processor
</li><li><a href="#os-getenv-function">os_getenv</a> - returns the value of the specified environment variable
</li><li><a href="#os-putenv-function">os_putenv</a> - set an environment variable
</li><li><a href="#os-time-function">os_time</a> - returns the time in seconds, optionally from a different time zone
</li><li><a href="#os-get-timezone-function">os_get_timezone</a> - returns the time zone set in OS, optionally as string
</li><li><a href="#os-date-string-function">os_date_string</a> - format a time value into a string
</li><li><a href="#os-parse-time-function">os_parse_time</a> - split time value into components
</li><li><a href="#os-make-time-function">os_make_time</a> - make a time value from components
</li><li><a href="#os-get-locale-function">os_get_locale</a> - returns current locale of the specified category
</li><li><a href="#os-set-locale-function">os_set_locale</a> - set locale for the specified category
</li><li><a href="#os-get-locale-format-function">os_get_locale_format</a> - returns locale formatting info
</li><li><a href="#os-locale-strcmp-function">os_locale_strcmp</a> - compare two strings using locale</li></ul><h4>Constants:</h4><ul><li><a href="#LC-constants">LC_***</a> - locale categories</li></ul></div>
<div class='item'><a name='os-gettype-function'></a><hr><h2>os_gettype [function]</h2><h3>os_gettype()</h3><h4>returns the name of the closest known match for the operating system type, defined at library compile time</h4><ul><li>the function can detect and return the following OSes at the moment (with the preprocessor define in braces):
<ul><li>&quot;Windows&quot; (_WIN32/__WIN32__/__WINDOWS__)
</li><li>&quot;Mac OS X&quot; (__APPLE__)
</li><li>&quot;Android&quot; (__ANDROID__)
</li><li>&quot;Linux&quot; (__linux/__linux__)
</li><li>&quot;Unix&quot; (__unix/__unix__)
</li><li>&quot;POSIX&quot; (__posix)
</li><li>&quot;Unknown&quot; (..any other)</li></ul></li></ul></div>
<div class='item'><a name='os-command-function'></a><hr><h2>os_command [function]</h2><h3>os_command( string cmd )</h3><h4>passes a command to the OS command processor, returns the integer return value</h4><p>
<em class='notice-bgr'>this function can be extremely unsafe in multithreaded/incontrollable environments due to the completely undefined outcome of the call</em>
</p><ul><li>uses the C library function &#39;system&#39;</li></ul></div>
<div class='item'><a name='os-getenv-function'></a><hr><h2>os_getenv [function]</h2><h3>os_getenv( string var )</h3><h4>returns the value for the environment variable <code>var</code> or null, if there is no such value</h4></div>
<div class='item'><a name='os-putenv-function'></a><hr><h2>os_putenv [function]</h2><h3>os_putenv( string cmd )</h3><h4>sets the value for the environment variable specified in command <code>cmd</code>, returns success as bool</h4><ul><li><code>cmd</code> has the format &quot;&lt;name&gt;=&lt;value&gt;&quot;</li></ul></div>
<div class='item'><a name='os-time-function'></a><hr><h2>os_time [function]</h2><h3>os_time( real tz = &lt;local&gt; )</h3><h4>returns the time in seconds, as integer, optionally from a different time zone <code>tz</code></h4></div>
<div class='item'><a name='os-get-timezone-function'></a><hr><h2>os_get_timezone [function]</h2><h3>os_get_timezone( bool as_string = false )</h3><h4>returns the time zone set in the operating system, optionally as string in the format &quot;(+/-)HH:MM&quot;</h4></div>
<div class='item'><a name='os-date-string-function'></a><hr><h2>os_date_string [function]</h2><h3>os_date_string( string fmt, int time = os_time() )</h3><h4>returns the date/time string in the format <code>fmt</code>, optionally for a different time <code>time</code></h4><ul><li>the following item specifiers are supported (*-local-specific):
<ul><li>%a: abbreviated weekday name *
</li><li>%A: full weekday name *
</li><li>%b: abbreviated month name *
</li><li>%B: full month name *
</li><li>%c: full date/time *
</li><li>%x: full date *
</li><li>%X: full time *
</li><li>%Z: timezone name/abbreviation (could be an empty string) *
</li><li>%U: week number with first Sunday as the first day of week one *
</li><li>%W: week number with first Monday as the first day of week one *
</li><li>%C: year/100, as integer
</li><li>%d: zero-padded day of the month (01-31)
</li><li>%e: space-padded day of the month ( 1-31)
</li><li>%F: date, shortcut of &quot;%Y-%m-%d&quot;
</li><li>%H: hour in 24h format (00-23)
</li><li>%I: hour in 12h format (01-12)
</li><li>%j: day of the year (001-366)
</li><li>%m: month number (01-12)
</li><li>%M: minute (00-59)
</li><li>%p: AM or PM
</li><li>%R: hour/minute time, shortcut to %H:%M
</li><li>%s: second (00-61)
</li><li>%T: time, shortcut to %H:%M:%S
</li><li>%u: weekday with Sunday as 0
</li><li>%w: weekday with Monday as 1
</li><li>%y: 2-digit year (00-99)
</li><li>%Y: year
</li><li>%f: file-safe full time, shortcut to %Y-%m-%d_%H-%M-%S
</li><li>%t: the UNIX timestamp
</li><li>%%: prints &quot;%&quot;
</li><li>%&lt;any other&gt;: prints both characters</li></ul></li></ul></div>
<div class='item'><a name='os-parse-time-function'></a><hr><h2>os_parse_time [function]</h2><h3>os_parse_time( int time = os_time() )</h3><h4>returns <code>time</code> split into parts, as dict</h4><ul><li>the returned dict contains the following properties (all are integers):
<ul><li>year (1900-????)
</li><li>month (1-12)
</li><li>day (1-31)
</li><li>weekday (1-7)
</li><li>yearday (1-366)
</li><li>hours (0-23)
</li><li>minutes (0-59)
</li><li>seconds (0-61)</li></ul></li></ul></div>
<div class='item'><a name='os-make-time-function'></a><hr><h2>os_make_time [function]</h2><h3>os_make_time( int sec, int min = 0, int hour = 0, int mday = 0, int mon = 0, int year = 0 )</h3><h4>returns time as UNIX timestamp, generated from the arguments, using them as hints (under-/overflows may have some unexpected behavior)</h4></div>
<div class='item'><a name='os-get-locale-function'></a><hr><h2>os_get_locale [function]</h2><h3>os_get_locale( int which )</h3><h4>returns the currently set locale for the specified category</h4><ul><li><code>which</code> must be one of the LC_ constants
</li><li>the returned string is platform-specific
</li><li>wraps the C library function setlocale</li></ul></div>
<div class='item'><a name='os-set-locale-function'></a><hr><h2>os_set_locale [function]</h2><h3>os_set_locale( int which, string locale )</h3><h4>sets the locale for the specified category, returning whether the call was successful</h4><ul><li><code>which</code> must be one of the LC_ constants
</li><li>the available locale strings are platform-specific
</li><li>wraps the C library function setlocale</li></ul></div>
<div class='item'><a name='os-get-locale-format-function'></a><hr><h2>os_get_locale_format [function]</h2><h3>os_get_locale_format()</h3><h4>retrieve the formatting info of the currently set locale as a dict</h4><ul><li>wraps the C library function localeconv
</li><li>the returned data is identical to pre-C99 format of struct lconv</li></ul></div>
<div class='item'><a name='os-locale-strcmp-function'></a><hr><h2>os_locale_strcmp [function]</h2><h3>os_locale_strcmp( string a, string b )</h3><h4>compare two strings using locale to return correct sign for inequalities (good for language-correct sorting)</h4><ul><li>expected encoding depends on the platform and the locale that is currently set
</li><li>wraps the C library function strcoll</li></ul></div>
<div class='item'><a name='LC-constants'></a><hr><h2>LC_*** [constants]</h2><p>
These constants specify the categories for which locale can be changed.
</p><ul><li>LC_ALL affects every locale-related function
</li><li>LC_COLLATE: os_locale_strcmp
</li><li>LC_MONETARY: os_get_locale_format
</li><li>LC_NUMERIC: os_get_locale_format
</li><li>LC_TIME: os_date_string</li></ul></div>
<div class='item'><a name='Regular-expression-library-re'></a><hr><h2>Regular expression library (&quot;re&quot;)</h2><p>
This library includes regular expression match &amp; replace functions.
</p><h4>Functions:</h4><ul><li><a href="#re-match-function">re_match</a> - check for first match in string for pattern
</li><li><a href="#re-match-all-function">re_match_all</a> - check for all matches in string for pattern
</li><li><a href="#re-replace-function">re_replace</a> - replace all matches in string for pattern with the specified string</li></ul><h4>Constants:</h4><ul><li><a href="#RE-RETURN-constants">RE_RETURN_***</a> - flag constants for <a href="#re-match-function">re_match</a> / <a href="#re-match-all-function">re_match_all</a></li></ul></div>
<div class='item'><a name='re-match-function'></a><hr><h2>re_match [function]</h2><h3>re_match( string str, string pattern, int flags = 0, int offset = 0 )</h3><h4>check for matches in string <code>str</code> for <code>pattern</code>, returning whether a match was found or details of the first match, as specified in <code>flags</code></h4><ul><li><code>offset</code> specifies the character to start matching from, negative offset is subtracted from the end
</li><li><code>flags</code> expect RE_RETURN_CAPTURED, RE_RETURN_OFFSETS or RE_RETURN_BOTH, which is a combination of the previous two
<ul><li>if <code>flags</code> is one of the special values, function returns an array of captured ranges
<ul><li>each entry is either a string (on RE_RETURN_CAPTURED) or an array of beginning and end offsets (at positions 0 and 1, respectively, on RE_RETURN_OFFSETS) or an array of a string and the beginning and end offsets (on RE_RETURN_BOTH)
</li></ul></li></ul><li>the first character in the pattern specifies a delimiter that separates the pattern from modifiers
<ul><li>example pattern strings: &quot;/^[a-z]+/mi&quot;, &quot;#[a-z0-9_]+.*?#s&quot;
</li></ul><li>more info about the supported features and modifiers at https://github.com/snake5/sgregex</li></ul></div>
<div class='item'><a name='re-match-all-function'></a><hr><h2>re_match_all [function]</h2><h3>re_match_all( string str, string pattern, int flags = 0, int offset = 0 )</h3><h4>check for matches in string <code>str</code> for <code>pattern</code>, returning the number of matches or details of all matches, as specified in <code>flags</code></h4><ul><li>similar to <a href="#re-match-function">re_match</a>, only difference is in the return value:
<ul><li>if <code>flags</code> is one of the special values, function returns an array of matches where each match is an array of captured ranges
<ul><li>each entry is same as in <a href="#re-match-function">re_match</a></li></ul></li></ul></li></ul></div>
<div class='item'><a name='re-replace-function'></a><hr><h2>re_replace [function]</h2><h3>re_replace( string str, string pattern, string replacement )</h3><h4>find and replace all occurrences of <code>pattern</code> in string <code>str</code> with the <code>replacement</code> string</h4><ul><li>replacement string can contain backreferences in the forms &quot;$[0-9]&quot; or &quot;\[0-9]&quot; (in a string constant, a double backslash is required due to rules in SGScript)
<ul><li>there can be up to 10 backreferences, 0-9, 0 being the whole match</li></ul></li></ul></div>
<div class='item'><a name='RE-RETURN-constants'></a><hr><h2>RE_RETURN_*** [constants]</h2><p>
These constants are used in <a href="#re-match-function">re_match</a> / <a href="#re-match-all-function">re_match_all</a> to specify the format of the return value.
</p><p>
If none of these are specified (`flags` = 0), only the success state is returned (true/false/match count).
</p><ul><li>RE_RETURN_CAPTURED - return the captured string
</li><li>RE_RETURN_OFFSETS - return array of start/end offsets
</li><li>RE_RETURN_BOTH - return both the captured string and the start/end offsets in an array</li></ul></div>
<div class='item'><a name='String-library-string'></a><hr><h2>String library (&quot;string&quot;)</h2><p>
This library contains the string handling functions. In all functions, except the utf-8 ones, it is assumed that strings are byte buffers where each byte is one character. If correct indices are applied, many of them will work with multibyte strings.
</p><h4>Functions:</h4><ul><li><a href="#string-cut-function">string_cut</a> - extract a substring from a string from the specified beginning / end offsets
</li><li><a href="#string-part-function">string_part</a> - extract a substring from a string from the specified offset and length
</li><li><a href="#string-reverse-function">string_reverse</a> - reverse the order of bytes in a string
</li><li><a href="#string-pad-function">string_pad</a> - pad one or both sides of a string with a pattern string up to the specified length
</li><li><a href="#string-repeat-function">string_repeat</a> - concatenate several copies of the specified string
</li><li><a href="#string-count-function">string_count</a> - count occurences of a substring in a string
</li><li><a href="#string-find-function">string_find</a> - find first substring in the string, optionally after the specified position
</li><li><a href="#string-find-rev-function">string_find_rev</a> - find a substring by walking the string backwards, optionally before the specified position
</li><li><a href="#string-replace-function">string_replace</a> - replace parts of string according to match / replacement strings or arrays
</li><li><a href="#string-translate-function">string_translate</a> - replace parts of string according to the provided match -&gt; replacement mapping dict
</li><li><a href="#string-trim-function">string_trim</a> - trim one or both sides of string, removing the specified or default character set
</li><li><a href="#string-toupper-function">string_toupper</a> - convert all ASCII lowercase characters into uppercase equivalents
</li><li><a href="#string-tolower-function">string_tolower</a> - convert all ASCII uppercase characters into lowercase equivalents
</li><li><a href="#string-compare-function">string_compare</a> - compare strings as byte arrays
</li><li><a href="#string-implode-function">string_implode</a> - combine an array of strings, putting a separator string between each two consecutive strings
</li><li><a href="#string-explode-function">string_explode</a> - split string into parts, separated by the specified separator string
</li><li><a href="#string-charcode-function">string_charcode</a> - get the character code (byte value, as integer) from the specified position in string
</li><li><a href="#string-frombytes-function">string_frombytes</a> - make a string from an array of integer values, interpreted as bytes
</li><li><a href="#string-utf8-decode-function">string_utf8_decode</a> - decode a UTF-8 string into an array of code points
</li><li><a href="#string-utf8-encode-function">string_utf8_encode</a> - encode an array of code points into a UTF-8 string
</li><li><a href="#string-format-function">string_format</a> - format variables according to the specified format string</li></ul><h4>Constants:</h4><ul><li>STRING_NO_REV_INDEX - used by <a href="#string-cut-function">string_cut</a> / <a href="#string-part-function">string_part</a> - disable handling of negative indices
</li><li>STRING_STRICT_RANGES - used by <a href="#string-cut-function">string_cut</a> / <a href="#string-part-function">string_part</a> - disable handling of out-of-bounds indices
</li><li>STRING_TRIM_LEFT, STRING_TRIM_RIGHT - used by <a href="#string-trim-function">string_trim</a> - specify sides to be trimmed
</li><li>STRING_PAD_LEFT, STRING_PAD_RIGHT - used by <a href="#string-pad-function">string_pad</a> - specify sides to be padded</li></ul></div>
<div class='item'><a name='string-cut-function'></a><hr><h2>string_cut [function]</h2><h3>string_cut( string str, int from[, int to[, int flags]] )</h3><h4>returns a part of string <code>str</code>, <code>from</code> and <code>to</code> being positions of the first and last character returned, respectively</h4><ul><li>if <code>to</code> is not specified, <code>to</code> is assumed to be the position of the last character in string <code>str</code>
</li><li>if <code>from</code> or <code>to</code> are negative, they point to characters before the end of string (-1 being the last one)
</li><li>available values for `flags`:
<ul><li><code>STRING_NO_REV_INDEX</code> - emit warnings on negative indices, instead of handling them
</li><li><code>STRING_STRICT_RANGES</code> - emit warnings on out of bounds `from`/`to` values instead of silently ignoring the outside characters</li></ul></li></ul><pre>string_cut( &quot;01234567&quot;, 3, 5 ); // string [3] &quot;345&quot;</pre></div>
<div class='item'><a name='string-part-function'></a><hr><h2>string_part [function]</h2><h3>string_part( string str, int from[, int len[, int flags]] )</h3><h4>returns a part of string <code>str</code>, starting at <code>from</code>, at most <code>len</code> characters</h4><ul><li>if <code>len</code> is not specified, <code>len</code> is assumed to be the number of characters between <code>from</code> and the end of string <code>str</code>
</li><li>if <code>from</code> is negative, it points to characters before the end of string (-1 being the last one)
</li><li>if <code>len</code> is negative, the maximum length of returned string is the sum of <code>len</code> and string <code>str</code> length
</li><li>available values for `flags`:
<ul><li><code>STRING_NO_REV_INDEX</code> - emit warnings on negative indices, instead of handling them
</li><li><code>STRING_STRICT_RANGES</code> - emit warnings on out of bounds `from`/`len` values instead of silently ignoring the outside characters</li></ul></li></ul><pre>string_part( &quot;01234567&quot;, 3, 3 ); // string [3] &quot;345&quot;</pre></div>
<div class='item'><a name='string-reverse-function'></a><hr><h2>string_reverse [function]</h2><h3>string_reverse( string str )</h3><h4>returns <code>str</code> with all the bytes in reversed order</h4><p>
<em class='notice-bgr'>This function will not work correctly with multibyte-encoded strings.</em>
</p><pre>string_reverse( &quot;noitca&quot; ); // string [6] &quot;action&quot;</pre></div>
<div class='item'><a name='string-pad-function'></a><hr><h2>string_pad [function]</h2><h3>string_pad( string str, int tgtsize, string padstr = &quot; &quot;, int flags = STRING_PAD_RIGHT )</h3><h4>return the string <code>str</code>, padded from template <code>padstr</code> up to the size <code>tgtsize</code> according to <code>flags</code></h4><ul><li>if <code>str</code> is longer than <code>tgtsize</code>, it is returned without changes
</li><li>available values for `flags`:
<ul><li><code>STRING_PAD_LEFT</code> - pad the string at the left side
</li><li><code>STRING_PAD_RIGHT</code> - pad the string at the right side
</li><li>if both flags are OR&#39;ed together, the string <code>str</code> is centered
</li><li>at least one of the flags must be specified if the argument is passed for the function to work</li></ul></li></ul><pre>string_pad( &quot;padded&quot;, 10 ); // string [10] &quot;padded    &quot;
string_pad( &quot;center&quot;, 10, &quot;_&quot;, STRING_PAD_LEFT | STRING_PAD_RIGHT ); // string [10] &quot;__center__&quot;</pre></div>
<div class='item'><a name='string-repeat-function'></a><hr><h2>string_repeat [function]</h2><h3>string_repeat( string str, int count )</h3><h4>return the string <code>str</code>, appended to itself `count`-1 times or an empty string if <code>count</code> is equal to 0</h4><ul><li><code>count</code> must be greater than or equal to 0</li></ul><pre>string_repeat( &quot;na&quot;, 6 ); // string [12] &quot;nananananana&quot;
string_repeat( &quot;none&quot;, 0 ); // string [0] &quot;&quot;</pre></div>
<div class='item'><a name='string-count-function'></a><hr><h2>string_count [function]</h2><h3>string_count( string str, string substr, bool overlap = false )</h3><h4>returns the number of substrings <code>substr</code> found in string <code>str</code></h4><ul><li>if <code>overlap</code> is true, function does not skip substrings when they are found</li></ul><pre>string_count( &quot;abababa&quot;, &quot;aba&quot; ); // int 2
string_count( &quot;abababa&quot;, &quot;aba&quot;, true ); // int 3</pre></div>
<div class='item'><a name='string-find-function'></a><hr><h2>string_find [function]</h2><h3>string_find( string str, string substr, int offset = 0 )</h3><h4>returns the position of first found substring <code>substr</code> in string <code>str</code>, starting at <code>offset</code></h4><ul><li>if <code>substr</code> was not found, &#39;null&#39; is returned
</li><li>if <code>offset</code> is less than 0, it specifies offset from the end</li></ul><pre>string_find( &quot;what hat&quot;, &quot;hat&quot; ); // int 1
string_find( &quot;what&quot;, &quot;hat&quot;, 2 ); // null</pre></div>
<div class='item'><a name='string-find-rev-function'></a><hr><h2>string_find_rev [function]</h2><h3>string_find_rev( string str, string substr, int offset = 0 )</h3><h4>returns the position of last found substring <code>substr</code> in string <code>str</code>, starting at <code>offset</code></h4><ul><li>if <code>substr</code> was not found, &#39;null&#39; is returned
</li><li>if <code>offset</code> is less than 0, it specifies offset from the end</li></ul><pre>string_find_rev( &quot;what hat&quot;, &quot;hat&quot; ); // int 5
string_find_rev( &quot;what&quot;, &quot;hat&quot;, 2 ); // int 1</pre></div>
<div class='item'><a name='string-replace-function'></a><hr><h2>string_replace [function]</h2><h3>string_replace( string str, string from, string to )</h3><h3>string_replace( string str, array from, string to )</h3><h3>string_replace( string str, array from, array to )</h3><h4>replaces parts of string <code>str</code>, specified in <code>from</code>, to the respective values passed in <code>to</code></h4><ul><li>the respective replacement is picked by taking the substring index and performing modulo operation with the number of replacement strings</li></ul><pre>string_replace( &quot;loaded %num files&quot;, &quot;%num&quot;, 5 ); // string [14] &quot;loaded 5 files&quot;
string_replace( &quot;abcd&quot;, [&quot;a&quot;,&quot;b&quot;,&quot;c&quot;,&quot;d&quot;], [1,2,3,4] ); // string [4] &quot;1234&quot;
string_replace( &quot;1234&quot;, [&quot;1&quot;,&quot;2&quot;,&quot;3&quot;,&quot;4&quot;], [&quot;x&quot;,&quot;y&quot;] ); // string [4] &quot;xyxy&quot;</pre></div>
<div class='item'><a name='string-translate-function'></a><hr><h2>string_translate [function]</h2><h3>string_translate( string str, iterable repmap )</h3><h4>replaces parts of string <code>str</code>, specified in the keys of <code>repmap</code>, to the matching values of the same iterable</h4><pre>string_translate( &quot;found %a files and %b folders&quot;, {&quot;%a&quot; = 5, &quot;%b&quot; = 17} ); // string [28] &quot;found 5 files and 17 folders&quot;</pre></div>
<div class='item'><a name='string-trim-function'></a><hr><h2>string_trim [function]</h2><h3>string_trim( string str, string chars = &quot; \t\r\n&quot;, int flags = STRING_TRIM_LEFT | STRING_TRIM_RIGHT )</h3><h4>removes the specified characters from the specified sides of the string</h4><ul><li>available values for `flags`:
<ul><li><code>STRING_TRIM_LEFT</code> - trim the string from the left side
</li><li><code>STRING_TRIM_RIGHT</code> - trim the string from the right side</li></ul></li></ul><pre>string_trim( &quot;  space  &quot; ); // string [5] &quot;space&quot;
string_trim( &quot;..something!..&quot;, &quot;.!&quot;, STRING_TRIM_RIGHT ); // string [11] &quot;..something&quot;</pre></div>
<div class='item'><a name='string-toupper-function'></a><hr><h2>string_toupper [function]</h2><h3>string_toupper( string str )</h3><h4>converts all ASCII lowercase letter characters of the string to uppercase</h4><pre>string_toupper( &quot;Test&quot; ); // string [4] &quot;TEST&quot;</pre></div>
<div class='item'><a name='string-tolower-function'></a><hr><h2>string_tolower [function]</h2><h3>string_tolower( string str )</h3><h4>converts all ASCII uppercase letter characters of the string to lowercase</h4><pre>string_toupper( &quot;Test&quot; ); // string [4] &quot;test&quot;</pre></div>
<div class='item'><a name='string-compare-function'></a><hr><h2>string_compare [function]</h2><h3>string_compare( string str1, string str2, int max = 0, int from = 0 )</h3><h4>compares the two strings or the specified portions of them</h4><pre>string_compare( &quot;what&quot;, &quot;whaT&quot; ); // int 1
string_compare( &quot;what&quot;, &quot;whaT&quot;, 3 ); // int 0
string_compare( &quot;file.txt&quot;, &quot;.txt&quot;, 0, -4 ); // int 0</pre></div>
<div class='item'><a name='string-implode-function'></a><hr><h2>string_implode [function]</h2><h3>string_implode( array items, string sep )</h3><h4>concatenates the string representations of array <code>items</code> values, putting a string <code>sep</code> between each two</h4><pre>string_implode( [&quot;one&quot;,&quot;two&quot;,&quot;three&quot;], &quot;, &quot; ); // string [15] &quot;one, two, three&quot;</pre></div>
<div class='item'><a name='string-explode-function'></a><hr><h2>string_explode [function]</h2><h3>string_explode( string str, string sep )</h3><h4>splits the string <code>str</code> into an array of substrings, separated by string <code>sep</code></h4><pre>string_explode( &quot;www.example.com&quot;, &quot;.&quot; ); // [&quot;www&quot;,&quot;example&quot;,&quot;com&quot;]
string_explode( &quot;x&quot;, &quot;-&quot; ); // [&quot;x&quot;]
string_explode( &quot;/some//data&quot;, &quot;/&quot; ); // [&quot;&quot;,&quot;some&quot;,&quot;&quot;,&quot;data&quot;]</pre></div>
<div class='item'><a name='string-charcode-function'></a><hr><h2>string_charcode [function]</h2><h3>string_charcode( string str, int offset = 0 )</h3><h4>returns the byte value / ASCII character code of the specified byte in the string</h4><pre>string_charcode( &quot;Test&quot; ); // int 84
string_charcode( &quot;Test&quot;, 3 ); // int 116</pre></div>
<div class='item'><a name='string-frombytes-function'></a><hr><h2>string_frombytes [function]</h2><h3>string_frombytes( int byteval )</h3><h3>string_frombytes( array bytes )</h3><h4>returns a string, created from either one byte value (overload #1) or an array of byte values (overload #2)</h4><ul><li>byte values must be in the range [0-255]</li></ul><pre>string_frombytes( 53 ); // string [1] &quot;5&quot;
string_frombytes([ 84, 101, 115, 116 ]); // string [4] &quot;Test&quot;</pre></div>
<div class='item'><a name='string-utf8-decode-function'></a><hr><h2>string_utf8_decode [function]</h2><h3>string_utf8_decode( string ustr )</h3><h4>returns an array of Unicode code points, decoded from the UTF-8 string <code>ustr</code></h4><ul><li>invalid byte sequences will add 0xFFFD to the array</li></ul><pre>string_utf8_decode( &quot;pie&quot; ); // [112,105,101]
string_utf8_decode( &quot;код&quot; ); // [1082,1086,1076]
string_utf8_decode( &quot;標準&quot; ); // [27161,28310]</pre></div>
<div class='item'><a name='string-utf8-encode-function'></a><hr><h2>string_utf8_encode [function]</h2><h3>string_utf8_encode( array cplist )</h3><h4>returns a UTF-8 string, composed from the Unicode code point list <code>cplist</code></h4><p>
<em class='notice-bgr'>Without proper terminal software UTF-8 strings will not be displayed correctly (as is the case on Windows).</em>
</p><ul><li>invalid code points will add &quot;\xEF\xBF\xBD&quot; (0xFFFD code point as UTF-8) to the string</li></ul><pre>string_utf8_encode( [112,105,101] ); // string [3] &quot;pie&quot;
string_utf8_decode( [1082,1086,1076] ); // string [6] &quot;код&quot;
string_utf8_decode( [27161,28310] ); // string [6] &quot;標準&quot;</pre></div>
<div class='item'><a name='string-format-function'></a><hr><h2>string_format [function]</h2><h3>string_format( string text, ... )</h3><h4>parses all format specifiers in <code>text</code> and returns the result</h4><p>
<em class='notice-bgr'>see <a href="#fmt-text-function">fmt_text</a> if you don&#39;t need the position (argument index) specifications</em>
</p><ul><li>the format specifier has the form {&lt;id&gt;:&lt;specifier&gt;} where &quot;id&quot; is the argument index to use and specifier is a <a href="#fmt-text-function">fmt_text</a> specifier
</li><li>argument indices to be used in specifiers start from 1</li></ul><pre>print string_format( &quot;{1:d} -&gt; {1:x}&quot;, 1337 ); // prints &quot;1337 -&gt; 539&quot;</pre></div>
<div class='item'><a name='Additional-info'></a><hr><h2>Additional info</h2></div>
<div class='item'><a name='Serialization-in-SGScript'></a><hr><h2>Serialization in SGScript</h2><p>
In SGScript, serialization is conversion to a binary stream of a specific format. Serialization in the language API is done by calling the &quot;<a href="#serialize-function">serialize</a>&quot; function and deserialization is done with &quot;<a href="#unserialize-function">unserialize</a>&quot;. The C API has similar functions: <a href="#sgs-Serialize-function">sgs_Serialize</a> / <a href="#sgs-SerializeObject-function">sgs_SerializeObject</a> and <a href="#sgs-Unserialize-function">sgs_Unserialize</a>, respectively.
</p><p>
<em class='notice-bgr'>check the &quot;Possible gotchas&quot; part of this page if it is intended to trust the end user with access to serialized data</em>
</p><h4>The format</h4><ul><li>a list of operations
</li><li>each operation consists of a &#39;type&#39; byte and additional data
<ul><li>a &quot;push&quot; operation has the byte &#39;P&#39;, the data consists of the type to push (a byte consisting of one base flag from SGS_VT_*) and the binary data of the type
</li><li>a &quot;call&quot; operation has the byte &#39;C&#39;, the data consists of the number of arguments (4 bytes), function name length (1 byte) and the null-terminated function name itself (&lt;length&gt;+1 bytes)</li></ul></li></ul><h4>Serialization</h4><ul><li>&quot;<a href="#serialize-function">serialize</a>&quot; is called
</li><li>&quot;<a href="#sgs-Serialize-function">sgs_Serialize</a>&quot; is called internally
</li><li>type of variable is determined and the data is written
<ul><li>C functions cannot be serialized (obviously) and whenever encountered, will abort the action
</li><li>objects will have SERIALIZE operation called
<ul><li>if operation is not defined, everything will stop
</li><li>if object is an array, all variables in it will be serialized using <a href="#sgs-Serialize-function">sgs_Serialize</a> and <a href="#sgs-SerializeObject-function">sgs_SerializeObject</a> will generate a call to &#39;array&#39;
</li><li>if object is a &#39;dict&#39; or a &#39;map&#39;, all keys and values in it will be serialized using <a href="#sgs-Serialize-function">sgs_Serialize</a> and <a href="#sgs-SerializeObject-function">sgs_SerializeObject</a> will generate a call to &#39;dict&#39;</li></ul></li></ul></li></ul><h4>Deserialization</h4><ul><li>&quot;<a href="#unserialize-function">unserialize</a>&quot; is called
<ul><li>the global environment could be changed
</li></ul><li>&quot;<a href="#sgs-Unserialize-function">sgs_Unserialize</a>&quot; is called internally
</li><li>&quot;push&quot; and &quot;call&quot; operations are executed, thus regenerating the data
<ul><li>&quot;push&quot; operation pushes a variable on the stack
</li><li>&quot;call&quot; operation calls the specified function</li></ul></li></ul><h4>Possible gotchas</h4><ul><li>unserialization is not by default safe in the sense that any function can be executed with a carefully crafted byte buffer; this can be prevented by specifying the second parameter to the &quot;unserialize&quot; function. the behavior can be reproduced with the C API but it will take a bit more effort or calling the &quot;unserialize&quot; function from it
</li><li><a href="#sgs-Serialize-function">sgs_Serialize</a> overrides the output function so any output done via &quot;print&quot; or &quot;sgs_Write*&quot; functions during serialization will corrupt the stream
</li><li>if environment overrides are used on deserialization, remember to add &quot;array&quot;, &quot;dict&quot; and &quot;map&quot; to the list if you use them, they are not added automatically
</li><li>serialization will not preserve any variable reuse relationships so after deserialization the structure could use more memory than before; if more efficient behavior is desired, it is suggested to serialize an array of unique items and a structure of indices to those items</li></ul></div>
</div>
	</body></html>
	
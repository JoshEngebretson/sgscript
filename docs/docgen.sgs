
println( "--- SGScript documentation generator ---" );

include "string", "fmt", "io", "../bin/sgsjson";
include "markdown.sgs";


io_dir_create( "out" );


function generate_alias( name )
{
	name = string_replace( name, [" "], "-" );
	name = string_trim( name, "-" );
//	name = string_tolower( name );
	return name;
}

function full_alias( name, type )
{
	return generate_alias( name $ " " $ type );
}

function generate_docdata( name )
{
	println( "parsing documentation file '" $ name $ "'..." );

	raw = io_file_read( name $ ".txt" );

	/*
		EXTRACT TAGS
	*/
	lines = string_explode( string_replace( raw, ["\r\n","\r"], "\n" ), "\n" );
	tags = [];
	foreach( id, line : lines )
	{
		if( line.length < 1 || line[0] != "#" )
		{
			if( tags.size && isset( tags.last, "lines" ) )
				tags.last.lines.push( line );
			
			continue;
		}
		
		if( string_find( line, ">>>" ) !== null )
		{
			alias = string_trim( string_cut( line, 2, string_find( line, ">>>" ) - 1 ) );
			tags.push({ id = id, type = ">", alias = alias });
		}
		else if( string_find( line, "<<<" ) !== null )
		{
			tags.push({ id = id, type = "<" });
		}
		else
		{
			pos2 = string_find_rev( line, "]" );
			if( pos2 !== null )
			{
				pos1 = string_find_rev( line, "[" );
				if( pos1 !== null && pos1 < pos2 )
				{
					page_name = string_trim( string_cut( line, 2, pos1 - 1 ) );
					page_type = string_trim( string_part( line, pos1 + 1, pos2 - pos1 - 1 ) );
					tags.push({ id = id, type = "+", pagename = page_name, pagetype = page_type, lines = [] });
				}
			}
		}
	}

	/*
		GENERATE PAGES
	*/

	parts = [];
	foreach( tag : tags )
	{
		if( tag.type == "+" )
		{
			alias = full_alias( tag.pagename, tag.pagetype );
			path = [ alias ];
			path_str = string_implode( path, '/' );
			title = tag.pagename $ " [" $ tag.pagetype $ "]";
			body = string_implode( tag.lines, "\n" );
			parts.push({ path = path, path_str = path_str, title = title, body = body });
		}
	}
	parts.unshift({ path = [], path_str = "", title = "SGScript documentation", body = "" });


	println( "generating and writing html pages..." );

	title = "SGScript documentation - v0.9.0";
	data = "<h1>"$title$"</h1>";

	data $= "<div><h2>Table of Contents</h2>";
	ulevel = 0;
	foreach( P : parts )
	{
		if( !P.path_str )
			continue;
		newulev = P.path.size;
		data $= uladjust( ulevel, newulev );
		data $= "<a href='#" $ P.path_str $ "'>" $ htmlencode( P.title ) $ "</a>";
		ulevel = newulev;
	}
	data $= uladjust( ulevel, 0 );
	data $= "</div>";

	data $= "<div>";
	foreach( P : parts )
	{
		if( !P.path_str )
			continue;
		
		h = "h" $ ( P.path.size + 1 );

		content = markdown2html( P.body );
	//	io_file_write( "out/" $ string_replace( P.path_str, ".", "-" ) $ ".htm", content );
		
		data $= "<div class='item'>";
		data $= "<a name='" $ P.path_str $ "'></a>";
		data $= "<hr><h2>";
		data $= P.title;
	//	if( P.path_str )
	//		data $= " <small>(" $ P.path_str $ ")</small>";
		data $= "</h2>";
		data $= content;
		data $= "</div>";
	}
	data $= "</div>";

	data = '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" '$
		'"http://www.w3.org/TR/html4/loose.dtd">
	<html><head>
		<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
		<title>'$title$"</title>
		<link rel='stylesheet' type='text/css' href='docs.css'>
		<script type='text/javascript' src='docs.js'></script>
	</head><body>
	"$data$"
	</body></html>
	";


	io_file_write( name $ ".htm", data );
}


foreach( real, filename : io_dir( "." ) )
{
	if( !real ) continue;
	if( string_compare( filename, ".docs.txt", 0, -9 ) != 0 )
		continue;
	fn = string_explode( filename, "." );
	fn.pop();
	fn = string_implode( fn, "." );
	generate_docdata( fn );
}

println( "done!" );


include_library( "string" );
include_library( "io" );

include_file( "markdown.sgs" );

raw = io_file_read( "docdata.txt" );
BSEP = "<#####";
ESEP = "#####>";
parts = [];

// split into parts
pp = string_find( raw, BSEP );
while(true)
{
	if( pp == raw.length )
		break;
	p = string_find( raw, BSEP, pp + BSEP.length );
	if( p === null )
		p = raw.length;
	
	// parse data between pp and p
	hdrend = string_find( raw, ESEP, pp );
	hdr = string_cut( raw, pp + BSEP.length, hdrend - 1 );
	body = string_cut( raw, hdrend + ESEP.length, p - 1 );
	hdr = string_trim( hdr );
	body = string_trim( body );
	
	// first part of hdr is path, everything else is title
	hdrfpe = string_find( hdr, " " );
	path = string_cut( hdr, 0, hdrfpe - 1 );
	title = string_trim( string_part( hdr, hdrfpe ) );
	
	pstr = path;
	path = string_explode( path, "." );
	
	parts.push({ path = path, path_str = pstr, title = title, body = body });
	
	pp = p;
}
printvar( parts );


data = "<h1>SGScript documentation - v0.8.2</h1>";

data $= "<div><h2>Table of Contents</h2>";
ulevel = 0;
foreach( P : parts )
{
	newulev = P.path.size;
	data $= uladjust( ulevel, newulev );
	data $= "<a href='#" $ P.path_str $ "'>" $ htmlencode( P.title ) $ "</a>";
	ulevel = newulev;
}
uladjust( ulevel, 0 );
data $= "</div>";

data $= "<div>";
foreach( P : parts )
{
	h = "h" $ ( P.path.size + 1 );
	
	data $= "<div class='item'>";
	data $= "<a name='" $ P.path_str $ "'></a>";
	data $= "<" $ h $ ">";
	data $= P.title;
	data $= " (" $ P.path_str $ ")";
	data $= "</" $ h $ ">";
	data $= markdown2html( P.body );
	data $= "</div>";
}
data $= "</div>";
io_file_write( "docs/test.htm", data );

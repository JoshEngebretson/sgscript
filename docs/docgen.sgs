
println( "--- SGScript documentation generator ---" );

include "string", "io", "json";
include "markdown.sgs";


io_dir_create( "out" );


println( "parsing documentation file..." );

raw = io_file_read( "docdata.txt" );
BSEP = "<#####";
ESEP = "#####>";
parts = [];

/*
	PARSE DOCUMENTATION
*/
pp = string_find( raw, BSEP );
while(true)
{
	if( pp == raw.length )
		break;
	p = string_find( raw, BSEP, pp + BSEP.length );
	if( p === null )
		p = raw.length;
	
	// parse data between pp and p
	hdrend = string_find( raw, ESEP, pp );
	hdr = string_cut( raw, pp + BSEP.length, hdrend - 1 );
	body = string_cut( raw, hdrend + ESEP.length, p - 1 );
	hdr = string_trim( hdr );
	body = string_trim( body );
	
	// first part of hdr is path, everything else is title
	hdrfpe = string_find( hdr, " " );
	path = string_cut( hdr, 0, hdrfpe - 1 );
	title = string_trim( string_part( hdr, hdrfpe ) );
	
	pstr = path;
	path = string_explode( path, "." );
	
	parts.push({ path = path, path_str = pstr, title = title, body = body });
	
	pp = p;
}
parts.unshift({ path = [], path_str = "", title = "SGScript documentation", body = "" });

println( "parsing web tree..." );

/*
	PARSE WEB TREE
*/
tree = eval_file( "doctree.txt" );
function part_from_pathstr( parts, pstr )
{
	foreach( part : parts )
	{
		if( part.path_str == pstr )
			return part;
	}
	return {title = "<error>"};
}
function gen_toc( name, tree, parts, bc )
{
	out = {};
	ch = [];
	foreach( n, v : tree )
	{
		pn = string_replace( n, ".", "/" );
		ch.push( pn );
		if( v !== null )
		{
			st = gen_toc( n, v, parts, clone(bc).push(pn) );
			foreach( stn, sti : st )
				out[ stn ] = sti;
		}
	}
	var rbc = clone(bc);
	if( rbc.size )
		rbc.pop();
	out[ string_replace( name, ".", "/" ) ] =
		{ name = part_from_pathstr( parts, name ).title, bc = rbc, ch = ch };
	return out;
}
toc = gen_toc( "", tree, parts, [] );

println( "writing web tree to out/toc.json..." );

// printvar( toc );
io_file_write( "out/toc.json", json_encode( toc ) );


println( "generating and writing html pages..." );

title = "SGScript documentation - v0.9.0";
data = "<h1>"$title$"</h1>";

data $= "<div><h2>Table of Contents</h2>";
ulevel = 0;
foreach( P : parts )
{
	if( !P.path_str )
		continue;
	newulev = P.path.size;
	data $= uladjust( ulevel, newulev );
	data $= "<a href='#" $ P.path_str $ "'>" $ htmlencode( P.title ) $ "</a>";
	ulevel = newulev;
}
data $= uladjust( ulevel, 0 );
data $= "</div>";

data $= "<div>";
foreach( P : parts )
{
	if( !P.path_str )
		continue;
	
	h = "h" $ ( P.path.size + 1 );

	content = markdown2html( P.body );
	io_file_write( "out/" $ string_replace( P.path_str, ".", "-" ) $ ".htm", content );
	
	data $= "<div class='item'>";
	data $= "<a name='" $ P.path_str $ "'></a>";
	data $= "<hr><h2>";
	data $= P.title;
	if( P.path_str )
		data $= " <small>(" $ P.path_str $ ")</small>";
	data $= "</h2>";
	data $= content;
	data $= "</div>";
}
data $= "</div>";

data = '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" '$
	'"http://www.w3.org/TR/html4/loose.dtd">
<html><head>
	<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
	<title>'$title$"</title>
</head><body>
"$data$"
</body></html>
";


io_file_write( "out/test.htm", data );


println( "done!" );

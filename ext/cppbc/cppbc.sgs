
include "string", "re", "fmt", "io", "os";


global ERR_OOC = "SGS_OBJECT outside class/struct";


global DEFAULT_OBJ_IFUNCS =
{
	"destruct" = "_sgs_destruct",
	"getindex" = "_sgs_getindex",
	"setindex" = "_sgs_setindex",
};

global OBJ_IFUNC_POS =
{
	"destruct"  = 0,
	"gcmark"    = 1,
	"getindex"  = 2,
	"setindex"  = 3,
	"convert"   = 4,
	"serialize" = 5,
	"dump"      = 6,
	"getnext"   = 7,
	"call"      = 8,
	"expr"      = 9,
};

global OBJ_IFUNC_COUNT = 10;


function string_find_any( str, what, pos )
{
	if( pos === null )
		pos = 0;
	
	max = pos - 1;
	citem = null;
	foreach( item : what )
	{
		npos = string_find( str, item, pos );
		if( npos !== null && npos > max )
		{
			citem = item;
			max = npos;
		}
	}
	
	return if( max >= pos, max, null ), citem;
}

function string_find_rev_any( str, what, pos )
{
	if( pos === null )
		pos = str.length;
	
	min = pos + 1;
	foreach( item : what )
	{
		npos = string_find_rev( str, item, pos );
		if( npos !== null && npos < min )
			min = npos;
	}
	
	return if( min <= pos, min, null );
}


function cppbc_error( error ){ println( "ERROR: " $ error ); app_exit(1); }
function cppbc_error_ext( error, code, pos ){ cppbc_error( error ); }


function cppbc_preprocess( code )
{
	if( typeid(code) != VT_STRING )
		cppbc_error( "cppbc_preprocess: expected string" );
	
	pos = 0;
	out = "";
	
	for(;;)
	{
		(to,which) = string_find_any( code, ["/*","//","'","\""], pos );
		if( to === null )
		{
			out $= string_part( code, pos );
			break;
		}
		
		out $= string_part( code, pos, to - pos );
		
		if( which == "/*" )
		{
			out $= " ";
			pos = string_find( code, "*/" );
			if( pos === null )
				cppbc_error( "error in code: unfinished comment detected" );
			pos += 2;
		}
		else if( which == "//" )
		{
			out $= " ";
			npos = string_find_any( code, ["\r\n","\r","\n"], to );
			if( npos === null )
				break;
			pos = npos;
		}
		else if( which == "'" || which == "\"" )
		{
			regex = "#\\\\|" $ which $ "#";
			cpos = to;
			for(;;)
			{
				npos = re_match( code, regex, RE_RETURN_BOTH, cpos );
				if( npos === false )
					cppbc_error( "error in code: unfinished string literal detected" );
				cpos = npos[0][2];
				if( npos[0][0] == "\\" )
					cpos++;
				else
					break;
			}
			out $= which;
			pos = cpos;
		}
	}
	
	return out;
}


function cppbc_remove_blocks( code )
{
	pos = 0;
	out = "";
	level = 0;
	begin = null;
	
	for(;;)
	{
		match = re_match( code, "#\\{|\\}#", RE_RETURN_BOTH, pos );
		if( match === false )
		{
			out $= string_part( code, pos );
			break;
		}
		
		which = match[0][0];
		from = match[0][1];
		to = match[0][2];
		
		if( level == 0 )
			out $= string_cut( code, pos, from - 1 );
		
		if( which == "{" )
		{
			if( level == 0 )
				begin = from;
			level++;
		}
		else // }
		{
			level--;
			if( level == 0 )
			{
				out $= ";";
				begin = null;
			}
			else if( level < 0 )
				cppbc_error( "error in code: curved bracket mismatch" );
		}
		pos = to;
	}
	
	if( level > 0 )
		cppbc_error( "error in code: curved bracket mismatch" );
	
	return out;
}


function cppbc_fix_type( type )
{
	if( type[ type.length - 1 ] == ">" )
		type $= " ";
	return type;
}


/* Find boundaries of block {...} "pos" is in */
function cppbc_block_bounds( code, pos )
{
	upper = null;
	lower = null;
	level = 0;
	
	// LOWER bounds
	for(;;)
	{
		pa = string_find_rev( code, "{", pos );
		pb = string_find_rev( code, "}", pos );
		if( pa === null )
			break;
		if( pb !== null && pb > pa )
		{
			pos = pb - 1;
			level++;
			continue;
		}
		else
		{
			pos = pa - 1;
			level--;
			if( level >= 0 )
				continue;
			lower = pa;
			break;
		}
	}
	
	if( lower === null )
		cppbc_error_ext( ERR_OOC, code, pos );
	
	// UPPER bounds
	for(;;)
	{
		pa = string_find( code, "}", pos );
		pb = string_find( code, "{", pos );
		if( pa === null )
			break;
		if( pb !== null && pb < pa )
		{
			pos = pb + 1;
			level++;
			continue;
		}
		else
		{
			pos = pa + 1;
			level--;
			if( level >= 0 )
				continue;
			upper = pa;
			break;
		}
	}
	
	if( upper === null )
		cppbc_error_ext( ERR_OOC, code, pos );
	
	return [ lower, upper ];
}


function cppbc_get_vdchar_type( char )
{
	if( fmt_charcc( char, "a-zA-Z0-9_" ) )
		return "N";
	if( fmt_charcc( char, " \t\v\r\n" ) )
		return "S";
	return char;
}


function cppbc_find_fp_name( scode )
{
	if( scode.last != ")" )
		cppbc_error( "unrecognized sequence: \"" $ string_implode( scode, "" ) $ "\"" );
	
	level = 0;
	pos = scode.size - 1;
	skipped = false;
	while( pos > 0 )
	{
		item = scode[ pos ];
		if( item == ")" )
		{
			level++;
		}
		else if( item == "(" )
		{
			level--;
			if( level == 0 )
				skipped = true;
		}
		else if( re_match( item, "#^[a-zA-Z0-9_]+$#" ) && skipped )
		{
			return pos;
		}
		pos--;
	}
	
	return null;
}


function cppbc_parse_vardecl( code, bSkipName )
{
	out = [];
	
	code = string_trim( code );
	if( string_find( code, "SGS_ALIAS" ) === 0 )
	{
		inbr = string_find( code, "(" );
		outbr = string_find_rev( code, ")" );
		code = string_part( code, inbr + 1, outbr - inbr - 1 );
		code = string_trim( code );
	}
	
	lct = null;
	for( i = 0; i < code.length; ++i )
	{
		cct = cppbc_get_vdchar_type( code[i] );
		if( cct !== lct || ( cct != "N" && cct != "S" ) )
			out.push("");
		lct = cct;
		out[out.size-1] $= code[i];
	}
	
	name = "";
	if( lct != ")" )
	{
		// basic typedef - identifier at end
		if( !bSkipName || out.size != 1 )
			name = string_trim( out.pop() );
		type = string_trim( string_implode( out, "" ) );
	}
	else
	{
		// function pointer - identifier in right side of 2nd level-0 brackets from the end
		pos = cppbc_find_fp_name( out );
		if( pos === null && !bSkipName )
			cppbc_error( "could not parse type: \"" $ string_implode( out, "" ) $ "\"" );
		if( pos !== null )
		{
			name = out[ pos ];
			out.erase( pos );
		}
		type = string_implode( out, "" );
	}
	
	return {
		name = name,
		type = type,
	};
}


function cppbc_split_cs( code )
{
	code = string_trim( code );
	if( code == "" )
		return [];
	
	out = [""];
	stack = [];
	
	for( i = 0; i < code.length; ++i )
	{
		cc = code[i];
		if( cc == "<" || cc == "(" || cc == "[" )
		{
			stack.push( cc );
		}
		else if( cc == ">" || cc == ")" || cc == "]" )
		{
			if( !stack.size || stack.last != cc )
				cppbc_error( "brace mismatch in argument list" );
			stack.pop();
		}
		else if( cc == "," && stack.size == 0 )
		{
			out.push( "" );
			continue;
		}
		
		out[out.size-1] $= cc;
	}
	
	return out;
}


function cppbc_examine_method( code )
{
	code = string_trim( code );
	ispmatch = re_match( code, "#([a-zA-Z0-9_]+)[ \t\v\r\n]*\\(#", RE_RETURN_BOTH );
	
	if( ispmatch === false )
		cppbc_error( "could not parse method" );
	
	name = ispmatch[1][0];
	rvd = cppbc_parse_vardecl( string_part( code, 0, ispmatch[0][1] ), true );
	
	ptypes = [];
	params = cppbc_split_cs( string_cut( code, ispmatch[0][2], -2 ) );
	foreach( param : params )
	{
		pvd = cppbc_parse_vardecl( param, true );
		ptypes.push( pvd.type );
	}
	
	return {
		what = "METHOD",
		name = name,
		type = rvd.type,
		params = ptypes,
	};
}


function cppbc_examine_property( code )
{
	access = 0;
	
	sp = fmt_string_parser( code );
	
	sp.skipcc( " \t\v\r\n" );
	item = sp.readcc( "a-zA-Z0-9_" );
	begoff = sp.stream_offset;
	
	if( item == "READ" )
		access = -1;
	else if( item == "WRITE" )
		access = 1;
	else
		begoff = 0;
	
	vd = cppbc_parse_vardecl( string_part( code, begoff ) );
	
	return {
		what = "PROPERTY",
		name = vd.name,
		type = vd.type,
		access = access,
	};
}


function cppbc_examine_property_func( code )
{
	access = 0;
	
	sp = fmt_string_parser( code );
	
	sp.skipcc( "( \t\v\r\n" );
	items = [];
	while( ( item = sp.readcc( "a-zA-Z0-9_" ) ) !== "" )
	{
		items.push( item );
		sp.skipcc( " \t\v\r\n" );
	}
	sp.skipcc( ")" );
	
	items.push( "READ" ); // this will not get handled
	readmethod = null;
	writemethod = null;
	readcallback = null;
	writecallback = null;
	lastitem = "";
	foreach( item : items )
	{
		isspecitem = item == "READ" || item == "WRITE" || item == "READ_CALLBACK" || item == "WRITE_CALLBACK";
		if( lastitem == "READ" )
		{
			if( isspecitem )
				readmethod = true;
			else
				readmethod = item;
		}
		else if( lastitem == "WRITE" )
		{
			if( isspecitem )
				writemethod = true;
			else
				writemethod = item;
		}
		else if( lastitem == "READ_CALLBACK" )
		{
			printvar(item);
			if( isspecitem )
				cppbc_error( "READ_CALLBACK: expected method name" );
			else
				readcallback = item;
		}
		else if( lastitem == "WRITE_CALLBACK" )
		{
			if( isspecitem )
				cppbc_error( "WRITE_CALLBACK: expected method name" );
			else
				writecallback = item;
		}
		lastitem = item;
	}
	
	vd = cppbc_parse_vardecl( string_part( code, sp.stream_offset ) );
	
	return {
		what = "PROPERTY_FUNC",
		name = vd.name,
		type = vd.type,
		read = readmethod,
		write = writemethod,
		readcb = readcallback,
		writecb = writecallback,
	};
}


function cppbc_examine_ifunc( code )
{
	ispmatch = re_match( code, "#([a-zA-Z0-9_]+)[ \t\v\r\n]*\\(#", RE_RETURN_BOTH );
	if( ispmatch === false )
		cppbc_error( "could not parse method (ifunc)" );
	
	typematch = re_match( code, "#([a-zA-Z0-9_]+)[ \t\v\r\n)]+#", RE_RETURN_BOTH );
	if( typematch === false )
		cppbc_error( "could not find interface function type" );
	
	name = ispmatch[1][0];
	type = typematch[1][0];
	
	type = string_tolower( type );
	if( !isset( OBJ_IFUNC_POS, type ) )
		cppbc_error( "unrecognized interface function type: " $ type );
	
	return {
		what = "IFUNC",
		name = name,
		type = type,
	};
}


function cppbc_examine_object( code, pos )
{
	// get class/struct bounds
	bounds = cppbc_block_bounds( code, pos );
	
	// get class/struct name
	class_pos = string_find_rev_any( code, ["class","struct"], bounds[0] );
	if( class_pos === null )
		cppbc_error_ext( ERR_OOC, code, pos );
	
	tp = fmt_string_parser( code, class_pos );
	tp.skipcc( "a-z" );
	tp.skipcc( " \t\v\n\r" );
	classname = tp.readcc( "a-zA-Z0-9_" );
	
	// gather all properties/methods
	blockcode = string_cut( code, bounds[0] + 1, bounds[1] - 1 );
	blockcode = cppbc_remove_blocks( blockcode );
	
	items = [];
	matches = re_match_all( blockcode, "#(SGS_PROPERTY_FUNC|SGS_METHOD|SGS_PROPERTY|SGS_IFUNC)(.*?)[;\\{]#ms", RE_RETURN_BOTH );
	foreach( match : matches )
	{
		if( match[1][0] == "SGS_METHOD" )
			item = cppbc_examine_method( match[2][0] );
		else if( match[1][0] == "SGS_PROPERTY" )
			item = cppbc_examine_property( match[2][0] );
		else if( match[1][0] == "SGS_PROPERTY_FUNC" )
			item = cppbc_examine_property_func( match[2][0] );
		else if( match[1][0] == "SGS_IFUNC" )
			item = cppbc_examine_ifunc( match[2][0] );
		items.push( item );
	}
	
	return {
		name = classname,
		items = items,
	};
}


function cppbc_find_objects( code )
{
	matches = re_match_all( code, "#SGS_OBJECT#", RE_RETURN_OFFSETS );
	objects = [];
	foreach( match : matches )
	{
		object = cppbc_examine_object( code, match[0][0] );
		println( "Detected '" $ object.name $ "'" );
		objects.push( object );
	}
	
//	printvar_ext( objects, 10 );
	return objects;
}


function cppbc_generate_code( objects, includes )
{
	// header
	out = string_format( "// SGS/CPP-BC
// warning: do not modify this file, it may be regenerated during any build
// generated: {1}

"
	, os_date_string( "%c" ) );
	
	// includes
	foreach( include : includes )
	{
		out $= "#include \"" $ include $ "\"\n";
	}
	
	////////////////////////
	foreach( obj : objects )
	{
		ifuncs = clone( DEFAULT_OBJ_IFUNCS );
		
		// load the ifuncs
		foreach( item : obj.items )
		{
			if( item.what != "IFUNC" )
				continue;
			
			ifuncs[ item.type ] = item.name;
		}
		
		// method wrappers
		foreach( item : obj.items )
		{
			if( item.what != "METHOD" )
				continue;
			
			line = "";
			foreach( i, param : item.params )
			{
				if( line != "" )
					line $= ", ";
				
				getvar3rd = "";
				ptype = param;
				if( param[ param.length - 1 ] == "*" )
				{
					getvar3rd = "Obj";
					ptype = string_part( param, 0, -1 );
				}
				
				line $= string_format( "sgs_GetVar{3}<{1}>()(C,{2})", cppbc_fix_type( ptype ), i + 1, getvar3rd );
			}
			line = string_format( "data->{1}({2})", item.name, line );
			retval = 0;
			if( item.type != "void" )
			{
				line = "sgs_PushVar(C," $ line $ ");";
				retval = 1;
			}
			else
				line $= ";";
			
			out $= string_translate(
"
static int _sgs_method__%OBJ%__%NAME%( SGS_CTX )
{
	int method_call = sgs_Method( C );
	sgs_FuncName( C, method_call ? \"%OBJ%.%NAME%\" : \"%OBJ%_%NAME%\" );
	if( !sgs_IsObject( C, 0, %OBJ%::_sgs_interface ) )
		return sgs_ArgErrorExt( C, 0, method_call, \"%OBJ%\", \"\" );
	%OBJ%* data = static_cast<%OBJ%*>( sgs_GetObjectData( C, 0 ) );
	%LINE%
	return %RETVAL%;
}
"
			, { "%OBJ%" = obj.name, "%NAME%" = item.name, "%LINE%" = line, "%RETVAL%" = retval } );
		}
		
		// interface functions
		// - OP_DESTRUCT
		out $= string_translate(
"
int %OBJ%::_sgs_destruct( SGS_CTX, sgs_VarObj* obj )
{
	static_cast<%OBJ%*>( obj->data )->~%OBJ%();
	return SGS_SUCCESS;
}
"
		, { "%OBJ%" = obj.name } );
		
		// - OP_GETINDEX
		out $=
"
int " $ obj.name $ "::_sgs_getindex( SGS_CTX, sgs_VarObj* obj, sgs_Variable* key, int param )
{
	char* name;
	if( sgs_ParseStringP( C, key, &name, NULL ) )
	{";
		foreach( item : obj.items )
		{
			itemline = null;
			if( item.what == "METHOD" )
				itemline = "sgs_PushCFunction( C, _sgs_method__%OBJ%__%NAME% );";
			else if( item.what == "PROPERTY" )
			{
				if( item.access <= 0 )
					itemline = "sgs_PushVar( C, static_cast<%OBJ%*>( obj->data )->%NAME% );";
			}
			else if( item.what == "PROPERTY_FUNC" )
			{
				if( item.read === true )
					itemline = "sgs_PushVar( C, static_cast<%OBJ%*>( obj->data )->%NAME% );";
				else if( item.read )
					itemline = "sgs_PushVar( C, static_cast<%OBJ%*>( obj->data )->"$item.read$"() );";
				if( item.readcb )
					itemline $= "\n\t\t\tstatic_cast<%OBJ%*>( obj->data )->"$item.readcb$"();";
			}
			
			if( itemline )
			{
				out $= string_translate( "
		if( strcmp( name, \"%NAME%\" ) == 0 )
		{
			"$itemline$"
			return SGS_SUCCESS;
		}"
				, { "%OBJ%" = obj.name, "%NAME%" = item.name } );
			}
		}
		out $= "
	}
	return SGS_ENOTFND;
}
";
		
		// - OP_SETINDEX
		out $=
"
int " $ obj.name $ "::_sgs_setindex( SGS_CTX, sgs_VarObj* obj, sgs_Variable* key, sgs_Variable* val, int isprop )
{
	char* name;
	if( sgs_ParseStringP( C, key, &name, NULL ) )
	{";
		foreach( item : obj.items )
		{
			itemline = null;
			if( item.what == "PROPERTY" )
			{
				if( item.access >= 0 )
					itemline = "static_cast<%OBJ%*>( obj->data )->%NAME% = sgs_GetVarP<%TYPE%>()( C, val%ISOBJ% );";
			}
			else if( item.what == "PROPERTY_FUNC" )
			{
				if( item.write === true )
					itemline = "static_cast<%OBJ%*>( obj->data )->%NAME% = sgs_GetVarP<%TYPE%>()( C, val%ISOBJ% );";
				else if( item.write )
					itemline = "static_cast<%OBJ%*>( obj->data )->"$item.write$"( sgs_GetVarP<%TYPE%>()( C, val%ISOBJ% ) );";
				if( item.writecb )
					itemline $= "\n\t\t\tstatic_cast<%OBJ%*>( obj->data )->"$item.writecb$"();";
			}
			if( itemline )
			{
				out $= string_translate( "
		if( strcmp( name, \"%NAME%\" ) == 0 )
		{
			"$itemline$"
			return SGS_SUCCESS;
		}"
				, {
					"%OBJ%" = obj.name,
					"%NAME%" = item.name,
					"%TYPE%" = cppbc_fix_type( item.type ),
					"%ISOBJ%" = if( item.type[ item.type.length - 1 ] == "*", "true", "" ),
				});
			}
		}
		out $= "
	}
	return SGS_ENOTFND;
}
";
		// interface
		funcnames = [].resize( OBJ_IFUNC_COUNT );
		foreach( ifname, ifunc : ifuncs )
			funcnames[ OBJ_IFUNC_POS[ ifname ] ] = ifunc;
		out $=
"
sgs_ObjInterface " $ obj.name $ "::_sgs_interface[1] =
{{
	\"" $ obj.name $ "\",
	";
		
		foreach( ifunc : funcnames )
			out $= if( ifunc === null, "NULL, ", string_format( "{1}::{2}, ", obj.name, ifunc ) );
		
		out $=
"
}};

";
	}
	
	return out;
}


function cppbc_parse_file( code, includes )
{
	code = cppbc_preprocess( code );
	objects = cppbc_find_objects( code );
	gcode = cppbc_generate_code( objects, includes );
	return gcode;
}


if( argc < 2 )
	cppbc_error( "Expected at least 1 argument: source file" );

IN = argv[1];
IN = string_replace( IN, "\\", "/" );
if( argc >= 3 )
{
	OUT = argv[2];
}
else
{
	pathspl = string_explode( IN, "/" );
	ofsp = string_explode( pathspl.pop(), "." );
	ofsp.pop();
	pathspl.push( "cppbc_" $ string_implode( ofsp, "." ) $ ".cpp" );
	OUT = string_implode( pathspl, "/" );
}

code = cppbc_parse_file( io_file_read( IN ), [IN] );
io_file_write( OUT, code );


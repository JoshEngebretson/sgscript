
global ERRORS = "";

global funcparams =
{
	"0" = "",
	"1" = "a",
	"2" = "a,b",
	"3" = "a,b,c",
};
global funcargs =
{
	"0" = "",
	"1" = "1",
	"2" = "1,2",
	"3" = "1,2,3",
};
global argretrieval =
{
	"va_get_args" = "va_get_args()",
	"va_get_arg / va_arg_count" = "[va_get_arg(0),va_get_arg(1),va_get_arg(2),va_get_arg(3)].resize(va_arg_count())",
};
global givethis =
{
	"" = ["", "null"],
	"t" = ["0!", "0"],
};
global getthis =
{
	"" = "",
	"t" = "this .. ",
};
global thismap =
{
	"null" = "",
	"0" = "",
	"nullt" = givethis[""][1],
	"0t" = givethis["t"][1],
};
global firstcall =
{
	"following call" = false, // called from SGS
	"first call" = true, // called from C
};

function generate_code()
{
	out = "\n";
	tc = 0;
	foreach( fc_name, isfirstcall : firstcall ) // whether called from C (first call) or SGS (following call)
	foreach( argret_name, argret_value : argretrieval ) // argument retrieval method
	foreach( getthis_name, getthis_value : getthis ) // is 'this' expected?
	foreach( givethis_name, givethis_value : givethis ) // is 'this' given?
	foreach( funcparam_count, funcparam_value : funcparams ) // expected arguments
	foreach( funcarg_count, funcarg_value : funcargs ) // given arguments
	{
		pthis = thismap[ givethis_value[1] .. getthis_name ];
		funcdef = "function(" .. funcparam_value .. "){ testEqual( "
			.. getthis_value .. "tostring(" .. argret_value .. "), \"" .. pthis .. "[" .. funcarg_value
			.. "]\", \"EXP=" .. getthis_name .. funcparam_count
			.. " RECV=" .. givethis_name .. funcarg_count .. " "
			.. " | " .. argret_name .. " | " .. fc_name .. "\" ); }";
		if( !isfirstcall )
		{
			out ..= "(" .. givethis_value[0] .. funcdef .. "(" .. funcarg_value .. "));\n";
		}
		else
		{
			out ..= "(" .. funcdef .. ".apply(" .. givethis_value[1] .. ", [" .. funcarg_value .. "]));\n";
		}
		tc++;
	}
	out ..= "testEqual( tests_ran, " .. tc .. ", 'all " .. tc .. " tests have been triggered' );\n";
//	println(out);
	return out;
}

eval( generate_code() );



global ERRORS, tests_failed, tests_ran;

//
function section( x ){ print( "\n\t<< ", x, " >>\n" ); }
print( "\n\n-- CORE FUNCTIONS --\n" );
include "os";
//

var asz = [ 10, "huh", {}, 0.25, "end!" ];
var arr = [ 9, 3, 6, 2, 8 ];
function customSort( a, b ){ return a - b + ( a % 2 - b % 2 ) * 5000; } // even before odd
var mapping = [ 1, 3, 2, 5, 4 ];
var arr2 = [ 1, 5, 7, 3, 9 ];

	section( "array basic ops" );
testEqual( clone(arr).insert(0,1,4)$'', '[1,4,9,3,6,2,8]', "insert at beginning" );
testEqual( clone(arr).insert(-1,1,4)$'', '[9,3,6,2,8,1,4]', "insert at end" );
testEqual( clone(arr).insert(3,1,4)$'', '[9,3,6,1,4,2,8]', "insert at middle" );
ERRORS = ""; testEqual( clone(arr).insert(6,5), null, "insert - out of bounds" );
testEqual( ERRORS, "[W:array.insert(): index out of bounds]" );
testEqual( clone(arr).erase(0)$'', '[3,6,2,8]', "erase one at beginning" );
testEqual( clone(arr).erase(2)$'', '[9,3,2,8]', "erase one at middle" );
testEqual( clone(arr).erase(-1)$'', '[9,3,6,2]', "erase one at end" );
testEqual( clone(arr).erase(0,2)$'', '[2,8]', "erase many at beginning" );
testEqual( clone(arr).erase(1,3)$'', '[9,8]', "erase many at middle" );
testEqual( clone(arr).erase(-3,-1)$'', '[9,3]', "erase many at end" );
ERRORS = ""; testEqual( clone(arr).erase(4,7), null, "erase - out of bounds" );
testEqual( ERRORS, "[W:array.erase(): index out of bounds]" );
ERRORS = ""; testEqual( clone(arr).erase(4,-2), null, "erase - invalid range" );
testEqual( ERRORS, "[W:array.erase(): after resolving, index #1 must be smaller or equal than index #2]" );

	section( "array sizing" );
testEqual( clone(asz).resize(2)$'', '[10,huh]', "resize - 5 to 2" );
testEqual( clone(asz).resize(2).resize(5)$'', '[10,huh,null,null,null]', "resize - 5 to 2 to 5" );
testEqual( clone(asz).reserve(16).capacity, 16, "reserve - capacity check" );
testEqual( clone(asz).reserve(1).capacity, 5, "reserve - less than current" );

	section( "array.sort" );
testEqual( clone(arr).sort()$'', '[2,3,6,8,9]', "sort - basic integer sorting" );
testEqual( clone(arr).sort(true)$'', '[9,8,6,3,2]', "sort - reversed integer sorting" );

testEqual( clone(arr).sort_custom( customSort )$'', '[2,6,8,3,9]', "sort_custom" );
testEqual( clone(arr).sort_custom( customSort, true )$'', '[9,3,8,6,2]', "sort_custom (reversed)" );

testEqual( clone(arr).sort_mapped( mapping )$'', '[9,6,3,8,2]', "sort_mapped" );
testEqual( clone(arr).sort_mapped( mapping, true )$'', '[2,8,3,6,9]', "sort_mapped (reversed)" );

	section( "array utils" );
testEqual( clone(arr2).reverse()$'', '[9,3,7,5,1]', "reverse - odd" );
testEqual( clone(arr2).resize(4).reverse()$'', '[3,7,5,1]', "reverse - even" );
testEqual( [].reverse()$'', '[]', "reverse - none" );

testEqual( arr.find( "3" ), 1, "find - basic" );
testEqual( arr.find( "3", true ), null, "find - strict, empty" );
testEqual( arr.find( 3, true, 1 ), 1, "find - strict, matching offset" );
testEqual( arr.find( 3, true, 2 ), null, "find - strict, offset, empty" );

TA = [false,0,1,2,3,[],{},[4]];
testEqual( ''$TA.part( 2, 3 ), "[1,2,3]", "part - indices 2 to 4" );
testEqual( ''$TA.part( -11, 5 ), "[false,0]", "part - from -11, 5 items" );
testEqual( ''$TA.part( -11 ), "[false,0,1,2,3,array,dict,array]", "part - from -11 fwd (all)" );
testEqual( ''$TA.part( 11 ), "[]", "part - from 11 fwd (empty)" );

	section( "more array utils" );
testEqual( [1,2,3,3,4].unique()$'', "[1,2,3,4]", "unique - basic" );
testEqual( [1,2,3,"3",4].unique()$'', "[1,2,3,3,4]", "unique - mixed types" );
testEqual( [1,2,3,"3",4].unique(true)$'', "[1,2,3,4]", "unique - string comparison" );
testEqual( typeof([1,2,"3",3,4].unique(true)[2]), "string", "unique - string comparison, swapped" );

testEqual( [1,2,3,4].random(3).size, 3, "random - 3 of 4" );
testEqual( [1,2,3,4].random(4).size, 4, "random - 4 of 4" );
testEqual( [1,2,3,4].random(7).size, 7, "random - 7 of 4" );

	section( "misc." );
testEqual( dict_size({ a = 1, b = 2 }), 2, "dict_size" );

TA = [false,0,1,2,3,[],{},[4]];
testEqual( ''$array_filter( TA ), "[1,2,3,array]", "array_filter - basic" );
testEqual( ''$array_filter( TA, function(x){return x>=1&&x<=3;} ), "[1,2,3]", "array_filter - 1 to 3" );
testEqual( ''$array_filter( TA, function(x){return !x;} ), "[false,0,array,dict]", "array_filter - inverted" );

testEqual( ''$array_process( clone(TA), function(x){return if(x>=1&&x<=3,1,0);} ), "[0,0,1,1,1,0,0,0]", "array_process - 1 to 3" );
testEqual( ''$array_process( clone(TA), function(x){return toint(x) + 10;} ), "[10,10,11,12,13,10,10,10]", "array_process - add 10" );
testEqual( ''$array_process( clone(TA), tostring ), "[false,0,1,2,3,[],{},[4]]", "array_process - convert to string" );

TD = { a = 3, b = false, c = "4", "5" = 0 };
testEqual( ''$dict_filter( TD ), "{a=3,c=4}", "dict_filter - basic" );
testEqual( ''$dict_filter( TD, function(x){ return x >= 1 && x <= 5; } ), "{a=3,c=4}", "dict_filter - 1 to 5" );
testEqual( ''$dict_filter( TD, function(x){return !x;} ), "{b=false,5=0}", "dict_filter - inverted" );
testEqual( ''$dict_filter( TD, function(x,k){ return toint(k); } ), "{5=0}", "dict_filter - key-based" );

testEqual( ''$dict_process( clone(TD), function(x){ return if(x>=1&&x<=5,1,0); } ), "{a=1,b=0,c=1,5=0}", "dict_process - 1 to 5" );
testEqual( ''$dict_process( clone(TD), function(x){return toint(x) + 10;} ), "{a=13,b=10,c=14,5=10}", "dict_process - add 10" );
testEqual( ''$dict_process( clone(TD), tostring ), "{a=3,b=false,c=4,5=0}", "dict_process - convert to string" );
testEqual( ''$dict_process( clone(TD), function(x,k){ return k; } ), "{a=a,b=b,c=c,5=5}", "dict_process - set from key" );


	section( "include_file" );
f2inc = "tests/s_fnexp.sgs";
testEqual( include_file( f2inc ), true, "include_file - basic inclusion" );
global sqr;
testEqual( typeof( sqr ), "func", "include_file - received the variable?" );
sqr = null;
include_file( f2inc );
testEqual( typeof( sqr ), "null", "include_file - didn't rewrite the variable?" );
include_file( f2inc, true );
testEqual( typeof( sqr ), "func", "include_file - did force-rewrite the variable?" );


var libfile = "bin/sgsjson";
if( os_gettype() == "Windows" )
	libfile $= ".dll";
else
	libfile $= ".so";
	section( "include_shared ("$libfile$", OS="$os_gettype()$")" );
testEqual( include_shared( libfile ), true, "include_shared - sgscript_main call [1]" );
testEqual( json_decode$'', 'C function', "include_shared - sgscript_main call [2]" );

	section( "import_cfunc" );
testEqual( typeof( import_cfunc( libfile, "sgscript_main" ) ), "cfunc", "import_cfunc - retrieval of entry point" );
ERRORS = ""; testEqual( import_cfunc( "bin/nosuchfile", "sgscript_main" ), null, "import_cfunc - invalid file name" ); testEqual( ERRORS, "[W:import_cfunc(): file 'bin/nosuchfile' was not found]" );
ERRORS = ""; testEqual( import_cfunc( libfile, "nosuchfunc" ), null, "import_cfunc - invalid function name" ); testEqual( ERRORS, "[W:import_cfunc(): procedure 'nosuchfunc' was not found]" );


//
print( "\n\nTesting finished!\nRan ", tests_ran, " tests of which ", tests_failed, " failed.\n" );
//

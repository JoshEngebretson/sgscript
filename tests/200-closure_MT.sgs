
// `closure`
rec ``
exec `
str1 = "banana";
dafuq = function( pre ) use( str1 ){ println( pre, str1 ); };
dafuq( "this is " );

str2 = "apple";
dafuq2 = function() use( str2 ){ println( this.text, str2 ); };
obj = { text = "that is ", func = dafuq2 };
obj.func();
`
result `SUCCESS`
check_err ``
check_out `this is banana
that is apple
`

// `closure 2`
rec ``
exec `
x = 5;

y = function( a ) use( x )
{
	x += a;
};

y( 4 );
print( x );
`
result `SUCCESS`
check_err ``
check_out `9`

// `closure - pass through`
rec ``
exec `
x = 5;
fn = function( a ) use( x )
{
	fn2 = function( a ) use(x)
	{
		x *= a;
	};
	fn2( a );
	x += a;
};
fn( 4 );
print(x);
`
result `SUCCESS`
check_err ``
check_out `24`

// `closure - reference self (function)`
rec ``
exec `
function fn( a ) use(fn)
{
	if( a >= 10 )
		return a + 1;
	else
		return fn( a + 2 );
}
print( fn(0) );
`
result `SUCCESS`
check_err ``
check_out `11`

// `closure - reference global (and fail)`
rec ``
exec `
global x = 5;
fn = function( a ) use( x )
{
	x += a;
};
fn( 4 );
print(x);
`
result `ECOMP`
check_err `[E:[line 2] Variable storage redefined: closure -> global]`
check_out ``

// `closure + thiscall`
rec ``
exec `
a = 5;
function fn1( x ) use( a )
{
	print( this, "|", x, "|", a, "|" );
}
true!fn1( "arg1" );
fn1.apply( false, [ "arg2" ]);
`
result `SUCCESS`
check_err ``
check_out `true|arg1|5|false|arg2|5|`

// `extended closure test`
rec ``
exec `
q = function(b,x)
{
	y = true;
	return function() use( x, y )
	{
		return x;
	};
};
fn = q(true,5);
printvar( fn );
println( fn() );
gc_collect();
q(true,6);
printvar( fn );
println( fn() );
gc_collect();
`
result `SUCCESS`
check_err ``
check_out `closure
{
  func: SGS function <anonymous>
  #0 (rc=2): int (5)
  #1 (rc=2): bool (true)
}
5
closure
{
  func: SGS function <anonymous>
  #0 (rc=1): int (5)
  #1 (rc=1): bool (true)
}
5
`

// `serialization test`
rec ``
exec `
q = function(b,x)
{
	y = true;
	return function() use( x, y )
	{
		return x;
	};
};
global sq = serialize(q);
global sqi = serialize(q(true,5));`
result `SUCCESS`
check_out ``
check_err ``

// `unserialization test`
rec ``
exec `
usq = unserialize(sq);
usqi = unserialize(sqi);
printvar(usqi());
printvar(usq(true,7));`
result `SUCCESS`
check_err ``
check_out `int (5)
closure
{
  func: SGS function <anonymous> defined at <anonymous>:5
  #0 (rc=2): int (7)
  #1 (rc=2): bool (true)
}
`

// `self-ref. closure serialize`
rec ``
exec `
// do not define as 'function fn' statement, that creates a symbol
fn = function( a ) use(fn)
{
	if( a >= 10 )
		return a + 1;
	else
		return fn( a + 2 );
};
println( fn(0) );
printvar_ext(fn,2);
global sqsr = serialize(fn);
`
result `SUCCESS`
check_err ``
check_out `11
closure
{
  func: SGS function <anonymous>
  #0 (rc=2): closure
  {
    func: ...
    #0 (rc=2): ...
  }
}
`

// `self-ref. closure unserialize`
rec ``
exec `
usqsr = unserialize(sqsr);
println( usqsr(0) );
printvar_ext(usqsr,2);
`
result `SUCCESS`
check_err ``
check_out `11
closure
{
  func: SGS function <anonymous> defined at <anonymous>:3
  #0 (rc=1): closure
  {
    func: ...
    #0 (rc=1): ...
  }
}
`


// `BAD missing semicolons`
exec `x = 5`
result `ECOMP`
exec `if( 15 )
	x = 5`
result `ECOMP`
exec `if( 31 )
{
	x = 5
}`
result `ECOMP`

// `BAD variables`
exec `x = 5, function = 2;`
result `ECOMP`

// `BAD syntax`
exec `if( 32 > 10
{
	print( 777 );
}`
result `ECOMP`

// `BAD syntax 2`
exec `if( 32 > 10
{
	print( 777 );
}
)
x = 5;`
result `ECOMP`

// `comments`
rec ``
exec `// wat
function x(/* arg1 
	*/y){}
print( x );`
result `SUCCESS`
check_err ``
check_out `function`

// `line comment ends with EOF`
exec `a = 5;
// this test is for memory checkers`

// `comment that doesn't end`
rec ``
exec `a; /* `
// `*/ comment that does not end`
result `SUCCESS`
check_err `[E:[line 1] Comment has no end]`
check_out ``

// `comment in string`
rec ``
exec `print( "what are /* comments */ ?" );`
result `SUCCESS`
check_err ``
check_out `what are /* comments */ ?`

// `special constants`
rec ``
exec `printvar( null, true, false );`
result `SUCCESS`
check_err ``
check_out `null
bool (true)
bool (false)
`

// `BAD special constants 1`
rec ``
exec `function null(){}`
result `ECOMP`
check_err `[E:[line 1] Expected identifier after 'function']`
check_out ``

// `BAD special constants 2`
rec ``
exec `function x( null, true, false ){}`
result `ECOMP`
check_err `[E:[line 1] Argument name cannot be a reserved keyword]`
check_out ``

// `BAD special constants 3`
rec ``
exec `null.data = 1337;`
result `ECOMP`
exec `true["x"] = 7331;`
result `ECOMP`
check_err `[E:[line 1] Cannot set property of a constant][E:[line 1] Cannot set indexed value of a constant]`
check_out ``

// `unescaped string literals`
rec ``
exec `printvar( """""" );
printvar( '''line\n
\nend''' );`
result `SUCCESS`
check_err ``
check_out `string [0] ""
string [12] "line\n\x0A\nend"
`

// `BAD unescaped string literals`
rec ``
exec `printvar( """" );`
result `ECOMP`
check_err `[E:[line 1] end of string not found]`
check_out ``

// `string properties`
rec ``
exec `printvar( "hello, world!".length );`
result `SUCCESS`
check_err ``
check_out `int (13)
`

// `extra comma / indexing syntax`
rec ``
exec `var x = [1,2,];
print( x[ 1 ] );`
result `SUCCESS`
check_err ``
check_out `2`

// `BAD extra comma / indexing syntax`
exec `var x = [1,2,];
print( x[ 1, ] );`
result `ECOMP`

// `array literal`
rec ``
exec `var sth = [ 5.0, "things", 2, "have" ];
print( sth );`
result `SUCCESS`
check_err ``
check_out `[5,things,2,have]`

// `BAD array literal`
exec `var sth = [ 5.0 "things", 2, "have" ];`
result `ECOMP`

// `dict literal usual keys`
rec ``
exec `dict = {one = 1,two = 2};
print(dict);
`
result `SUCCESS`
check_err ``
check_out `{one=1,two=2}`

// `dict literal short keys`
rec ``
exec `global one = 1;
two = 2;
dict = {one,two};
print(dict);
`
result `SUCCESS`
check_err ``
check_out `{one=1,two=2}`

// `BAD dict literal`
exec `var x = { y = 5 ;`
result `ECOMP`
exec `var x = { y = 5 ; } ;`
result `ECOMP`
exec `var x = { y: 5 };`
result `ECOMP`
exec `var x = { y 5 } ;`
result `ECOMP`
exec `var x = { 1 y } ;`
result `ECOMP`

// `map literal`
rec ``
exec `a = map{ x = 1, y = 2 };
printvar(a);`
result `SUCCESS`
check_err ``
check_out `map (2)
{
  x = int (1)
  y = int (2)
}
`

// `dict/map variable keys`
rec ``
exec `a =
{
	[print] = 1,
	[_F] = 2,
	[_T] = 3,
};
b = map
{
	[print] = 1,
	[_F] = 2,
	[_T] = 3,
};
`
result `SUCCESS`
check_err `[W:Invalid value type used for index write][W:Invalid value type used for index write]`
check_out ``

// `string concatenation priority`
rec ``
exec `println( 3 $ 4 + 5 );
println( 'X' $ false || true );`
result `SUCCESS`
check_err ``
check_out `39
Xfalse
`

// `string indexing`
rec ``
exec `
//     012345678901
//    -210987654321
str = "what is this";
println( str[0]$str[3]$str[11]$str[-5]$str[-1]$str[-12] );
println( str[-13]$str[12]$str[str] );
`
result `SUCCESS`
check_out `wts sw
nullnullnull
`
check_err `[W:String index out of bounds][W:String index out of bounds][W:Expected integer as string index]`

// `variable declarations`
rec ``
exec `global a = 1, b = 2;
var c = 3, d = 4;
e = "A", f = "B";
function x()
{
	var a = 5, c = 7;
	global b = 6, d = 8;
	e = "C", f = "D";
	print( a, b, c, d, e, f, "--" );
}
x();
print( a, b, c, d, e, f );
`
result `SUCCESS`
check_err ``
check_out `5678CD--1634AB`

// `var.decl. - default values`
rec ``
exec `var a = 5;
{
	var b, c = 6;
	print( a$', '$b$', '$c );
}`
result `SUCCESS`
check_err ``
check_out `5, null, 6`

// `var.decl. - bad scope redefinition`
rec ``
exec `x = 5;
global x;`
result `ECOMP`
exec `global x;
var x;`
result `ECOMP`
exec `var x;
global x;`
result `ECOMP`
check_err `[E:[line 2] Variable storage redefined: local -> global][E:[line 2] Variable storage redefined: global -> local][E:[line 2] Variable storage redefined: local -> global]`
check_out ``

// `order of operators`
rec ``
exec `x = 5, y = 3, z = 1;
print( x - y + z == 3 );`
result `SUCCESS`
check_err ``
check_out `true`

// `BAD operators`
rec ``
exec `a = b+++++c;`
result `ECOMP`
check_err `[E:[line 1] invalid operator found: "+++...", size=5]`
check_out ``

// `BAD operators 2`
exec `x = 2 + * 5;`
result `ECOMP`
exec `y = 3 -> 4;`
result `ECOMP`

// `chain of unary operators`
exec `hfc = !!1;`
result `SUCCESS`

// `self-modifying unary operators`
rec ``
exec `var a, b, c, d;
a = 0, b = a++, c = 5, d = 5;
print( a, b, '\n' );
print( b++, ++b, b++, '\n' );
print( c++ + ++d, '\n' );`
result `SUCCESS`
check_out `10
022
11
`
check_err ``

// `raw comparison operators`
rec ``
exec `println( "one" <=> "two" );
println( "three" <=> "four" );
println( "five" <=> "five" );
println( 5 <=> 7 );
println( 5.1 <=> 6.9 );
// precedence
printvar( 6.9 <=> 5.1 == 1 );
printvar( 1 == 6.9 <=> 5.1 );
`
result `SUCCESS`
check_out `-1
1
0
-1
-1
bool (true)
bool (true)
`
check_err ``

// `bad operators 3`
rec_err ``
exec `x = 5 ! 6;`
result `ECOMP`
check_err `[E:[line 1] Invalid expression]`
rec_err ``
exec `x = 5 ~ 6;`
result `ECOMP`
check_err `[E:[line 1] Invalid expression]`
rec_err ``
exec `x = * 6;`
result `ECOMP`
check_err `[E:[line 1] Invalid expression]`
rec_err ``
exec `x = 6 *;`
result `ECOMP`
check_err `[E:[line 1] Invalid expression]`
rec_err ``
exec `x = 5 + * 6;`
result `ECOMP`
check_err `[E:[line 1] Invalid expression]`

// `multi-index set`
rec ``
exec `a = { b = { c = {} } };
a.b.c[]{
	prop1 = 1,
	prop2 = 2
};
printvar(a);`
result `SUCCESS`
check_err ``
check_out `dict (1)
{
  b = dict (1)
  {
    c = dict (2)
    {
      prop1 = int (1)
      prop2 = int (2)
    }
  }
}
`

// `multi-property set`
rec ``
exec `a = { b = { c = {} } };
a.b.c.{
	prop1 = 1,
	prop2 = 2
};
printvar(a);`
result `SUCCESS`
check_err ``
check_out `dict (1)
{
  b = dict (1)
  {
    c = dict (2)
    {
      prop1 = int (1)
      prop2 = int (2)
    }
  }
}
`

// `null-coalescing operator`
rec ``
exec `printvar( 1 ?? 2 );
printvar( null ?? 2 );
printvar( 1 ?? null );
printvar( null ?? null );
printvar( null ?? null ?? 1 ?? null ?? 2 ?? null ?? null );
`
result `SUCCESS`
check_err ``
check_out `int (1)
int (2)
int (1)
null
int (1)
`

// `error suppression`
rec ``
exec `d = { a = 1, b = 2 };
printlns( @undef, @d.c, @d["e"] );
@undef( d );
@"wat".length = 3;
@_G = 4;`
result `SUCCESS`
check_err ``
check_out `null
null
null
`

// `function reordering`
rec ``
exec `
println( testfn1() ); // global function def. pushed to beginning
function testfn1(){ return "aaa"; }

(function()
{
	println( testfn2() ); // local function def. pushed to beginning
	function testfn2(){ return "bbb"; }
}
)();

println( @testfn3 ); // global function def. NOT pushed to beginning
{function testfn3(){ return "ccc"; }}

(function()
{
	println( @testfn4 ); // local function def. NOT pushed to beginning
	{function testfn4(){ return "ddd"; }}
}
)();
`
check_err ``
check_out `aaa
bbb
null
null
`

// `BAD multiple return values`
rec_err ``
exec `(a,b,c) = 5;`
result `ECOMP`
check_err `[E:[line 1] Expression writes only allowed with function call reads]`

// `BAD MRV from if expression`
rec_err ``
exec `(a,b,c) = if(1,2,3);`
result `ECOMP`
check_err `[E:[line 1] 'if' pseudo-function cannot be used as input for expression writes with multiple outputs]`

// `if expression`
rec ``
exec `a = "success";
print( if( 5*5>5, a, doesnotexist() ) );
`
result `SUCCESS`
check_err ``
check_out `success`

// `BAD while loop`
exec `{
	while( i > 0 )
}`
result `ECOMP`

// `for loop`
rec ``
exec `var i;
for( i = 0; i < 5; ++i )
	print( i );`
result `SUCCESS`
check_err ``
check_out `01234`

// `for loop - while part only used`
rec ``
exec `var i = 0;
for( ; i < 5; )
	print( i++ );`
result `SUCCESS`
check_err ``
check_out `01234`

// `var inside for`
rec ``
exec `for( var i = 0; i < 5; ++i )
	print( i );`
result `SUCCESS`
check_err ``
check_out `01234`

// `var inside and outside for`
rec ``
exec `var myprint = print;
for( var i = 0; i < 5; ++i )
	myprint( i );`
result `SUCCESS`
check_err ``
check_out `01234`

// `break with number`
rec ``
exec `for( var i = 0; i < 5; ++i )
	break 1;
print( i );`
result `SUCCESS`
check_err ``
check_out `0`

// `multi-level break`
rec ``
exec `for( var i = 0; i < 5; ++i )
	for( var j = 0; j < 5; ++j )
		break 2;
print( i, j, 7 );`
result `SUCCESS`
check_err ``
check_out `007`

// `BAD multi-level break`
rec_err ``
exec `break 2;
print( i );`
result `ECOMP`
check_err `[E:[line 1] Attempted to break while not in a loop]`

// `BAD multi-level break 2`
rec_err ``
exec `for( var i = 0; i < 5; ++i )
	break 2;
print( i );`
result `ECOMP`
check_err `[E:[line 2] Break level too high]`

// `continue with number`
rec ``
exec `for( var i = 0; i < 5; ++i )
{
	continue 1;
	i += 100;
}
print( i );`
result `SUCCESS`
check_err ``
check_out `5`

// `multi-level continue`
rec ``
exec `for( var i = 0; i < 7; ++i )
	for( var j = 0; j < 5; ++j )
		continue 2;
print( 0, j, i );`
result `SUCCESS`
check_err ``
check_out `007`

// `do .. while with multi-level break`
rec ``
exec `var i = 5;
do
{
	print( i-- );
}
while( i > 0 )
print( "\n" );
do
{
	print( "multi-level break test... " );
	for( i = 0; i < 5; ++i )
	{
		if( i > 3 )
			break 2;
	}
	print( "ERROR" );
	break;
}
while( true )
if( i == 4 )
	print( "SUCCESS" );`
result `SUCCESS`
check_err ``
check_out `54321
multi-level break test... SUCCESS`

// `foreach - array`
rec ``
exec `arr = [ "one", "two", "three" ];
foreach( k, x : arr )
	println( k, " = ", x );
foreach( x : arr )
	println( x );
foreach( x, : arr )
{
	if( x == 1 ) continue;
	print( x );
	if( x >= 1 ) break;
}
print( "\n" );
`
result `SUCCESS`
check_err ``
check_out `0 = one
1 = two
2 = three
one
two
three
02
`

// `foreach - dict`
rec ``
exec `map = { "1" = "one", "2" = "two", "3" = "three" };
map[ "1.5" ] = "one and a half";
unset( map, "3" );
foreach( k, x : map )
	println( k, " = ", x );
`
result `SUCCESS`
check_err ``
check_out `1 = one
2 = two
1.5 = one and a half
`

// `BAD foreach`
exec `foreach( ,a: arr ) ;`
result `ECOMP`

// `BAD this usage`
rec ``
exec `function a( x, this ){ print( this, x ); }`
result `ECOMP`
check_err `[E:[line 1] Argument name cannot be a reserved keyword]`
check_out ``

// `various syntax tests`
rec ``
exec `include_library( "math" );

function test( x )
{
	var y;
	y = x;
	while( x )
	{
		print( '#' );
		x -= 1;
	}
	print( ' cos x = ', cos( y ), '\n' );
}
var x, y;
x = 10;
while( x )
{
	test( x );
	y += x -= 1;
	print( 'x = ', x, ', y = ', y, '\n' );
}`
result `SUCCESS`
check_err ``

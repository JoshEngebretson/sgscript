
global ERRORS;
global tests_failed, tests_ran;

//
function section( x ){ print( "\n\t<< ", x, " >>\n" ); }
print( "\n\n-- CORE FUNCTIONS --\n" );
include_library( "type" );
//

	section( "array sizing" );
var asz = [ 10, "huh", {}, 0.25, "end!" ];
testEqual( clone(asz).resize(2)$'', '[10,huh]', "resize - 5 to 2" );
testEqual( clone(asz).resize(2).resize(5)$'', '[10,huh,null,null,null]', "resize - 5 to 2 to 5" );
testEqual( clone(asz).reserve(16).capacity, 16, "reserve - capacity check" );
testEqual( clone(asz).reserve(1).capacity, 5, "reserve - less than current" );

	section( "array.sort" );
var arr = [ 9, 3, 6, 2, 8 ];
testEqual( clone(arr).sort()$'', '[2,3,6,8,9]', "sort - basic integer sorting" );
testEqual( clone(arr).sort(true)$'', '[9,8,6,3,2]', "sort - reversed integer sorting" );

function customSort( a, b ){ return a - b + ( a % 2 - b % 2 ) * 5000; } // even before odd
testEqual( clone(arr).sort_custom( customSort )$'', '[2,6,8,3,9]', "sort_custom" );
testEqual( clone(arr).sort_custom( customSort, true )$'', '[9,3,8,6,2]', "sort_custom (reversed)" );

var mapping = [ 1, 3, 2, 5, 4 ];
testEqual( clone(arr).sort_mapped( mapping )$'', '[9,6,3,8,2]', "sort_mapped" );
testEqual( clone(arr).sort_mapped( mapping, true )$'', '[2,8,3,6,9]', "sort_mapped (reversed)" );

	section( "array utils" );
var arr = [ 1, 5, 7, 3, 9 ];
testEqual( clone(arr).reverse()$'', '[9,3,7,5,1]', "reverse - odd" );
testEqual( clone(arr).resize(4).reverse()$'', '[3,7,5,1]', "reverse - even" );
testEqual( [].reverse()$'', '[]', "reverse - none" );

	section( "include_file" );
testEqual( include_file( "tests/s_fnexp.txt" ), true, "include_file - basic inclusion" );

	section( "include_shared" );
testEqual( include_shared( "bin/sgstest.exe" ), true, "include_shared - sgscript_main call [1]" );
testEqual( imported_var, 1337, "include_shared - sgscript_main call [2]" );

	section( "import_cfunc" );
testEqual( typeof( import_cfunc( "bin/sgstest.exe", "sgscript_main" ) ), "cfunc", "import_cfunc - retrieval of entry point" );
ERRORS = ""; testEqual( import_cfunc( "bin/nosuchfile", "sgscript_main" ), null, "import_cfunc - invalid file name" ); testEqual( ERRORS, "[W:import_cfunc() - file not found]" );
ERRORS = ""; testEqual( import_cfunc( "bin/sgstest.exe", "nosuchfunc" ), null, "import_cfunc - invalid function name" ); testEqual( ERRORS, "[W:import_cfunc() - procedure not found]" );


//
print( "\n\nTesting finished!\nRan ", tests_ran, " tests of which ", tests_failed, " failed.\n" );
//
